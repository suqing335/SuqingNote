diff --git a/Android.mk b/Android.mk
old mode 100644
new mode 100755
index 227a6fd..8fe9c40
--- a/Android.mk
+++ b/Android.mk
@@ -3,7 +3,7 @@
 
 MY_LOCAL_PATH := $(call my-dir)
 
-AUDIO_FORCE_LEGACY=false
+AUDIO_FORCE_LEGACY=true
 
 ifeq ($(strip $(AUDIO_FORCE_LEGACY)), true)
     include $(MY_LOCAL_PATH)/legacy_hal/Android.mk
diff --git a/legacy_hal/Android.mk b/legacy_hal/Android.mk
index 0d6c6d5..6f5afc9 100755
--- a/legacy_hal/Android.mk
+++ b/legacy_hal/Android.mk
@@ -12,7 +12,8 @@ LOCAL_SRC_FILES := \
     audio_hw_hal.cpp\
     alsa_mixer.c\
     alsa_route.c\
-    alsa_pcm.c
+    alsa_pcm.c \
+	jstarAudio.c
 
 ifeq ($(BOARD_HAVE_BLUETOOTH),true)
   LOCAL_CFLAGS += -DWITH_A2DP
@@ -37,6 +38,10 @@ LOCAL_STATIC_LIBRARIES := libmedia_helper \
 
 LOCAL_C_INCLUDES := \
     $(call include-path-for, speex)
+    
+#LOCAL_CFLAGS += -DANDROID_VPROC_API_DBG_INFO
+#LOCAL_CFLAGS += -DANDROID_VPROC_API_DBG_ERROR
+    
 LOCAL_SHARED_LIBRARIES:= libc libcutils libutils libmedia libhardware_legacy libspeexresampler
 include $(BUILD_SHARED_LIBRARY)
 include $(CLEAR_VARS)
@@ -56,7 +61,8 @@ LOCAL_SRC_FILES := \
     audio_hw_hal.cpp\
     alsa_mixer.c\
     alsa_route.c\
-    alsa_pcm.c
+    alsa_pcm.c \
+	jstarAudio.c
 
 LOCAL_CFLAGS += -DSUPPORT_USB
 LOCAL_MODULE := audio.alsa_usb.$(TARGET_BOARD_HARDWARE)
@@ -72,6 +78,8 @@ LOCAL_MODULE_TAGS := optional
 LOCAL_STATIC_LIBRARIES := libmedia_helper \
 	libspeex
 LOCAL_CFLAGS := -Wno-unused-parameter
+#LOCAL_CFLAGS += -DANDROID_VPROC_API_DBG_INFO
+#LOCAL_CFLAGS += -DANDROID_VPROC_API_DBG_ERROR
 LOCAL_C_INCLUDES := \
     $(call include-path-for, speex)
 LOCAL_SHARED_LIBRARIES:= libc libcutils libutils libmedia libhardware_legacy libspeexresampler
@@ -140,3 +148,11 @@ endif
 include $(BUILD_SHARED_LIBRARY)
 endif
 
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES:= tw_ldcfg.c
+LOCAL_MODULE:= tw_ldcfg
+LOCAL_CFLAGS += -DVPROC_API_DBG_INFO
+LOCAL_CFLAGS += -DVPROC_API_DBG_ERROR
+LOCAL_SHARED_LIBRARIES := libc libcutils
+include $(BUILD_EXECUTABLE)
+
diff --git a/legacy_hal/AudioHardware.cpp b/legacy_hal/AudioHardware.cpp
index 6b8f95c..21782d6 100755
--- a/legacy_hal/AudioHardware.cpp
+++ b/legacy_hal/AudioHardware.cpp
@@ -41,7 +41,14 @@
 extern "C" {
 #include "alsa_audio.h"
 }
-
+extern "C" {
+#define _GNU_SOURCE
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+/*port AT*/
+static char *serial_usb_path = "/dev/ttyUSB2";
+}
 //when you want write the output data ,you can open this maroc.
 //#define DEBUG_ALSA_OUT
 //#define DEBUG_ALSA_IN
@@ -481,7 +488,17 @@ status_t AudioHardware::setMicMute(bool state)
             // in call mute is handled by RIL
             if (mMode != AudioSystem::MODE_IN_CALL) {
                 spIn = getActiveInput_l();
-            }
+            } else {
+		if (access(serial_usb_path, W_OK) == 0) {
+			char *cmd;
+			//ALOGD("find usb serial option driver");
+			asprintf(&cmd, "echo -e \"AT+CMUT=%1d\r\n\" > %s", state?1:0, serial_usb_path);
+			system(cmd);
+			free(cmd);   
+		} else {
+			ALOGE("can not find %s\n", serial_usb_path);
+		}
+	    }
         }
     }
 
diff --git a/legacy_hal/alsa_route.c b/legacy_hal/alsa_route.c
index 46ab9a3..d007342 100755
--- a/legacy_hal/alsa_route.c
+++ b/legacy_hal/alsa_route.c
@@ -28,6 +28,8 @@
 
 #include "codec_config/config_list.h"
 
+#include "jstarAudio.h"
+
 #define PCM_DEVICE0_PLAYBACK 0
 #define PCM_DEVICE0_CAPTURE 1
 #define PCM_DEVICE1_PLAYBACK 2
@@ -372,8 +374,10 @@ int route_set_controls(unsigned route)
         return -EINVAL;
     }
 
-    if (route_info->controls_count > 0)
-        set_controls(mMixer, route_info->controls, route_info->controls_count);
+    if (route_info->controls_count > 0) {
+        //set_controls(mMixer, route_info->controls, route_info->controls_count);
+	set_config_status_route(route);
+    }
 
     return 0;
 }
@@ -406,7 +410,7 @@ struct pcm *route_pcm_open(unsigned route, unsigned int flags)
     }
 #endif
 
-    ALOGV("route_pcm_open() route %d", route);
+    ALOGE("route_pcm_open() route %d", route);
 
     is_playback = is_playback_route(route);
 
diff --git a/legacy_hal/inc/base_config.h b/legacy_hal/inc/base_config.h
new file mode 100755
index 0000000..919bbda
--- /dev/null
+++ b/legacy_hal/inc/base_config.h
@@ -0,0 +1,1029 @@
+#ifndef __BASE_CONFIG_H_
+#define __BASE_CONFIG_H_
+unsigned short base_config_array[][2] = {
+{0x0200, 0x0000},
+{0x0202, 0x0c81},
+{0x0204, 0x0010},
+{0x0206, 0x0000},
+{0x0208, 0x0000},
+{0x020a, 0x0000},
+{0x020c, 0x0000},
+{0x020e, 0x0000},
+{0x0210, 0x000d},
+{0x0212, 0x0000},
+{0x0214, 0x000e},
+{0x0216, 0x0000},
+{0x0218, 0x0000},
+{0x021a, 0x0000},
+{0x021c, 0x0000},
+{0x021e, 0x000e},
+{0x0220, 0x0000},
+{0x0222, 0x0000},
+{0x0224, 0x0001},
+{0x0226, 0x0a09},
+{0x0228, 0x0000},
+{0x022a, 0x0000},
+{0x022c, 0x0000},
+{0x022e, 0x0000},
+{0x0230, 0x0000},
+{0x0232, 0x0000},
+{0x0234, 0x0000},
+{0x0236, 0x0000},
+{0x0238, 0x0000},
+{0x023a, 0x0000},
+{0x023c, 0x0000},
+{0x023e, 0x0000},
+{0x0240, 0x0000},
+{0x0242, 0x0000},
+{0x0244, 0x0000},
+{0x0246, 0x0000},
+{0x0248, 0x0000},
+{0x024a, 0x0000},
+{0x024c, 0x0004},
+{0x024e, 0x0000},
+{0x0250, 0x0000},
+{0x0252, 0x0000},
+{0x0254, 0x0000},
+{0x0256, 0x0000},
+{0x0258, 0x0000},
+{0x025a, 0x0000},
+{0x025c, 0x0000},
+{0x025e, 0x0000},
+{0x0260, 0x0000},
+{0x0262, 0x01f2},
+{0x0264, 0x40c0},
+{0x0266, 0x0000},
+{0x0268, 0x0100},
+{0x026a, 0x0102},
+{0x026c, 0x0004},
+{0x026e, 0x0006},
+{0x0270, 0x0000},
+{0x0272, 0x0000},
+{0x0274, 0x0000},
+{0x0276, 0x0000},
+{0x0278, 0xc004},
+{0x027a, 0x03f6},
+{0x027c, 0xc0c0},
+{0x027e, 0x0000},
+{0x0280, 0x0100},
+{0x0282, 0x0101},
+{0x0284, 0x0004},
+{0x0286, 0x0006},
+{0x0288, 0x0000},
+{0x028a, 0x0000},
+{0x028c, 0x0000},
+{0x028e, 0x0000},
+{0x0290, 0x0000},
+{0x0292, 0x0000},
+{0x0294, 0x0000},
+{0x0296, 0x0000},
+{0x0298, 0x0000},
+{0x029a, 0x0000},
+{0x029c, 0x0000},
+{0x029e, 0x0000},
+{0x02a0, 0xc00a},
+{0x02a2, 0x0000},
+{0x02a4, 0x0004},
+{0x02a6, 0x0000},
+{0x02a8, 0x0000},
+{0x02aa, 0x0000},
+{0x02ac, 0x0000},
+{0x02ae, 0x0000},
+{0x02b0, 0x0001},
+{0x02b2, 0x0002},
+{0x02b4, 0x0000},
+{0x02b6, 0x0000},
+{0x02b8, 0x815e},
+{0x02ba, 0xfff1},
+{0x02bc, 0x81e0},
+{0x02be, 0xfff1},
+{0x02c0, 0x03ec},
+{0x02c2, 0xfff6},
+{0x02c4, 0x0000},
+{0x02c6, 0x0000},
+{0x02c8, 0x0000},
+{0x02ca, 0x0000},
+{0x02cc, 0x0000},
+{0x02ce, 0x0000},
+{0x02d0, 0x0000},
+{0x02d2, 0x0000},
+{0x02d4, 0x0000},
+{0x02d6, 0x0000},
+{0x02d8, 0x0000},
+{0x02da, 0x0000},
+{0x02dc, 0x0000},
+{0x02de, 0x0000},
+{0x02e0, 0x0000},
+{0x02e2, 0x0000},
+{0x02e4, 0x0000},
+{0x02e6, 0x0000},
+{0x02e8, 0x0000},
+{0x02ea, 0x0000},
+{0x02ec, 0x0000},
+{0x02ee, 0x0000},
+{0x02f0, 0x0000},
+{0x02f2, 0x0000},
+{0x02f4, 0x0000},
+{0x02f6, 0x0000},
+{0x02f8, 0x0000},
+{0x02fa, 0x0000},
+{0x02fc, 0x0000},
+{0x02fe, 0x0000},
+{0x0300, 0x4008},
+{0x0302, 0x1000},
+{0x0304, 0x0000},
+{0x0306, 0x0000},
+{0x0308, 0x0000},
+{0x030a, 0x0040},
+{0x030c, 0x0810},
+{0x030e, 0xb001},
+{0x0310, 0x9393},
+{0x0312, 0x7f00},
+{0x0314, 0x0000},
+{0x0316, 0x7fff},
+{0x0318, 0x0000},
+{0x031a, 0x0000},
+{0x031c, 0x7fff},
+{0x031e, 0x7fff},
+{0x0320, 0x7fff},
+{0x0322, 0x7fff},
+{0x0324, 0x0200},
+{0x0326, 0x001f},
+{0x0328, 0x3040},
+{0x032a, 0x010c},
+{0x032c, 0x0006},
+{0x032e, 0x0a1f},
+{0x0330, 0x08a1},
+{0x0332, 0x003f},
+{0x0334, 0x0020},
+{0x0336, 0x0000},
+{0x0338, 0x4801},
+{0x033a, 0x0096},
+{0x033c, 0x0002},
+{0x033e, 0x0004},
+{0x0340, 0x0000},
+{0x0342, 0x0800},
+{0x0344, 0x0000},
+{0x0346, 0x0005},
+{0x0348, 0x0000},
+{0x034a, 0x0000},
+{0x034c, 0x0000},
+{0x034e, 0x0000},
+{0x0350, 0x0000},
+{0x0352, 0x0000},
+{0x0354, 0x1122},
+{0x0356, 0x3344},
+{0x0358, 0x0806},
+{0x035a, 0x0228},
+{0x035c, 0xa000},
+{0x035e, 0x0000},
+{0x0360, 0x0013},
+{0x0362, 0x0e80},
+{0x0364, 0x0a00},
+{0x0366, 0x4000},
+{0x0368, 0x0026},
+{0x036a, 0x1a00},
+{0x036c, 0x0800},
+{0x036e, 0x0400},
+{0x0370, 0x0fa0},
+{0x0372, 0x0640},
+{0x0374, 0x0b0b},
+{0x0376, 0x0000},
+{0x0378, 0x0000},
+{0x037a, 0x0010},
+{0x037c, 0x01aa},
+{0x037e, 0x2000},
+{0x0380, 0x0000},
+{0x0382, 0x0200},
+{0x0384, 0x7800},
+{0x0386, 0x0280},
+{0x0388, 0x001e},
+{0x038a, 0x003c},
+{0x038c, 0x0f01},
+{0x038e, 0x08a1},
+{0x0390, 0x0040},
+{0x0392, 0x0000},
+{0x0394, 0x0000},
+{0x0396, 0x0000},
+{0x0398, 0x0000},
+{0x039a, 0x0000},
+{0x039c, 0x0000},
+{0x039e, 0x0000},
+{0x03a0, 0x0000},
+{0x03a2, 0x0020},
+{0x03a4, 0x0002},
+{0x03a6, 0x0064},
+{0x03a8, 0x000f},
+{0x03aa, 0x3333},
+{0x03ac, 0x7fbe},
+{0x03ae, 0x3333},
+{0x03b0, 0x7eb8},
+{0x03b2, 0x7fff},
+{0x03b4, 0x0001},
+{0x03b6, 0x7fdf},
+{0x03b8, 0x0002},
+{0x03ba, 0x7333},
+{0x03bc, 0x7333},
+{0x03be, 0x003c},
+{0x03c0, 0x0000},
+{0x03c2, 0x6666},
+{0x03c4, 0x0001},
+{0x03c6, 0x6666},
+{0x03c8, 0x5a9d},
+{0x03ca, 0x0100},
+{0x03cc, 0x0002},
+{0x03ce, 0x0000},
+{0x03d0, 0x0000},
+{0x03d2, 0x7213},
+{0x03d4, 0x0002},
+{0x03d6, 0x4000},
+{0x03d8, 0x0ccc},
+{0x03da, 0x0000},
+{0x03dc, 0x0000},
+{0x03de, 0x0000},
+{0x03e0, 0x0000},
+{0x03e2, 0x0000},
+{0x03e4, 0x0000},
+{0x03e6, 0x0002},
+{0x03e8, 0x01f0},
+{0x03ea, 0x0078},
+{0x03ec, 0x0032},
+{0x03ee, 0x0004},
+{0x03f0, 0x01f0},
+{0x03f2, 0x0078},
+{0x03f4, 0x0032},
+{0x03f6, 0x087a},
+{0x03f8, 0x0100},
+{0x03fa, 0x0190},
+{0x03fc, 0x0004},
+{0x03fe, 0x0017},
+{0x0400, 0x0400},
+{0x0402, 0x0320},
+{0x0404, 0x0033},
+{0x0406, 0x0000},
+{0x0408, 0x0b27},
+{0x040a, 0x1358},
+{0x040c, 0x0c52},
+{0x040e, 0x1560},
+{0x0410, 0x0da2},
+{0x0412, 0x17a2},
+{0x0414, 0x0f0e},
+{0x0416, 0x1a21},
+{0x0418, 0x123d},
+{0x041a, 0x170a},
+{0x041c, 0x0000},
+{0x041e, 0x0000},
+{0x0420, 0x0000},
+{0x0422, 0x0000},
+{0x0424, 0x0000},
+{0x0426, 0x0000},
+{0x0428, 0x0190},
+{0x042a, 0x0190},
+{0x042c, 0x0000},
+{0x042e, 0x0000},
+{0x0430, 0x0000},
+{0x0432, 0x0000},
+{0x0434, 0x0000},
+{0x0436, 0x0000},
+{0x0438, 0x0000},
+{0x043a, 0x7fff},
+{0x043c, 0x0001},
+{0x043e, 0x000a},
+{0x0440, 0x0001},
+{0x0442, 0x0000},
+{0x0444, 0x0000},
+{0x0446, 0x0000},
+{0x0448, 0x0000},
+{0x044a, 0x0000},
+{0x044c, 0x0000},
+{0x044e, 0x0000},
+{0x0450, 0x0000},
+{0x0452, 0x0000},
+{0x0454, 0x0000},
+{0x0456, 0x0000},
+{0x0458, 0x0000},
+{0x045a, 0x0000},
+{0x045c, 0x0000},
+{0x045e, 0x3000},
+{0x0460, 0x3fff},
+{0x0462, 0x020c},
+{0x0464, 0x0000},
+{0x0466, 0x0000},
+{0x0468, 0x0000},
+{0x046a, 0x0000},
+{0x046c, 0x0000},
+{0x046e, 0x0000},
+{0x0470, 0x0000},
+{0x0472, 0x0000},
+{0x0474, 0x0000},
+{0x0476, 0x0000},
+{0x0478, 0x0000},
+{0x047a, 0x0000},
+{0x047c, 0x0000},
+{0x047e, 0x0000},
+{0x0480, 0x0000},
+{0x0482, 0x0000},
+{0x0484, 0x0000},
+{0x0486, 0x0000},
+{0x0488, 0x0064},
+{0x048a, 0x000f},
+{0x048c, 0x0000},
+{0x048e, 0x0036},
+{0x0490, 0x0000},
+{0x0492, 0x03e8},
+{0x0494, 0x0064},
+{0x0496, 0x1999},
+{0x0498, 0x0ccc},
+{0x049a, 0x0005},
+{0x049c, 0x0019},
+{0x049e, 0x4026},
+{0x04a0, 0x5a67},
+{0x04a2, 0x4026},
+{0x04a4, 0x7fb2},
+{0x04a6, 0x0104},
+{0x04a8, 0x0ccc},
+{0x04aa, 0x0ccc},
+{0x04ac, 0x78d6},
+{0x04ae, 0x0d8f},
+{0x04b0, 0x0004},
+{0x04b2, 0x0000},
+{0x04b4, 0x0000},
+{0x04b6, 0x0000},
+{0x04b8, 0x0000},
+{0x04ba, 0x0000},
+{0x04bc, 0x0000},
+{0x04be, 0x0000},
+{0x04c0, 0x0000},
+{0x04c2, 0x0000},
+{0x04c4, 0x0000},
+{0x04c6, 0x0000},
+{0x04c8, 0x0000},
+{0x04ca, 0x0000},
+{0x04cc, 0x0000},
+{0x04ce, 0x0000},
+{0x04d0, 0x0000},
+{0x04d2, 0x0000},
+{0x04d4, 0x0000},
+{0x04d6, 0x0000},
+{0x04d8, 0x0000},
+{0x04da, 0x0000},
+{0x04dc, 0x0000},
+{0x04de, 0x0000},
+{0x04e0, 0x0000},
+{0x04e2, 0x0000},
+{0x04e4, 0x0000},
+{0x04e6, 0x0000},
+{0x04e8, 0x0000},
+{0x04ea, 0x0000},
+{0x04ec, 0x0000},
+{0x04ee, 0x0000},
+{0x04f0, 0x0000},
+{0x04f2, 0x0000},
+{0x04f4, 0x0000},
+{0x04f6, 0x0000},
+{0x04f8, 0x0000},
+{0x04fa, 0x0000},
+{0x04fc, 0x0000},
+{0x04fe, 0x0000},
+{0x0500, 0x7fff},
+{0x0502, 0x7fff},
+{0x0504, 0x7fff},
+{0x0506, 0x7fff},
+{0x0508, 0x7fff},
+{0x050a, 0x7fff},
+{0x050c, 0x7fff},
+{0x050e, 0x7fff},
+{0x0510, 0x7fff},
+{0x0512, 0x7fff},
+{0x0514, 0x7fff},
+{0x0516, 0x7fff},
+{0x0518, 0x7fff},
+{0x051a, 0x7fff},
+{0x051c, 0x7fff},
+{0x051e, 0x7fff},
+{0x0520, 0x7fff},
+{0x0522, 0x7fff},
+{0x0524, 0x7fff},
+{0x0526, 0x7fff},
+{0x0528, 0x7fff},
+{0x052a, 0x7fff},
+{0x052c, 0x7fff},
+{0x052e, 0x7fff},
+{0x0530, 0x7fff},
+{0x0532, 0x7fff},
+{0x0534, 0x7fff},
+{0x0536, 0x7fff},
+{0x0538, 0x7fff},
+{0x053a, 0x7fff},
+{0x053c, 0x7fff},
+{0x053e, 0x7fff},
+{0x0540, 0x7fff},
+{0x0542, 0x7fff},
+{0x0544, 0x7fff},
+{0x0546, 0x7fff},
+{0x0548, 0x7fff},
+{0x054a, 0x7fff},
+{0x054c, 0x7fff},
+{0x054e, 0x7fff},
+{0x0550, 0x7fff},
+{0x0552, 0x7fff},
+{0x0554, 0x7fff},
+{0x0556, 0x7fff},
+{0x0558, 0x7fff},
+{0x055a, 0x7fff},
+{0x055c, 0x7fff},
+{0x055e, 0x7fff},
+{0x0560, 0x7fff},
+{0x0562, 0x7fff},
+{0x0564, 0x7fff},
+{0x0566, 0x7fff},
+{0x0568, 0x7fff},
+{0x056a, 0x7fff},
+{0x056c, 0x7fff},
+{0x056e, 0x7fff},
+{0x0570, 0x7fff},
+{0x0572, 0x7fff},
+{0x0574, 0x7fff},
+{0x0576, 0x7fff},
+{0x0578, 0x7fff},
+{0x057a, 0x7fff},
+{0x057c, 0x7fff},
+{0x057e, 0x7fff},
+{0x0580, 0x7fff},
+{0x0582, 0x7fff},
+{0x0584, 0x7fff},
+{0x0586, 0x7fff},
+{0x0588, 0x7fff},
+{0x058a, 0x7fff},
+{0x058c, 0x7fff},
+{0x058e, 0x7fff},
+{0x0590, 0x7fff},
+{0x0592, 0x7fff},
+{0x0594, 0x7fff},
+{0x0596, 0x7fff},
+{0x0598, 0x7fff},
+{0x059a, 0x7fff},
+{0x059c, 0x7fff},
+{0x059e, 0x7fff},
+{0x05a0, 0x7fff},
+{0x05a2, 0x7fff},
+{0x05a4, 0x7fff},
+{0x05a6, 0x7fff},
+{0x05a8, 0x7fff},
+{0x05aa, 0x7fff},
+{0x05ac, 0x7fff},
+{0x05ae, 0x7fff},
+{0x05b0, 0x7fff},
+{0x05b2, 0x7fff},
+{0x05b4, 0x7fff},
+{0x05b6, 0x7fff},
+{0x05b8, 0x7fff},
+{0x05ba, 0x7fff},
+{0x05bc, 0x7fff},
+{0x05be, 0x7fff},
+{0x05c0, 0x7fff},
+{0x05c2, 0x7fff},
+{0x05c4, 0x7fff},
+{0x05c6, 0x7fff},
+{0x05c8, 0x7fff},
+{0x05ca, 0x7fff},
+{0x05cc, 0x7fff},
+{0x05ce, 0x7fff},
+{0x05d0, 0x7fff},
+{0x05d2, 0x7fff},
+{0x05d4, 0x7fff},
+{0x05d6, 0x7fff},
+{0x05d8, 0x7fff},
+{0x05da, 0x7fff},
+{0x05dc, 0x7fff},
+{0x05de, 0x7fff},
+{0x05e0, 0x7fff},
+{0x05e2, 0x7fff},
+{0x05e4, 0x7fff},
+{0x05e6, 0x7fff},
+{0x05e8, 0x7fff},
+{0x05ea, 0x7fff},
+{0x05ec, 0x7fff},
+{0x05ee, 0x7fff},
+{0x05f0, 0x7fff},
+{0x05f2, 0x7fff},
+{0x05f4, 0x7fff},
+{0x05f6, 0x7fff},
+{0x05f8, 0x7fff},
+{0x05fa, 0x7fff},
+{0x05fc, 0x7fff},
+{0x05fe, 0x7fff},
+{0x0600, 0x0000},
+{0x0602, 0x0000},
+{0x0604, 0x0000},
+{0x0606, 0x0000},
+{0x0608, 0x0000},
+{0x060a, 0x0000},
+{0x060c, 0x0000},
+{0x060e, 0x0000},
+{0x0610, 0x0000},
+{0x0612, 0x0000},
+{0x0614, 0x0000},
+{0x0616, 0x0000},
+{0x0618, 0x0000},
+{0x061a, 0x0000},
+{0x061c, 0x0000},
+{0x061e, 0x0000},
+{0x0620, 0x0000},
+{0x0622, 0x0000},
+{0x0624, 0x0000},
+{0x0626, 0x0000},
+{0x0628, 0x0000},
+{0x062a, 0x0000},
+{0x062c, 0x0000},
+{0x062e, 0x0000},
+{0x0630, 0x0000},
+{0x0632, 0x0000},
+{0x0634, 0x0000},
+{0x0636, 0x0000},
+{0x0638, 0x0000},
+{0x063a, 0x0000},
+{0x063c, 0x0000},
+{0x063e, 0x0000},
+{0x0640, 0x0000},
+{0x0642, 0x0000},
+{0x0644, 0x0000},
+{0x0646, 0x0000},
+{0x0648, 0x0000},
+{0x064a, 0x0000},
+{0x064c, 0x0000},
+{0x064e, 0x0000},
+{0x0650, 0x0000},
+{0x0652, 0x0000},
+{0x0654, 0x0000},
+{0x0656, 0x0000},
+{0x0658, 0x0000},
+{0x065a, 0x0000},
+{0x065c, 0x0000},
+{0x065e, 0x0000},
+{0x0660, 0x0000},
+{0x0662, 0x0000},
+{0x0664, 0x0000},
+{0x0666, 0x0000},
+{0x0668, 0x0000},
+{0x066a, 0x0000},
+{0x066c, 0x0000},
+{0x066e, 0x0000},
+{0x0670, 0x0000},
+{0x0672, 0x0000},
+{0x0674, 0x0000},
+{0x0676, 0x0000},
+{0x0678, 0x0000},
+{0x067a, 0x0000},
+{0x067c, 0x0000},
+{0x067e, 0x0000},
+{0x0680, 0x0000},
+{0x0682, 0x0000},
+{0x0684, 0x0000},
+{0x0686, 0x0000},
+{0x0688, 0x0000},
+{0x068a, 0x0000},
+{0x068c, 0x0000},
+{0x068e, 0x0000},
+{0x0690, 0x0000},
+{0x0692, 0x0000},
+{0x0694, 0x0000},
+{0x0696, 0x0000},
+{0x0698, 0x0000},
+{0x069a, 0x0000},
+{0x069c, 0x0000},
+{0x069e, 0x0000},
+{0x06a0, 0x0000},
+{0x06a2, 0x0000},
+{0x06a4, 0x0000},
+{0x06a6, 0x0000},
+{0x06a8, 0x0000},
+{0x06aa, 0x0000},
+{0x06ac, 0x0000},
+{0x06ae, 0x0000},
+{0x06b0, 0x0000},
+{0x06b2, 0x0000},
+{0x06b4, 0x0000},
+{0x06b6, 0x0000},
+{0x06b8, 0x0000},
+{0x06ba, 0x0000},
+{0x06bc, 0x0000},
+{0x06be, 0x0000},
+{0x06c0, 0x0000},
+{0x06c2, 0x0000},
+{0x06c4, 0x0000},
+{0x06c6, 0x0000},
+{0x06c8, 0x0000},
+{0x06ca, 0x0000},
+{0x06cc, 0x0000},
+{0x06ce, 0x0000},
+{0x06d0, 0x0000},
+{0x06d2, 0x0000},
+{0x06d4, 0x0000},
+{0x06d6, 0x0000},
+{0x06d8, 0x0000},
+{0x06da, 0x0000},
+{0x06dc, 0x0000},
+{0x06de, 0x0000},
+{0x06e0, 0x0000},
+{0x06e2, 0x0000},
+{0x06e4, 0x0000},
+{0x06e6, 0x0000},
+{0x06e8, 0x0000},
+{0x06ea, 0x0000},
+{0x06ec, 0x0000},
+{0x06ee, 0x0000},
+{0x06f0, 0x0000},
+{0x06f2, 0x0000},
+{0x06f4, 0x0000},
+{0x06f6, 0x0000},
+{0x06f8, 0x0000},
+{0x06fa, 0x0000},
+{0x06fc, 0x0000},
+{0x06fe, 0x0000},
+{0x0700, 0x0000},
+{0x0702, 0x0000},
+{0x0704, 0x0000},
+{0x0706, 0x0000},
+{0x0708, 0x0000},
+{0x070a, 0x0000},
+{0x070c, 0x0000},
+{0x070e, 0x0000},
+{0x0710, 0x0000},
+{0x0712, 0x0000},
+{0x0714, 0x0000},
+{0x0716, 0x0000},
+{0x0718, 0x0000},
+{0x071a, 0x0000},
+{0x071c, 0x0000},
+{0x071e, 0x0000},
+{0x0720, 0x0000},
+{0x0722, 0x0000},
+{0x0724, 0x0000},
+{0x0726, 0x0000},
+{0x0728, 0x0000},
+{0x072a, 0x0000},
+{0x072c, 0x0000},
+{0x072e, 0x0000},
+{0x0730, 0x0000},
+{0x0732, 0x0000},
+{0x0734, 0x0000},
+{0x0736, 0x0000},
+{0x0738, 0x0000},
+{0x073a, 0x0000},
+{0x073c, 0x0000},
+{0x073e, 0x0000},
+{0x0740, 0x0000},
+{0x0742, 0x0000},
+{0x0744, 0x0000},
+{0x0746, 0x0000},
+{0x0748, 0x0000},
+{0x074a, 0x0000},
+{0x074c, 0x0000},
+{0x074e, 0x0000},
+{0x0750, 0x0000},
+{0x0752, 0x0000},
+{0x0754, 0x0000},
+{0x0756, 0x0000},
+{0x0758, 0x0000},
+{0x075a, 0x0000},
+{0x075c, 0x0000},
+{0x075e, 0x0000},
+{0x0760, 0x0000},
+{0x0762, 0x0000},
+{0x0764, 0x0000},
+{0x0766, 0x0000},
+{0x0768, 0x0000},
+{0x076a, 0x0000},
+{0x076c, 0x0000},
+{0x076e, 0x0000},
+{0x0770, 0x0000},
+{0x0772, 0x0000},
+{0x0774, 0x0000},
+{0x0776, 0x0000},
+{0x0778, 0x0000},
+{0x077a, 0x0000},
+{0x077c, 0x0000},
+{0x077e, 0x0000},
+{0x0780, 0x0000},
+{0x0782, 0x0000},
+{0x0784, 0x0000},
+{0x0786, 0x0000},
+{0x0788, 0x0000},
+{0x078a, 0x0000},
+{0x078c, 0x0000},
+{0x078e, 0x0000},
+{0x0790, 0x0000},
+{0x0792, 0x0000},
+{0x0794, 0x0000},
+{0x0796, 0x0000},
+{0x0798, 0x0000},
+{0x079a, 0x0000},
+{0x079c, 0x0000},
+{0x079e, 0x0000},
+{0x07a0, 0x0000},
+{0x07a2, 0x0000},
+{0x07a4, 0x0000},
+{0x07a6, 0x0000},
+{0x07a8, 0x0000},
+{0x07aa, 0x0000},
+{0x07ac, 0x0000},
+{0x07ae, 0x0000},
+{0x07b0, 0x0000},
+{0x07b2, 0x0000},
+{0x07b4, 0x0000},
+{0x07b6, 0x0000},
+{0x07b8, 0x0000},
+{0x07ba, 0x0000},
+{0x07bc, 0x0000},
+{0x07be, 0x0000},
+{0x07c0, 0x0000},
+{0x07c2, 0x0000},
+{0x07c4, 0x0000},
+{0x07c6, 0x0000},
+{0x07c8, 0x0000},
+{0x07ca, 0x0000},
+{0x07cc, 0x0000},
+{0x07ce, 0x0000},
+{0x07d0, 0x0000},
+{0x07d2, 0x0000},
+{0x07d4, 0x0000},
+{0x07d6, 0x0000},
+{0x07d8, 0x0000},
+{0x07da, 0x0000},
+{0x07dc, 0x0000},
+{0x07de, 0x0000},
+{0x07e0, 0x0000},
+{0x07e2, 0x0000},
+{0x07e4, 0x0000},
+{0x07e6, 0x0000},
+{0x07e8, 0x0000},
+{0x07ea, 0x0000},
+{0x07ec, 0x0000},
+{0x07ee, 0x0000},
+{0x07f0, 0x0000},
+{0x07f2, 0x0000},
+{0x07f4, 0x0000},
+{0x07f6, 0x0000},
+{0x07f8, 0x0000},
+{0x07fa, 0x0000},
+{0x07fc, 0x0000},
+{0x07fe, 0x0000},
+{0x0800, 0x0000},
+{0x0802, 0x0000},
+{0x0804, 0x0000},
+{0x0806, 0x0000},
+{0x0808, 0x0000},
+{0x080a, 0x0000},
+{0x080c, 0x0000},
+{0x080e, 0x0000},
+{0x0810, 0x0000},
+{0x0812, 0x0000},
+{0x0814, 0x0000},
+{0x0816, 0x0000},
+{0x0818, 0x0000},
+{0x081a, 0x0000},
+{0x081c, 0x0000},
+{0x081e, 0x0000},
+{0x0820, 0x0000},
+{0x0822, 0x0000},
+{0x0824, 0x0000},
+{0x0826, 0x0000},
+{0x0828, 0x0000},
+{0x082a, 0x0000},
+{0x082c, 0x0000},
+{0x082e, 0x0000},
+{0x0830, 0x0000},
+{0x0832, 0x0000},
+{0x0834, 0x0000},
+{0x0836, 0x0000},
+{0x0838, 0x0000},
+{0x083a, 0x0000},
+{0x083c, 0x0000},
+{0x083e, 0x0000},
+{0x0840, 0x0000},
+{0x0842, 0x0000},
+{0x0844, 0x0000},
+{0x0846, 0x0000},
+{0x0848, 0x0000},
+{0x084a, 0x0000},
+{0x084c, 0x0000},
+{0x084e, 0x0000},
+{0x0850, 0x0000},
+{0x0852, 0x0000},
+{0x0854, 0x0000},
+{0x0856, 0x0000},
+{0x0858, 0x0000},
+{0x085a, 0x0000},
+{0x085c, 0x0000},
+{0x085e, 0x0000},
+{0x0860, 0x0000},
+{0x0862, 0x0000},
+{0x0864, 0x0000},
+{0x0866, 0x0000},
+{0x0868, 0x0000},
+{0x086a, 0x0000},
+{0x086c, 0x0000},
+{0x086e, 0x0000},
+{0x0870, 0x0000},
+{0x0872, 0x0000},
+{0x0874, 0x0000},
+{0x0876, 0x0000},
+{0x0878, 0x0000},
+{0x087a, 0x0000},
+{0x087c, 0x0000},
+{0x087e, 0x0000},
+{0x0880, 0x0000},
+{0x0882, 0x0000},
+{0x0884, 0x0000},
+{0x0886, 0x0000},
+{0x0888, 0x0000},
+{0x088a, 0x0000},
+{0x088c, 0x0000},
+{0x088e, 0x0000},
+{0x0890, 0x0000},
+{0x0892, 0x0000},
+{0x0894, 0x0000},
+{0x0896, 0x0000},
+{0x0898, 0x0000},
+{0x089a, 0x0000},
+{0x089c, 0x0000},
+{0x089e, 0x0000},
+{0x08a0, 0x0000},
+{0x08a2, 0x0000},
+{0x08a4, 0x0000},
+{0x08a6, 0x0000},
+{0x08a8, 0x0000},
+{0x08aa, 0x0000},
+{0x08ac, 0x0000},
+{0x08ae, 0x0000},
+{0x08b0, 0x0000},
+{0x08b2, 0x0000},
+{0x08b4, 0x0000},
+{0x08b6, 0x0000},
+{0x08b8, 0x0000},
+{0x08ba, 0x0000},
+{0x08bc, 0x0000},
+{0x08be, 0x0000},
+{0x08c0, 0x0000},
+{0x08c2, 0x0000},
+{0x08c4, 0x0000},
+{0x08c6, 0x0000},
+{0x08c8, 0x0000},
+{0x08ca, 0x0000},
+{0x08cc, 0x0000},
+{0x08ce, 0x0000},
+{0x08d0, 0x0000},
+{0x08d2, 0x0000},
+{0x08d4, 0x0000},
+{0x08d6, 0x0000},
+{0x08d8, 0x0000},
+{0x08da, 0x0000},
+{0x08dc, 0x0000},
+{0x08de, 0x0000},
+{0x08e0, 0x0000},
+{0x08e2, 0x0000},
+{0x08e4, 0x0000},
+{0x08e6, 0x0000},
+{0x08e8, 0x0000},
+{0x08ea, 0x0000},
+{0x08ec, 0x0000},
+{0x08ee, 0x0000},
+{0x08f0, 0x0000},
+{0x08f2, 0x0000},
+{0x08f4, 0x0000},
+{0x08f6, 0x0000},
+{0x08f8, 0x0000},
+{0x08fa, 0x0000},
+{0x08fc, 0x0000},
+{0x08fe, 0x0000},
+{0x0900, 0x0000},
+{0x0902, 0x0000},
+{0x0904, 0x0000},
+{0x0906, 0x0000},
+{0x0908, 0x0000},
+{0x090a, 0x0000},
+{0x090c, 0x0000},
+{0x090e, 0x0000},
+{0x0910, 0x0000},
+{0x0912, 0x0000},
+{0x0914, 0x0000},
+{0x0916, 0x0000},
+{0x0918, 0x0000},
+{0x091a, 0x0000},
+{0x091c, 0x0000},
+{0x091e, 0x0000},
+{0x0920, 0x0000},
+{0x0922, 0x0000},
+{0x0924, 0x0000},
+{0x0926, 0x0000},
+{0x0928, 0x0000},
+{0x092a, 0x0000},
+{0x092c, 0x0000},
+{0x092e, 0x0000},
+{0x0930, 0x0000},
+{0x0932, 0x0000},
+{0x0934, 0x0000},
+{0x0936, 0x0000},
+{0x0938, 0x0000},
+{0x093a, 0x0000},
+{0x093c, 0x0000},
+{0x093e, 0x0000},
+{0x0940, 0x0000},
+{0x0942, 0x0000},
+{0x0944, 0x0000},
+{0x0946, 0x0000},
+{0x0948, 0x0000},
+{0x094a, 0x0000},
+{0x094c, 0x0000},
+{0x094e, 0x0000},
+{0x0950, 0x0000},
+{0x0952, 0x0000},
+{0x0954, 0x0000},
+{0x0956, 0x0000},
+{0x0958, 0x0000},
+{0x095a, 0x0000},
+{0x095c, 0x0000},
+{0x095e, 0x0000},
+{0x0960, 0x0000},
+{0x0962, 0x0000},
+{0x0964, 0x0000},
+{0x0966, 0x0000},
+{0x0968, 0x0000},
+{0x096a, 0x0000},
+{0x096c, 0x0000},
+{0x096e, 0x0000},
+{0x0970, 0x0000},
+{0x0972, 0x0000},
+{0x0974, 0x0000},
+{0x0976, 0x0000},
+{0x0978, 0x0000},
+{0x097a, 0x0000},
+{0x097c, 0x0000},
+{0x097e, 0x0000},
+{0x0980, 0x0000},
+{0x0982, 0x0000},
+{0x0984, 0x0000},
+{0x0986, 0x0000},
+{0x0988, 0x0000},
+{0x098a, 0x0000},
+{0x098c, 0x0000},
+{0x098e, 0x0000},
+{0x0990, 0x0000},
+{0x0992, 0x0000},
+{0x0994, 0x0000},
+{0x0996, 0x0000},
+{0x0998, 0x0000},
+{0x099a, 0x0000},
+{0x099c, 0x0000},
+{0x099e, 0x0000},
+{0x09a0, 0x0000},
+{0x09a2, 0x0000},
+{0x09a4, 0x0000},
+{0x09a6, 0x0000},
+{0x09a8, 0x0000},
+{0x09aa, 0x0000},
+{0x09ac, 0x0000},
+{0x09ae, 0x0000},
+{0x09b0, 0x0000},
+{0x09b2, 0x0000},
+{0x09b4, 0x0000},
+{0x09b6, 0x0000},
+{0x09b8, 0x0000},
+{0x09ba, 0x0000},
+{0x09bc, 0x0000},
+{0x09be, 0x0000},
+{0x09c0, 0x0000},
+{0x09c2, 0x0000},
+{0x09c4, 0x0000},
+{0x09c6, 0x0000},
+{0x09c8, 0x0000},
+{0x09ca, 0x0000},
+{0x09cc, 0x0000},
+{0x09ce, 0x0000},
+{0x09d0, 0x0000},
+{0x09d2, 0x0000},
+{0x09d4, 0x0000},
+{0x09d6, 0x0000},
+{0x09d8, 0x0000},
+{0x09da, 0x0000},
+{0x09dc, 0x0000},
+{0x09de, 0x0000},
+{0x09e0, 0x0000},
+{0x09e2, 0x0000},
+{0x09e4, 0x0000},
+{0x09e6, 0x0000},
+{0x09e8, 0x0000},
+{0x09ea, 0x0000},
+{0x09ec, 0x0000},
+{0x09ee, 0x0000},
+{0x09f0, 0x0000},
+{0x09f2, 0x0000},
+{0x09f4, 0x0000},
+{0x09f6, 0x0000},
+{0x09f8, 0x0000},
+{0x09fa, 0x0000},
+{0x09fc, 0x4000},
+{0x09fe, 0x0000}	
+};
+#endif /*__BASE_CONFIG_H_*/
\ No newline at end of file
diff --git a/legacy_hal/inc/headset_config.h b/legacy_hal/inc/headset_config.h
new file mode 100755
index 0000000..552ef7c
--- /dev/null
+++ b/legacy_hal/inc/headset_config.h
@@ -0,0 +1,1031 @@
+#ifndef __HEADSET_CONFIG_H_
+#define __HEADSET_CONFIG_H_
+
+const unsigned short headset_config_array[][2] = {
+{0x0200, 0x0000},
+{0x0202, 0x0c81},
+{0x0204, 0x0010},
+{0x0206, 0x0000},
+{0x0208, 0x0000},
+{0x020a, 0x0000},
+{0x020c, 0x0000},
+{0x020e, 0x0000},
+{0x0210, 0x000d},
+{0x0212, 0x0000},
+{0x0214, 0x000e},
+{0x0216, 0x0000},
+{0x0218, 0x0000},
+{0x021a, 0x0000},
+{0x021c, 0x0000},
+{0x021e, 0x000e},
+{0x0220, 0x0000},
+{0x0222, 0x0000},
+{0x0224, 0x0001},
+{0x0226, 0x0a09},
+{0x0228, 0x0000},
+{0x022a, 0x0000},
+{0x022c, 0x0000},
+{0x022e, 0x0000},
+{0x0230, 0x0000},
+{0x0232, 0x0000},
+{0x0234, 0x0000},
+{0x0236, 0x0000},
+{0x0238, 0x0000},
+{0x023a, 0x0000},
+{0x023c, 0x0000},
+{0x023e, 0x0000},
+{0x0240, 0x0000},
+{0x0242, 0x0000},
+{0x0244, 0x0000},
+{0x0246, 0x0000},
+{0x0248, 0x0000},
+{0x024a, 0x0000},
+{0x024c, 0x0000},
+{0x024e, 0x0000},
+{0x0250, 0x0000},
+{0x0252, 0x0000},
+{0x0254, 0x0000},
+{0x0256, 0x0000},
+{0x0258, 0x0000},
+{0x025a, 0x0000},
+{0x025c, 0x0000},
+{0x025e, 0x0000},
+{0x0260, 0x0000},
+{0x0262, 0x01f2},
+{0x0264, 0x40c0},
+{0x0266, 0x0000},
+{0x0268, 0x0100},
+{0x026a, 0x0102},
+{0x026c, 0x0004},
+{0x026e, 0x0006},
+{0x0270, 0x0000},
+{0x0272, 0x0000},
+{0x0274, 0x0000},
+{0x0276, 0x0000},
+{0x0278, 0xc004},
+{0x027a, 0x03f6},
+{0x027c, 0xc0c0},
+{0x027e, 0x0000},
+{0x0280, 0x0100},
+{0x0282, 0x0101},
+{0x0284, 0x0004},
+{0x0286, 0x0006},
+{0x0288, 0x0000},
+{0x028a, 0x0000},
+{0x028c, 0x0000},
+{0x028e, 0x0000},
+{0x0290, 0x0000},
+{0x0292, 0x0000},
+{0x0294, 0x0000},
+{0x0296, 0x0000},
+{0x0298, 0x0000},
+{0x029a, 0x0000},
+{0x029c, 0x0000},
+{0x029e, 0x0000},
+{0x02a0, 0xc000},
+{0x02a2, 0x0000},
+{0x02a4, 0x0004},
+{0x02a6, 0x0000},
+{0x02a8, 0x0000},
+{0x02aa, 0x0000},
+{0x02ac, 0x0000},
+{0x02ae, 0x0000},
+{0x02b0, 0x0001},
+{0x02b2, 0x0000},
+{0x02b4, 0x0000},
+{0x02b6, 0x0000},
+{0x02b8, 0x815e},
+{0x02ba, 0xfff1},
+{0x02bc, 0x81e0},
+{0x02be, 0xfff1},
+{0x02c0, 0x03ec},
+{0x02c2, 0xfff6},
+{0x02c4, 0x0000},
+{0x02c6, 0x0000},
+{0x02c8, 0x0000},
+{0x02ca, 0x0000},
+{0x02cc, 0x0000},
+{0x02ce, 0x0000},
+{0x02d0, 0x0000},
+{0x02d2, 0x0000},
+{0x02d4, 0x0000},
+{0x02d6, 0x0000},
+{0x02d8, 0x0000},
+{0x02da, 0x0000},
+{0x02dc, 0x0000},
+{0x02de, 0x0000},
+{0x02e0, 0x0000},
+{0x02e2, 0x0000},
+{0x02e4, 0x0000},
+{0x02e6, 0x0000},
+{0x02e8, 0x0000},
+{0x02ea, 0x0000},
+{0x02ec, 0x0000},
+{0x02ee, 0x0000},
+{0x02f0, 0x0000},
+{0x02f2, 0x0000},
+{0x02f4, 0x0000},
+{0x02f6, 0x0000},
+{0x02f8, 0x0000},
+{0x02fa, 0x0000},
+{0x02fc, 0x0000},
+{0x02fe, 0x0000},
+{0x0300, 0x4008},
+{0x0302, 0x1000},
+{0x0304, 0x0000},
+{0x0306, 0x0000},
+{0x0308, 0x0000},
+{0x030a, 0x0040},
+{0x030c, 0x0810},
+{0x030e, 0xb001},
+{0x0310, 0x9393},
+{0x0312, 0x7f00},
+{0x0314, 0x0000},
+{0x0316, 0x7fff},
+{0x0318, 0x0000},
+{0x031a, 0x0000},
+{0x031c, 0x7fff},
+{0x031e, 0x7fff},
+{0x0320, 0x7fff},
+{0x0322, 0x7fff},
+{0x0324, 0x0200},
+{0x0326, 0x001f},
+{0x0328, 0x3040},
+{0x032a, 0x010c},
+{0x032c, 0x0006},
+{0x032e, 0x0a1f},
+{0x0330, 0x08a1},
+{0x0332, 0x003f},
+{0x0334, 0x0020},
+{0x0336, 0x0000},
+{0x0338, 0x4801},
+{0x033a, 0x0096},
+{0x033c, 0x0002},
+{0x033e, 0x0004},
+{0x0340, 0x0000},
+{0x0342, 0x0800},
+{0x0344, 0x0000},
+{0x0346, 0x0005},
+{0x0348, 0x0000},
+{0x034a, 0x0000},
+{0x034c, 0x0000},
+{0x034e, 0x0000},
+{0x0350, 0x0000},
+{0x0352, 0x0000},
+{0x0354, 0x1122},
+{0x0356, 0x3344},
+{0x0358, 0x0806},
+{0x035a, 0x0228},
+{0x035c, 0xa000},
+{0x035e, 0x0000},
+{0x0360, 0x0013},
+{0x0362, 0x0e80},
+{0x0364, 0x0a00},
+{0x0366, 0x4000},
+{0x0368, 0x0026},
+{0x036a, 0x1a00},
+{0x036c, 0x0800},
+{0x036e, 0x0400},
+{0x0370, 0x0fa0},
+{0x0372, 0x0640},
+{0x0374, 0x0b0b},
+{0x0376, 0x0000},
+{0x0378, 0x0000},
+{0x037a, 0x0010},
+{0x037c, 0x01aa},
+{0x037e, 0x2000},
+{0x0380, 0x0000},
+{0x0382, 0x0200},
+{0x0384, 0x7800},
+{0x0386, 0x0280},
+{0x0388, 0x001e},
+{0x038a, 0x003c},
+{0x038c, 0x0f01},
+{0x038e, 0x08a1},
+{0x0390, 0x0040},
+{0x0392, 0x0000},
+{0x0394, 0x0000},
+{0x0396, 0x0000},
+{0x0398, 0x0000},
+{0x039a, 0x0000},
+{0x039c, 0x0000},
+{0x039e, 0x0000},
+{0x03a0, 0x0000},
+{0x03a2, 0x0020},
+{0x03a4, 0x0002},
+{0x03a6, 0x0064},
+{0x03a8, 0x000f},
+{0x03aa, 0x3333},
+{0x03ac, 0x7fbe},
+{0x03ae, 0x3333},
+{0x03b0, 0x7eb8},
+{0x03b2, 0x7fff},
+{0x03b4, 0x0001},
+{0x03b6, 0x7fdf},
+{0x03b8, 0x0002},
+{0x03ba, 0x7333},
+{0x03bc, 0x7333},
+{0x03be, 0x003c},
+{0x03c0, 0x0000},
+{0x03c2, 0x6666},
+{0x03c4, 0x0001},
+{0x03c6, 0x6666},
+{0x03c8, 0x5a9d},
+{0x03ca, 0x0100},
+{0x03cc, 0x0002},
+{0x03ce, 0x0000},
+{0x03d0, 0x0000},
+{0x03d2, 0x7213},
+{0x03d4, 0x0002},
+{0x03d6, 0x4000},
+{0x03d8, 0x0ccc},
+{0x03da, 0x0000},
+{0x03dc, 0x0000},
+{0x03de, 0x0000},
+{0x03e0, 0x0000},
+{0x03e2, 0x0000},
+{0x03e4, 0x0000},
+{0x03e6, 0x0002},
+{0x03e8, 0x01f0},
+{0x03ea, 0x0078},
+{0x03ec, 0x0032},
+{0x03ee, 0x0004},
+{0x03f0, 0x01f0},
+{0x03f2, 0x0078},
+{0x03f4, 0x0032},
+{0x03f6, 0x087a},
+{0x03f8, 0x0100},
+{0x03fa, 0x0190},
+{0x03fc, 0x0004},
+{0x03fe, 0x0017},
+{0x0400, 0x0400},
+{0x0402, 0x0320},
+{0x0404, 0x0033},
+{0x0406, 0x0000},
+{0x0408, 0x0b27},
+{0x040a, 0x1358},
+{0x040c, 0x0c52},
+{0x040e, 0x1560},
+{0x0410, 0x0da2},
+{0x0412, 0x17a2},
+{0x0414, 0x0f0e},
+{0x0416, 0x1a21},
+{0x0418, 0x123d},
+{0x041a, 0x170a},
+{0x041c, 0x0000},
+{0x041e, 0x0000},
+{0x0420, 0x0000},
+{0x0422, 0x0000},
+{0x0424, 0x0000},
+{0x0426, 0x0000},
+{0x0428, 0x0190},
+{0x042a, 0x0190},
+{0x042c, 0x0000},
+{0x042e, 0x0000},
+{0x0430, 0x0000},
+{0x0432, 0x0000},
+{0x0434, 0x0000},
+{0x0436, 0x0000},
+{0x0438, 0x0000},
+{0x043a, 0x7fff},
+{0x043c, 0x0001},
+{0x043e, 0x000a},
+{0x0440, 0x0001},
+{0x0442, 0x0000},
+{0x0444, 0x0000},
+{0x0446, 0x0000},
+{0x0448, 0x0000},
+{0x044a, 0x0000},
+{0x044c, 0x0000},
+{0x044e, 0x0000},
+{0x0450, 0x0000},
+{0x0452, 0x0000},
+{0x0454, 0x0000},
+{0x0456, 0x0000},
+{0x0458, 0x0000},
+{0x045a, 0x0000},
+{0x045c, 0x0000},
+{0x045e, 0x3000},
+{0x0460, 0x3fff},
+{0x0462, 0x020c},
+{0x0464, 0x0000},
+{0x0466, 0x0000},
+{0x0468, 0x0000},
+{0x046a, 0x0000},
+{0x046c, 0x0000},
+{0x046e, 0x0000},
+{0x0470, 0x0000},
+{0x0472, 0x0000},
+{0x0474, 0x0000},
+{0x0476, 0x0000},
+{0x0478, 0x0000},
+{0x047a, 0x0000},
+{0x047c, 0x0000},
+{0x047e, 0x0000},
+{0x0480, 0x0000},
+{0x0482, 0x0000},
+{0x0484, 0x0000},
+{0x0486, 0x0000},
+{0x0488, 0x0064},
+{0x048a, 0x000f},
+{0x048c, 0x0000},
+{0x048e, 0x0036},
+{0x0490, 0x0000},
+{0x0492, 0x03e8},
+{0x0494, 0x0064},
+{0x0496, 0x1999},
+{0x0498, 0x0ccc},
+{0x049a, 0x0005},
+{0x049c, 0x0019},
+{0x049e, 0x4026},
+{0x04a0, 0x5a67},
+{0x04a2, 0x4026},
+{0x04a4, 0x7fb2},
+{0x04a6, 0x0104},
+{0x04a8, 0x0ccc},
+{0x04aa, 0x0ccc},
+{0x04ac, 0x78d6},
+{0x04ae, 0x0d8f},
+{0x04b0, 0x0004},
+{0x04b2, 0x0000},
+{0x04b4, 0x0000},
+{0x04b6, 0x0000},
+{0x04b8, 0x0000},
+{0x04ba, 0x0000},
+{0x04bc, 0x0000},
+{0x04be, 0x0000},
+{0x04c0, 0x0000},
+{0x04c2, 0x0000},
+{0x04c4, 0x0000},
+{0x04c6, 0x0000},
+{0x04c8, 0x0000},
+{0x04ca, 0x0000},
+{0x04cc, 0x0000},
+{0x04ce, 0x0000},
+{0x04d0, 0x0000},
+{0x04d2, 0x0000},
+{0x04d4, 0x0000},
+{0x04d6, 0x0000},
+{0x04d8, 0x0000},
+{0x04da, 0x0000},
+{0x04dc, 0x0000},
+{0x04de, 0x0000},
+{0x04e0, 0x0000},
+{0x04e2, 0x0000},
+{0x04e4, 0x0000},
+{0x04e6, 0x0000},
+{0x04e8, 0x0000},
+{0x04ea, 0x0000},
+{0x04ec, 0x0000},
+{0x04ee, 0x0000},
+{0x04f0, 0x0000},
+{0x04f2, 0x0000},
+{0x04f4, 0x0000},
+{0x04f6, 0x0000},
+{0x04f8, 0x0000},
+{0x04fa, 0x0000},
+{0x04fc, 0x0000},
+{0x04fe, 0x0000},
+{0x0500, 0x7fff},
+{0x0502, 0x7fff},
+{0x0504, 0x7fff},
+{0x0506, 0x7fff},
+{0x0508, 0x7fff},
+{0x050a, 0x7fff},
+{0x050c, 0x7fff},
+{0x050e, 0x7fff},
+{0x0510, 0x7fff},
+{0x0512, 0x7fff},
+{0x0514, 0x7fff},
+{0x0516, 0x7fff},
+{0x0518, 0x7fff},
+{0x051a, 0x7fff},
+{0x051c, 0x7fff},
+{0x051e, 0x7fff},
+{0x0520, 0x7fff},
+{0x0522, 0x7fff},
+{0x0524, 0x7fff},
+{0x0526, 0x7fff},
+{0x0528, 0x7fff},
+{0x052a, 0x7fff},
+{0x052c, 0x7fff},
+{0x052e, 0x7fff},
+{0x0530, 0x7fff},
+{0x0532, 0x7fff},
+{0x0534, 0x7fff},
+{0x0536, 0x7fff},
+{0x0538, 0x7fff},
+{0x053a, 0x7fff},
+{0x053c, 0x7fff},
+{0x053e, 0x7fff},
+{0x0540, 0x7fff},
+{0x0542, 0x7fff},
+{0x0544, 0x7fff},
+{0x0546, 0x7fff},
+{0x0548, 0x7fff},
+{0x054a, 0x7fff},
+{0x054c, 0x7fff},
+{0x054e, 0x7fff},
+{0x0550, 0x7fff},
+{0x0552, 0x7fff},
+{0x0554, 0x7fff},
+{0x0556, 0x7fff},
+{0x0558, 0x7fff},
+{0x055a, 0x7fff},
+{0x055c, 0x7fff},
+{0x055e, 0x7fff},
+{0x0560, 0x7fff},
+{0x0562, 0x7fff},
+{0x0564, 0x7fff},
+{0x0566, 0x7fff},
+{0x0568, 0x7fff},
+{0x056a, 0x7fff},
+{0x056c, 0x7fff},
+{0x056e, 0x7fff},
+{0x0570, 0x7fff},
+{0x0572, 0x7fff},
+{0x0574, 0x7fff},
+{0x0576, 0x7fff},
+{0x0578, 0x7fff},
+{0x057a, 0x7fff},
+{0x057c, 0x7fff},
+{0x057e, 0x7fff},
+{0x0580, 0x7fff},
+{0x0582, 0x7fff},
+{0x0584, 0x7fff},
+{0x0586, 0x7fff},
+{0x0588, 0x7fff},
+{0x058a, 0x7fff},
+{0x058c, 0x7fff},
+{0x058e, 0x7fff},
+{0x0590, 0x7fff},
+{0x0592, 0x7fff},
+{0x0594, 0x7fff},
+{0x0596, 0x7fff},
+{0x0598, 0x7fff},
+{0x059a, 0x7fff},
+{0x059c, 0x7fff},
+{0x059e, 0x7fff},
+{0x05a0, 0x7fff},
+{0x05a2, 0x7fff},
+{0x05a4, 0x7fff},
+{0x05a6, 0x7fff},
+{0x05a8, 0x7fff},
+{0x05aa, 0x7fff},
+{0x05ac, 0x7fff},
+{0x05ae, 0x7fff},
+{0x05b0, 0x7fff},
+{0x05b2, 0x7fff},
+{0x05b4, 0x7fff},
+{0x05b6, 0x7fff},
+{0x05b8, 0x7fff},
+{0x05ba, 0x7fff},
+{0x05bc, 0x7fff},
+{0x05be, 0x7fff},
+{0x05c0, 0x7fff},
+{0x05c2, 0x7fff},
+{0x05c4, 0x7fff},
+{0x05c6, 0x7fff},
+{0x05c8, 0x7fff},
+{0x05ca, 0x7fff},
+{0x05cc, 0x7fff},
+{0x05ce, 0x7fff},
+{0x05d0, 0x7fff},
+{0x05d2, 0x7fff},
+{0x05d4, 0x7fff},
+{0x05d6, 0x7fff},
+{0x05d8, 0x7fff},
+{0x05da, 0x7fff},
+{0x05dc, 0x7fff},
+{0x05de, 0x7fff},
+{0x05e0, 0x7fff},
+{0x05e2, 0x7fff},
+{0x05e4, 0x7fff},
+{0x05e6, 0x7fff},
+{0x05e8, 0x7fff},
+{0x05ea, 0x7fff},
+{0x05ec, 0x7fff},
+{0x05ee, 0x7fff},
+{0x05f0, 0x7fff},
+{0x05f2, 0x7fff},
+{0x05f4, 0x7fff},
+{0x05f6, 0x7fff},
+{0x05f8, 0x7fff},
+{0x05fa, 0x7fff},
+{0x05fc, 0x7fff},
+{0x05fe, 0x7fff},
+{0x0600, 0x0000},
+{0x0602, 0x0000},
+{0x0604, 0x0000},
+{0x0606, 0x0000},
+{0x0608, 0x0000},
+{0x060a, 0x0000},
+{0x060c, 0x0000},
+{0x060e, 0x0000},
+{0x0610, 0x0000},
+{0x0612, 0x0000},
+{0x0614, 0x0000},
+{0x0616, 0x0000},
+{0x0618, 0x0000},
+{0x061a, 0x0000},
+{0x061c, 0x0000},
+{0x061e, 0x0000},
+{0x0620, 0x0000},
+{0x0622, 0x0000},
+{0x0624, 0x0000},
+{0x0626, 0x0000},
+{0x0628, 0x0000},
+{0x062a, 0x0000},
+{0x062c, 0x0000},
+{0x062e, 0x0000},
+{0x0630, 0x0000},
+{0x0632, 0x0000},
+{0x0634, 0x0000},
+{0x0636, 0x0000},
+{0x0638, 0x0000},
+{0x063a, 0x0000},
+{0x063c, 0x0000},
+{0x063e, 0x0000},
+{0x0640, 0x0000},
+{0x0642, 0x0000},
+{0x0644, 0x0000},
+{0x0646, 0x0000},
+{0x0648, 0x0000},
+{0x064a, 0x0000},
+{0x064c, 0x0000},
+{0x064e, 0x0000},
+{0x0650, 0x0000},
+{0x0652, 0x0000},
+{0x0654, 0x0000},
+{0x0656, 0x0000},
+{0x0658, 0x0000},
+{0x065a, 0x0000},
+{0x065c, 0x0000},
+{0x065e, 0x0000},
+{0x0660, 0x0000},
+{0x0662, 0x0000},
+{0x0664, 0x0000},
+{0x0666, 0x0000},
+{0x0668, 0x0000},
+{0x066a, 0x0000},
+{0x066c, 0x0000},
+{0x066e, 0x0000},
+{0x0670, 0x0000},
+{0x0672, 0x0000},
+{0x0674, 0x0000},
+{0x0676, 0x0000},
+{0x0678, 0x0000},
+{0x067a, 0x0000},
+{0x067c, 0x0000},
+{0x067e, 0x0000},
+{0x0680, 0x0000},
+{0x0682, 0x0000},
+{0x0684, 0x0000},
+{0x0686, 0x0000},
+{0x0688, 0x0000},
+{0x068a, 0x0000},
+{0x068c, 0x0000},
+{0x068e, 0x0000},
+{0x0690, 0x0000},
+{0x0692, 0x0000},
+{0x0694, 0x0000},
+{0x0696, 0x0000},
+{0x0698, 0x0000},
+{0x069a, 0x0000},
+{0x069c, 0x0000},
+{0x069e, 0x0000},
+{0x06a0, 0x0000},
+{0x06a2, 0x0000},
+{0x06a4, 0x0000},
+{0x06a6, 0x0000},
+{0x06a8, 0x0000},
+{0x06aa, 0x0000},
+{0x06ac, 0x0000},
+{0x06ae, 0x0000},
+{0x06b0, 0x0000},
+{0x06b2, 0x0000},
+{0x06b4, 0x0000},
+{0x06b6, 0x0000},
+{0x06b8, 0x0000},
+{0x06ba, 0x0000},
+{0x06bc, 0x0000},
+{0x06be, 0x0000},
+{0x06c0, 0x0000},
+{0x06c2, 0x0000},
+{0x06c4, 0x0000},
+{0x06c6, 0x0000},
+{0x06c8, 0x0000},
+{0x06ca, 0x0000},
+{0x06cc, 0x0000},
+{0x06ce, 0x0000},
+{0x06d0, 0x0000},
+{0x06d2, 0x0000},
+{0x06d4, 0x0000},
+{0x06d6, 0x0000},
+{0x06d8, 0x0000},
+{0x06da, 0x0000},
+{0x06dc, 0x0000},
+{0x06de, 0x0000},
+{0x06e0, 0x0000},
+{0x06e2, 0x0000},
+{0x06e4, 0x0000},
+{0x06e6, 0x0000},
+{0x06e8, 0x0000},
+{0x06ea, 0x0000},
+{0x06ec, 0x0000},
+{0x06ee, 0x0000},
+{0x06f0, 0x0000},
+{0x06f2, 0x0000},
+{0x06f4, 0x0000},
+{0x06f6, 0x0000},
+{0x06f8, 0x0000},
+{0x06fa, 0x0000},
+{0x06fc, 0x0000},
+{0x06fe, 0x0000},
+{0x0700, 0x0000},
+{0x0702, 0x0000},
+{0x0704, 0x0000},
+{0x0706, 0x0000},
+{0x0708, 0x0000},
+{0x070a, 0x0000},
+{0x070c, 0x0000},
+{0x070e, 0x0000},
+{0x0710, 0x0000},
+{0x0712, 0x0000},
+{0x0714, 0x0000},
+{0x0716, 0x0000},
+{0x0718, 0x0000},
+{0x071a, 0x0000},
+{0x071c, 0x0000},
+{0x071e, 0x0000},
+{0x0720, 0x0000},
+{0x0722, 0x0000},
+{0x0724, 0x0000},
+{0x0726, 0x0000},
+{0x0728, 0x0000},
+{0x072a, 0x0000},
+{0x072c, 0x0000},
+{0x072e, 0x0000},
+{0x0730, 0x0000},
+{0x0732, 0x0000},
+{0x0734, 0x0000},
+{0x0736, 0x0000},
+{0x0738, 0x0000},
+{0x073a, 0x0000},
+{0x073c, 0x0000},
+{0x073e, 0x0000},
+{0x0740, 0x0000},
+{0x0742, 0x0000},
+{0x0744, 0x0000},
+{0x0746, 0x0000},
+{0x0748, 0x0000},
+{0x074a, 0x0000},
+{0x074c, 0x0000},
+{0x074e, 0x0000},
+{0x0750, 0x0000},
+{0x0752, 0x0000},
+{0x0754, 0x0000},
+{0x0756, 0x0000},
+{0x0758, 0x0000},
+{0x075a, 0x0000},
+{0x075c, 0x0000},
+{0x075e, 0x0000},
+{0x0760, 0x0000},
+{0x0762, 0x0000},
+{0x0764, 0x0000},
+{0x0766, 0x0000},
+{0x0768, 0x0000},
+{0x076a, 0x0000},
+{0x076c, 0x0000},
+{0x076e, 0x0000},
+{0x0770, 0x0000},
+{0x0772, 0x0000},
+{0x0774, 0x0000},
+{0x0776, 0x0000},
+{0x0778, 0x0000},
+{0x077a, 0x0000},
+{0x077c, 0x0000},
+{0x077e, 0x0000},
+{0x0780, 0x0000},
+{0x0782, 0x0000},
+{0x0784, 0x0000},
+{0x0786, 0x0000},
+{0x0788, 0x0000},
+{0x078a, 0x0000},
+{0x078c, 0x0000},
+{0x078e, 0x0000},
+{0x0790, 0x0000},
+{0x0792, 0x0000},
+{0x0794, 0x0000},
+{0x0796, 0x0000},
+{0x0798, 0x0000},
+{0x079a, 0x0000},
+{0x079c, 0x0000},
+{0x079e, 0x0000},
+{0x07a0, 0x0000},
+{0x07a2, 0x0000},
+{0x07a4, 0x0000},
+{0x07a6, 0x0000},
+{0x07a8, 0x0000},
+{0x07aa, 0x0000},
+{0x07ac, 0x0000},
+{0x07ae, 0x0000},
+{0x07b0, 0x0000},
+{0x07b2, 0x0000},
+{0x07b4, 0x0000},
+{0x07b6, 0x0000},
+{0x07b8, 0x0000},
+{0x07ba, 0x0000},
+{0x07bc, 0x0000},
+{0x07be, 0x0000},
+{0x07c0, 0x0000},
+{0x07c2, 0x0000},
+{0x07c4, 0x0000},
+{0x07c6, 0x0000},
+{0x07c8, 0x0000},
+{0x07ca, 0x0000},
+{0x07cc, 0x0000},
+{0x07ce, 0x0000},
+{0x07d0, 0x0000},
+{0x07d2, 0x0000},
+{0x07d4, 0x0000},
+{0x07d6, 0x0000},
+{0x07d8, 0x0000},
+{0x07da, 0x0000},
+{0x07dc, 0x0000},
+{0x07de, 0x0000},
+{0x07e0, 0x0000},
+{0x07e2, 0x0000},
+{0x07e4, 0x0000},
+{0x07e6, 0x0000},
+{0x07e8, 0x0000},
+{0x07ea, 0x0000},
+{0x07ec, 0x0000},
+{0x07ee, 0x0000},
+{0x07f0, 0x0000},
+{0x07f2, 0x0000},
+{0x07f4, 0x0000},
+{0x07f6, 0x0000},
+{0x07f8, 0x0000},
+{0x07fa, 0x0000},
+{0x07fc, 0x0000},
+{0x07fe, 0x0000},
+{0x0800, 0x0000},
+{0x0802, 0x0000},
+{0x0804, 0x0000},
+{0x0806, 0x0000},
+{0x0808, 0x0000},
+{0x080a, 0x0000},
+{0x080c, 0x0000},
+{0x080e, 0x0000},
+{0x0810, 0x0000},
+{0x0812, 0x0000},
+{0x0814, 0x0000},
+{0x0816, 0x0000},
+{0x0818, 0x0000},
+{0x081a, 0x0000},
+{0x081c, 0x0000},
+{0x081e, 0x0000},
+{0x0820, 0x0000},
+{0x0822, 0x0000},
+{0x0824, 0x0000},
+{0x0826, 0x0000},
+{0x0828, 0x0000},
+{0x082a, 0x0000},
+{0x082c, 0x0000},
+{0x082e, 0x0000},
+{0x0830, 0x0000},
+{0x0832, 0x0000},
+{0x0834, 0x0000},
+{0x0836, 0x0000},
+{0x0838, 0x0000},
+{0x083a, 0x0000},
+{0x083c, 0x0000},
+{0x083e, 0x0000},
+{0x0840, 0x0000},
+{0x0842, 0x0000},
+{0x0844, 0x0000},
+{0x0846, 0x0000},
+{0x0848, 0x0000},
+{0x084a, 0x0000},
+{0x084c, 0x0000},
+{0x084e, 0x0000},
+{0x0850, 0x0000},
+{0x0852, 0x0000},
+{0x0854, 0x0000},
+{0x0856, 0x0000},
+{0x0858, 0x0000},
+{0x085a, 0x0000},
+{0x085c, 0x0000},
+{0x085e, 0x0000},
+{0x0860, 0x0000},
+{0x0862, 0x0000},
+{0x0864, 0x0000},
+{0x0866, 0x0000},
+{0x0868, 0x0000},
+{0x086a, 0x0000},
+{0x086c, 0x0000},
+{0x086e, 0x0000},
+{0x0870, 0x0000},
+{0x0872, 0x0000},
+{0x0874, 0x0000},
+{0x0876, 0x0000},
+{0x0878, 0x0000},
+{0x087a, 0x0000},
+{0x087c, 0x0000},
+{0x087e, 0x0000},
+{0x0880, 0x0000},
+{0x0882, 0x0000},
+{0x0884, 0x0000},
+{0x0886, 0x0000},
+{0x0888, 0x0000},
+{0x088a, 0x0000},
+{0x088c, 0x0000},
+{0x088e, 0x0000},
+{0x0890, 0x0000},
+{0x0892, 0x0000},
+{0x0894, 0x0000},
+{0x0896, 0x0000},
+{0x0898, 0x0000},
+{0x089a, 0x0000},
+{0x089c, 0x0000},
+{0x089e, 0x0000},
+{0x08a0, 0x0000},
+{0x08a2, 0x0000},
+{0x08a4, 0x0000},
+{0x08a6, 0x0000},
+{0x08a8, 0x0000},
+{0x08aa, 0x0000},
+{0x08ac, 0x0000},
+{0x08ae, 0x0000},
+{0x08b0, 0x0000},
+{0x08b2, 0x0000},
+{0x08b4, 0x0000},
+{0x08b6, 0x0000},
+{0x08b8, 0x0000},
+{0x08ba, 0x0000},
+{0x08bc, 0x0000},
+{0x08be, 0x0000},
+{0x08c0, 0x0000},
+{0x08c2, 0x0000},
+{0x08c4, 0x0000},
+{0x08c6, 0x0000},
+{0x08c8, 0x0000},
+{0x08ca, 0x0000},
+{0x08cc, 0x0000},
+{0x08ce, 0x0000},
+{0x08d0, 0x0000},
+{0x08d2, 0x0000},
+{0x08d4, 0x0000},
+{0x08d6, 0x0000},
+{0x08d8, 0x0000},
+{0x08da, 0x0000},
+{0x08dc, 0x0000},
+{0x08de, 0x0000},
+{0x08e0, 0x0000},
+{0x08e2, 0x0000},
+{0x08e4, 0x0000},
+{0x08e6, 0x0000},
+{0x08e8, 0x0000},
+{0x08ea, 0x0000},
+{0x08ec, 0x0000},
+{0x08ee, 0x0000},
+{0x08f0, 0x0000},
+{0x08f2, 0x0000},
+{0x08f4, 0x0000},
+{0x08f6, 0x0000},
+{0x08f8, 0x0000},
+{0x08fa, 0x0000},
+{0x08fc, 0x0000},
+{0x08fe, 0x0000},
+{0x0900, 0x0000},
+{0x0902, 0x0000},
+{0x0904, 0x0000},
+{0x0906, 0x0000},
+{0x0908, 0x0000},
+{0x090a, 0x0000},
+{0x090c, 0x0000},
+{0x090e, 0x0000},
+{0x0910, 0x0000},
+{0x0912, 0x0000},
+{0x0914, 0x0000},
+{0x0916, 0x0000},
+{0x0918, 0x0000},
+{0x091a, 0x0000},
+{0x091c, 0x0000},
+{0x091e, 0x0000},
+{0x0920, 0x0000},
+{0x0922, 0x0000},
+{0x0924, 0x0000},
+{0x0926, 0x0000},
+{0x0928, 0x0000},
+{0x092a, 0x0000},
+{0x092c, 0x0000},
+{0x092e, 0x0000},
+{0x0930, 0x0000},
+{0x0932, 0x0000},
+{0x0934, 0x0000},
+{0x0936, 0x0000},
+{0x0938, 0x0000},
+{0x093a, 0x0000},
+{0x093c, 0x0000},
+{0x093e, 0x0000},
+{0x0940, 0x0000},
+{0x0942, 0x0000},
+{0x0944, 0x0000},
+{0x0946, 0x0000},
+{0x0948, 0x0000},
+{0x094a, 0x0000},
+{0x094c, 0x0000},
+{0x094e, 0x0000},
+{0x0950, 0x0000},
+{0x0952, 0x0000},
+{0x0954, 0x0000},
+{0x0956, 0x0000},
+{0x0958, 0x0000},
+{0x095a, 0x0000},
+{0x095c, 0x0000},
+{0x095e, 0x0000},
+{0x0960, 0x0000},
+{0x0962, 0x0000},
+{0x0964, 0x0000},
+{0x0966, 0x0000},
+{0x0968, 0x0000},
+{0x096a, 0x0000},
+{0x096c, 0x0000},
+{0x096e, 0x0000},
+{0x0970, 0x0000},
+{0x0972, 0x0000},
+{0x0974, 0x0000},
+{0x0976, 0x0000},
+{0x0978, 0x0000},
+{0x097a, 0x0000},
+{0x097c, 0x0000},
+{0x097e, 0x0000},
+{0x0980, 0x0000},
+{0x0982, 0x0000},
+{0x0984, 0x0000},
+{0x0986, 0x0000},
+{0x0988, 0x0000},
+{0x098a, 0x0000},
+{0x098c, 0x0000},
+{0x098e, 0x0000},
+{0x0990, 0x0000},
+{0x0992, 0x0000},
+{0x0994, 0x0000},
+{0x0996, 0x0000},
+{0x0998, 0x0000},
+{0x099a, 0x0000},
+{0x099c, 0x0000},
+{0x099e, 0x0000},
+{0x09a0, 0x0000},
+{0x09a2, 0x0000},
+{0x09a4, 0x0000},
+{0x09a6, 0x0000},
+{0x09a8, 0x0000},
+{0x09aa, 0x0000},
+{0x09ac, 0x0000},
+{0x09ae, 0x0000},
+{0x09b0, 0x0000},
+{0x09b2, 0x0000},
+{0x09b4, 0x0000},
+{0x09b6, 0x0000},
+{0x09b8, 0x0000},
+{0x09ba, 0x0000},
+{0x09bc, 0x0000},
+{0x09be, 0x0000},
+{0x09c0, 0x0000},
+{0x09c2, 0x0000},
+{0x09c4, 0x0000},
+{0x09c6, 0x0000},
+{0x09c8, 0x0000},
+{0x09ca, 0x0000},
+{0x09cc, 0x0000},
+{0x09ce, 0x0000},
+{0x09d0, 0x0000},
+{0x09d2, 0x0000},
+{0x09d4, 0x0000},
+{0x09d6, 0x0000},
+{0x09d8, 0x0000},
+{0x09da, 0x0000},
+{0x09dc, 0x0000},
+{0x09de, 0x0000},
+{0x09e0, 0x0000},
+{0x09e2, 0x0000},
+{0x09e4, 0x0000},
+{0x09e6, 0x0000},
+{0x09e8, 0x0000},
+{0x09ea, 0x0000},
+{0x09ec, 0x0000},
+{0x09ee, 0x0000},
+{0x09f0, 0x0000},
+{0x09f2, 0x0000},
+{0x09f4, 0x0000},
+{0x09f6, 0x0000},
+{0x09f8, 0x0000},
+{0x09fa, 0x0000},
+{0x09fc, 0x4000},
+{0x09fe, 0x0000}
+};
+
+#endif /**__HEADSET_CONFIG_H_**/
\ No newline at end of file
diff --git a/legacy_hal/inc/incall_config.h b/legacy_hal/inc/incall_config.h
new file mode 100755
index 0000000..415cf80
--- /dev/null
+++ b/legacy_hal/inc/incall_config.h
@@ -0,0 +1,1029 @@
+#ifndef __INCALL_CONDIF_H_
+#define __INCALL_CONDIF_H_
+const unsigned short incall_config_array[][2] = {
+{0x0200, 0x0000},
+{0x0202, 0x0c85},
+{0x0204, 0x0008},
+{0x0206, 0x0000},
+{0x0208, 0x0000},
+{0x020a, 0x0000},
+{0x020c, 0x0000},
+{0x020e, 0x0000},
+{0x0210, 0x000d},
+{0x0212, 0x0000},
+{0x0214, 0x000e},
+{0x0216, 0x0000},
+{0x0218, 0x0000},
+{0x021a, 0x0000},
+{0x021c, 0x0000},
+{0x021e, 0x000e},
+{0x0220, 0x0000},
+{0x0222, 0x0000},
+{0x0224, 0x0001},
+{0x0226, 0x0a05},
+{0x0228, 0x0000},
+{0x022a, 0x0000},
+{0x022c, 0x0000},
+{0x022e, 0x0000},
+{0x0230, 0x0000},
+{0x0232, 0x0000},
+{0x0234, 0x0000},
+{0x0236, 0x0000},
+{0x0238, 0x0000},
+{0x023a, 0x0000},
+{0x023c, 0x0000},
+{0x023e, 0x0000},
+{0x0240, 0x0000},
+{0x0242, 0x0000},
+{0x0244, 0x0000},
+{0x0246, 0x0000},
+{0x0248, 0x0000},
+{0x024a, 0x0000},
+{0x024c, 0x0004},
+{0x024e, 0x0000},
+{0x0250, 0x0000},
+{0x0252, 0x0000},
+{0x0254, 0x0000},
+{0x0256, 0x0000},
+{0x0258, 0x0000},
+{0x025a, 0x0000},
+{0x025c, 0x0000},
+{0x025e, 0x0000},
+{0x0260, 0x0000},
+{0x0262, 0x8ff1},
+{0x0264, 0x40c0},
+{0x0266, 0x0000},
+{0x0268, 0x0100},
+{0x026a, 0x0002},
+{0x026c, 0x0004},
+{0x026e, 0x0006},
+{0x0270, 0x0000},
+{0x0272, 0x0000},
+{0x0274, 0x0000},
+{0x0276, 0x0000},
+{0x0278, 0xc004},
+{0x027a, 0x03f6},
+{0x027c, 0xc0c0},
+{0x027e, 0x0000},
+{0x0280, 0x0100},
+{0x0282, 0x0101},
+{0x0284, 0x0004},
+{0x0286, 0x0006},
+{0x0288, 0x0000},
+{0x028a, 0x0000},
+{0x028c, 0x0000},
+{0x028e, 0x0000},
+{0x0290, 0x0000},
+{0x0292, 0x0000},
+{0x0294, 0x0000},
+{0x0296, 0x0000},
+{0x0298, 0x0000},
+{0x029a, 0x0000},
+{0x029c, 0x0000},
+{0x029e, 0x0000},
+{0x02a0, 0xc00a},
+{0x02a2, 0x0000},
+{0x02a4, 0x0004},
+{0x02a6, 0x0000},
+{0x02a8, 0x0000},
+{0x02aa, 0x0000},
+{0x02ac, 0x0000},
+{0x02ae, 0x0000},
+{0x02b0, 0x0001},
+{0x02b2, 0x0000},
+{0x02b4, 0x0000},
+{0x02b6, 0x0000},
+{0x02b8, 0x815e},
+{0x02ba, 0xfff1},
+{0x02bc, 0x81e0},
+{0x02be, 0xfff1},
+{0x02c0, 0x03ec},
+{0x02c2, 0xfff6},
+{0x02c4, 0x0000},
+{0x02c6, 0x0000},
+{0x02c8, 0x0000},
+{0x02ca, 0x0000},
+{0x02cc, 0x0000},
+{0x02ce, 0x0000},
+{0x02d0, 0x0000},
+{0x02d2, 0x0000},
+{0x02d4, 0x0000},
+{0x02d6, 0x0000},
+{0x02d8, 0x0000},
+{0x02da, 0x0000},
+{0x02dc, 0x0000},
+{0x02de, 0x0000},
+{0x02e0, 0x0000},
+{0x02e2, 0x0000},
+{0x02e4, 0x0000},
+{0x02e6, 0x0000},
+{0x02e8, 0x0000},
+{0x02ea, 0x0000},
+{0x02ec, 0x0000},
+{0x02ee, 0x0000},
+{0x02f0, 0x0000},
+{0x02f2, 0x0000},
+{0x02f4, 0x0000},
+{0x02f6, 0x0000},
+{0x02f8, 0x0000},
+{0x02fa, 0x0000},
+{0x02fc, 0x0000},
+{0x02fe, 0x0000},
+{0x0300, 0x4008},
+{0x0302, 0x1000},
+{0x0304, 0x0000},
+{0x0306, 0x0000},
+{0x0308, 0x0000},
+{0x030a, 0x0050},
+{0x030c, 0x080c},
+{0x030e, 0xb001},
+{0x0310, 0x9393},
+{0x0312, 0x7f00},
+{0x0314, 0x0000},
+{0x0316, 0x7fff},
+{0x0318, 0x0000},
+{0x031a, 0x0000},
+{0x031c, 0x7fff},
+{0x031e, 0x7fff},
+{0x0320, 0x7fff},
+{0x0322, 0x7fff},
+{0x0324, 0x0200},
+{0x0326, 0x001f},
+{0x0328, 0x3040},
+{0x032a, 0x010c},
+{0x032c, 0x0006},
+{0x032e, 0x0a1f},
+{0x0330, 0x08a1},
+{0x0332, 0x003f},
+{0x0334, 0x0020},
+{0x0336, 0x0000},
+{0x0338, 0x4801},
+{0x033a, 0x0096},
+{0x033c, 0x0002},
+{0x033e, 0x0004},
+{0x0340, 0x0000},
+{0x0342, 0x0800},
+{0x0344, 0x0000},
+{0x0346, 0x0005},
+{0x0348, 0x0000},
+{0x034a, 0x0000},
+{0x034c, 0x0000},
+{0x034e, 0x0000},
+{0x0350, 0x0000},
+{0x0352, 0x0000},
+{0x0354, 0x1122},
+{0x0356, 0x3344},
+{0x0358, 0x0806},
+{0x035a, 0x0228},
+{0x035c, 0xa000},
+{0x035e, 0x0000},
+{0x0360, 0x0013},
+{0x0362, 0x0e80},
+{0x0364, 0x0a00},
+{0x0366, 0x4000},
+{0x0368, 0x0026},
+{0x036a, 0x1a00},
+{0x036c, 0x0800},
+{0x036e, 0x0400},
+{0x0370, 0x0fa0},
+{0x0372, 0x0640},
+{0x0374, 0x0b0b},
+{0x0376, 0x0000},
+{0x0378, 0x0000},
+{0x037a, 0x0010},
+{0x037c, 0x01aa},
+{0x037e, 0x2000},
+{0x0380, 0x0000},
+{0x0382, 0x0200},
+{0x0384, 0x7800},
+{0x0386, 0x0280},
+{0x0388, 0x001e},
+{0x038a, 0x003c},
+{0x038c, 0x0f01},
+{0x038e, 0x08a1},
+{0x0390, 0x0040},
+{0x0392, 0x0000},
+{0x0394, 0x0000},
+{0x0396, 0x0000},
+{0x0398, 0x0000},
+{0x039a, 0x0000},
+{0x039c, 0x0000},
+{0x039e, 0x0000},
+{0x03a0, 0x0000},
+{0x03a2, 0x0020},
+{0x03a4, 0x0002},
+{0x03a6, 0x0064},
+{0x03a8, 0x000f},
+{0x03aa, 0x3333},
+{0x03ac, 0x7fbe},
+{0x03ae, 0x3333},
+{0x03b0, 0x7eb8},
+{0x03b2, 0x7fff},
+{0x03b4, 0x0001},
+{0x03b6, 0x7fdf},
+{0x03b8, 0x0002},
+{0x03ba, 0x7333},
+{0x03bc, 0x7333},
+{0x03be, 0x003c},
+{0x03c0, 0x0000},
+{0x03c2, 0x6666},
+{0x03c4, 0x0001},
+{0x03c6, 0x6666},
+{0x03c8, 0x5a9d},
+{0x03ca, 0x0100},
+{0x03cc, 0x0002},
+{0x03ce, 0x0000},
+{0x03d0, 0x0000},
+{0x03d2, 0x7213},
+{0x03d4, 0x0002},
+{0x03d6, 0x4000},
+{0x03d8, 0x0ccc},
+{0x03da, 0x0000},
+{0x03dc, 0x0000},
+{0x03de, 0x0000},
+{0x03e0, 0x0000},
+{0x03e2, 0x0000},
+{0x03e4, 0x0000},
+{0x03e6, 0x0002},
+{0x03e8, 0x01f0},
+{0x03ea, 0x0078},
+{0x03ec, 0x0032},
+{0x03ee, 0x0004},
+{0x03f0, 0x01f0},
+{0x03f2, 0x0078},
+{0x03f4, 0x0032},
+{0x03f6, 0x087a},
+{0x03f8, 0x0100},
+{0x03fa, 0x0190},
+{0x03fc, 0x0004},
+{0x03fe, 0x0017},
+{0x0400, 0x0400},
+{0x0402, 0x0320},
+{0x0404, 0x0033},
+{0x0406, 0x0000},
+{0x0408, 0x0b27},
+{0x040a, 0x1358},
+{0x040c, 0x0c52},
+{0x040e, 0x1560},
+{0x0410, 0x0da2},
+{0x0412, 0x17a2},
+{0x0414, 0x0f0e},
+{0x0416, 0x1a21},
+{0x0418, 0x123d},
+{0x041a, 0x170a},
+{0x041c, 0x0000},
+{0x041e, 0x0000},
+{0x0420, 0x0000},
+{0x0422, 0x0000},
+{0x0424, 0x0000},
+{0x0426, 0x0000},
+{0x0428, 0x0190},
+{0x042a, 0x0190},
+{0x042c, 0x0000},
+{0x042e, 0x0000},
+{0x0430, 0x0000},
+{0x0432, 0x0000},
+{0x0434, 0x0000},
+{0x0436, 0x0000},
+{0x0438, 0x0000},
+{0x043a, 0x7fff},
+{0x043c, 0x0001},
+{0x043e, 0x000a},
+{0x0440, 0x0001},
+{0x0442, 0x0000},
+{0x0444, 0x0000},
+{0x0446, 0x0000},
+{0x0448, 0x0000},
+{0x044a, 0x0000},
+{0x044c, 0x0000},
+{0x044e, 0x0000},
+{0x0450, 0x0000},
+{0x0452, 0x0000},
+{0x0454, 0x0000},
+{0x0456, 0x0000},
+{0x0458, 0x0000},
+{0x045a, 0x0000},
+{0x045c, 0x0000},
+{0x045e, 0x3000},
+{0x0460, 0x3fff},
+{0x0462, 0x020c},
+{0x0464, 0x0000},
+{0x0466, 0x0000},
+{0x0468, 0x0000},
+{0x046a, 0x0000},
+{0x046c, 0x0000},
+{0x046e, 0x0000},
+{0x0470, 0x0000},
+{0x0472, 0x0000},
+{0x0474, 0x0000},
+{0x0476, 0x0000},
+{0x0478, 0x0000},
+{0x047a, 0x0000},
+{0x047c, 0x0000},
+{0x047e, 0x0000},
+{0x0480, 0x0000},
+{0x0482, 0x0000},
+{0x0484, 0x0000},
+{0x0486, 0x0000},
+{0x0488, 0x0064},
+{0x048a, 0x000f},
+{0x048c, 0x0000},
+{0x048e, 0x0036},
+{0x0490, 0x0000},
+{0x0492, 0x03e8},
+{0x0494, 0x0064},
+{0x0496, 0x1999},
+{0x0498, 0x0ccc},
+{0x049a, 0x0005},
+{0x049c, 0x0019},
+{0x049e, 0x4026},
+{0x04a0, 0x5a67},
+{0x04a2, 0x4026},
+{0x04a4, 0x7fb2},
+{0x04a6, 0x0104},
+{0x04a8, 0x0ccc},
+{0x04aa, 0x0ccc},
+{0x04ac, 0x78d6},
+{0x04ae, 0x0d8f},
+{0x04b0, 0x0004},
+{0x04b2, 0x0000},
+{0x04b4, 0x0000},
+{0x04b6, 0x0000},
+{0x04b8, 0x0000},
+{0x04ba, 0x0000},
+{0x04bc, 0x0000},
+{0x04be, 0x0000},
+{0x04c0, 0x0000},
+{0x04c2, 0x0000},
+{0x04c4, 0x0000},
+{0x04c6, 0x0000},
+{0x04c8, 0x0000},
+{0x04ca, 0x0000},
+{0x04cc, 0x0000},
+{0x04ce, 0x0000},
+{0x04d0, 0x0000},
+{0x04d2, 0x0000},
+{0x04d4, 0x0000},
+{0x04d6, 0x0000},
+{0x04d8, 0x0000},
+{0x04da, 0x0000},
+{0x04dc, 0x0000},
+{0x04de, 0x0000},
+{0x04e0, 0x0000},
+{0x04e2, 0x0000},
+{0x04e4, 0x0000},
+{0x04e6, 0x0000},
+{0x04e8, 0x0000},
+{0x04ea, 0x0000},
+{0x04ec, 0x0000},
+{0x04ee, 0x0000},
+{0x04f0, 0x0000},
+{0x04f2, 0x0000},
+{0x04f4, 0x0000},
+{0x04f6, 0x0000},
+{0x04f8, 0x0000},
+{0x04fa, 0x0000},
+{0x04fc, 0x0000},
+{0x04fe, 0x0000},
+{0x0500, 0x7fff},
+{0x0502, 0x7fff},
+{0x0504, 0x7fff},
+{0x0506, 0x7fff},
+{0x0508, 0x7fff},
+{0x050a, 0x7fff},
+{0x050c, 0x7fff},
+{0x050e, 0x7fff},
+{0x0510, 0x7fff},
+{0x0512, 0x7fff},
+{0x0514, 0x7fff},
+{0x0516, 0x7fff},
+{0x0518, 0x7fff},
+{0x051a, 0x7fff},
+{0x051c, 0x7fff},
+{0x051e, 0x7fff},
+{0x0520, 0x7fff},
+{0x0522, 0x7fff},
+{0x0524, 0x7fff},
+{0x0526, 0x7fff},
+{0x0528, 0x7fff},
+{0x052a, 0x7fff},
+{0x052c, 0x7fff},
+{0x052e, 0x7fff},
+{0x0530, 0x7fff},
+{0x0532, 0x7fff},
+{0x0534, 0x7fff},
+{0x0536, 0x7fff},
+{0x0538, 0x7fff},
+{0x053a, 0x7fff},
+{0x053c, 0x7fff},
+{0x053e, 0x7fff},
+{0x0540, 0x7fff},
+{0x0542, 0x7fff},
+{0x0544, 0x7fff},
+{0x0546, 0x7fff},
+{0x0548, 0x7fff},
+{0x054a, 0x7fff},
+{0x054c, 0x7fff},
+{0x054e, 0x7fff},
+{0x0550, 0x7fff},
+{0x0552, 0x7fff},
+{0x0554, 0x7fff},
+{0x0556, 0x7fff},
+{0x0558, 0x7fff},
+{0x055a, 0x7fff},
+{0x055c, 0x7fff},
+{0x055e, 0x7fff},
+{0x0560, 0x7fff},
+{0x0562, 0x7fff},
+{0x0564, 0x7fff},
+{0x0566, 0x7fff},
+{0x0568, 0x7fff},
+{0x056a, 0x7fff},
+{0x056c, 0x7fff},
+{0x056e, 0x7fff},
+{0x0570, 0x7fff},
+{0x0572, 0x7fff},
+{0x0574, 0x7fff},
+{0x0576, 0x7fff},
+{0x0578, 0x7fff},
+{0x057a, 0x7fff},
+{0x057c, 0x7fff},
+{0x057e, 0x7fff},
+{0x0580, 0x7fff},
+{0x0582, 0x7fff},
+{0x0584, 0x7fff},
+{0x0586, 0x7fff},
+{0x0588, 0x7fff},
+{0x058a, 0x7fff},
+{0x058c, 0x7fff},
+{0x058e, 0x7fff},
+{0x0590, 0x7fff},
+{0x0592, 0x7fff},
+{0x0594, 0x7fff},
+{0x0596, 0x7fff},
+{0x0598, 0x7fff},
+{0x059a, 0x7fff},
+{0x059c, 0x7fff},
+{0x059e, 0x7fff},
+{0x05a0, 0x7fff},
+{0x05a2, 0x7fff},
+{0x05a4, 0x7fff},
+{0x05a6, 0x7fff},
+{0x05a8, 0x7fff},
+{0x05aa, 0x7fff},
+{0x05ac, 0x7fff},
+{0x05ae, 0x7fff},
+{0x05b0, 0x7fff},
+{0x05b2, 0x7fff},
+{0x05b4, 0x7fff},
+{0x05b6, 0x7fff},
+{0x05b8, 0x7fff},
+{0x05ba, 0x7fff},
+{0x05bc, 0x7fff},
+{0x05be, 0x7fff},
+{0x05c0, 0x7fff},
+{0x05c2, 0x7fff},
+{0x05c4, 0x7fff},
+{0x05c6, 0x7fff},
+{0x05c8, 0x7fff},
+{0x05ca, 0x7fff},
+{0x05cc, 0x7fff},
+{0x05ce, 0x7fff},
+{0x05d0, 0x7fff},
+{0x05d2, 0x7fff},
+{0x05d4, 0x7fff},
+{0x05d6, 0x7fff},
+{0x05d8, 0x7fff},
+{0x05da, 0x7fff},
+{0x05dc, 0x7fff},
+{0x05de, 0x7fff},
+{0x05e0, 0x7fff},
+{0x05e2, 0x7fff},
+{0x05e4, 0x7fff},
+{0x05e6, 0x7fff},
+{0x05e8, 0x7fff},
+{0x05ea, 0x7fff},
+{0x05ec, 0x7fff},
+{0x05ee, 0x7fff},
+{0x05f0, 0x7fff},
+{0x05f2, 0x7fff},
+{0x05f4, 0x7fff},
+{0x05f6, 0x7fff},
+{0x05f8, 0x7fff},
+{0x05fa, 0x7fff},
+{0x05fc, 0x7fff},
+{0x05fe, 0x7fff},
+{0x0600, 0x0000},
+{0x0602, 0x0000},
+{0x0604, 0x0000},
+{0x0606, 0x0000},
+{0x0608, 0x0000},
+{0x060a, 0x0000},
+{0x060c, 0x0000},
+{0x060e, 0x0000},
+{0x0610, 0x0000},
+{0x0612, 0x0000},
+{0x0614, 0x0000},
+{0x0616, 0x0000},
+{0x0618, 0x0000},
+{0x061a, 0x0000},
+{0x061c, 0x0000},
+{0x061e, 0x0000},
+{0x0620, 0x0000},
+{0x0622, 0x0000},
+{0x0624, 0x0000},
+{0x0626, 0x0000},
+{0x0628, 0x0000},
+{0x062a, 0x0000},
+{0x062c, 0x0000},
+{0x062e, 0x0000},
+{0x0630, 0x0000},
+{0x0632, 0x0000},
+{0x0634, 0x0000},
+{0x0636, 0x0000},
+{0x0638, 0x0000},
+{0x063a, 0x0000},
+{0x063c, 0x0000},
+{0x063e, 0x0000},
+{0x0640, 0x0000},
+{0x0642, 0x0000},
+{0x0644, 0x0000},
+{0x0646, 0x0000},
+{0x0648, 0x0000},
+{0x064a, 0x0000},
+{0x064c, 0x0000},
+{0x064e, 0x0000},
+{0x0650, 0x0000},
+{0x0652, 0x0000},
+{0x0654, 0x0000},
+{0x0656, 0x0000},
+{0x0658, 0x0000},
+{0x065a, 0x0000},
+{0x065c, 0x0000},
+{0x065e, 0x0000},
+{0x0660, 0x0000},
+{0x0662, 0x0000},
+{0x0664, 0x0000},
+{0x0666, 0x0000},
+{0x0668, 0x0000},
+{0x066a, 0x0000},
+{0x066c, 0x0000},
+{0x066e, 0x0000},
+{0x0670, 0x0000},
+{0x0672, 0x0000},
+{0x0674, 0x0000},
+{0x0676, 0x0000},
+{0x0678, 0x0000},
+{0x067a, 0x0000},
+{0x067c, 0x0000},
+{0x067e, 0x0000},
+{0x0680, 0x0000},
+{0x0682, 0x0000},
+{0x0684, 0x0000},
+{0x0686, 0x0000},
+{0x0688, 0x0000},
+{0x068a, 0x0000},
+{0x068c, 0x0000},
+{0x068e, 0x0000},
+{0x0690, 0x0000},
+{0x0692, 0x0000},
+{0x0694, 0x0000},
+{0x0696, 0x0000},
+{0x0698, 0x0000},
+{0x069a, 0x0000},
+{0x069c, 0x0000},
+{0x069e, 0x0000},
+{0x06a0, 0x0000},
+{0x06a2, 0x0000},
+{0x06a4, 0x0000},
+{0x06a6, 0x0000},
+{0x06a8, 0x0000},
+{0x06aa, 0x0000},
+{0x06ac, 0x0000},
+{0x06ae, 0x0000},
+{0x06b0, 0x0000},
+{0x06b2, 0x0000},
+{0x06b4, 0x0000},
+{0x06b6, 0x0000},
+{0x06b8, 0x0000},
+{0x06ba, 0x0000},
+{0x06bc, 0x0000},
+{0x06be, 0x0000},
+{0x06c0, 0x0000},
+{0x06c2, 0x0000},
+{0x06c4, 0x0000},
+{0x06c6, 0x0000},
+{0x06c8, 0x0000},
+{0x06ca, 0x0000},
+{0x06cc, 0x0000},
+{0x06ce, 0x0000},
+{0x06d0, 0x0000},
+{0x06d2, 0x0000},
+{0x06d4, 0x0000},
+{0x06d6, 0x0000},
+{0x06d8, 0x0000},
+{0x06da, 0x0000},
+{0x06dc, 0x0000},
+{0x06de, 0x0000},
+{0x06e0, 0x0000},
+{0x06e2, 0x0000},
+{0x06e4, 0x0000},
+{0x06e6, 0x0000},
+{0x06e8, 0x0000},
+{0x06ea, 0x0000},
+{0x06ec, 0x0000},
+{0x06ee, 0x0000},
+{0x06f0, 0x0000},
+{0x06f2, 0x0000},
+{0x06f4, 0x0000},
+{0x06f6, 0x0000},
+{0x06f8, 0x0000},
+{0x06fa, 0x0000},
+{0x06fc, 0x0000},
+{0x06fe, 0x0000},
+{0x0700, 0x0000},
+{0x0702, 0x0000},
+{0x0704, 0x0000},
+{0x0706, 0x0000},
+{0x0708, 0x0000},
+{0x070a, 0x0000},
+{0x070c, 0x0000},
+{0x070e, 0x0000},
+{0x0710, 0x0000},
+{0x0712, 0x0000},
+{0x0714, 0x0000},
+{0x0716, 0x0000},
+{0x0718, 0x0000},
+{0x071a, 0x0000},
+{0x071c, 0x0000},
+{0x071e, 0x0000},
+{0x0720, 0x0000},
+{0x0722, 0x0000},
+{0x0724, 0x0000},
+{0x0726, 0x0000},
+{0x0728, 0x0000},
+{0x072a, 0x0000},
+{0x072c, 0x0000},
+{0x072e, 0x0000},
+{0x0730, 0x0000},
+{0x0732, 0x0000},
+{0x0734, 0x0000},
+{0x0736, 0x0000},
+{0x0738, 0x0000},
+{0x073a, 0x0000},
+{0x073c, 0x0000},
+{0x073e, 0x0000},
+{0x0740, 0x0000},
+{0x0742, 0x0000},
+{0x0744, 0x0000},
+{0x0746, 0x0000},
+{0x0748, 0x0000},
+{0x074a, 0x0000},
+{0x074c, 0x0000},
+{0x074e, 0x0000},
+{0x0750, 0x0000},
+{0x0752, 0x0000},
+{0x0754, 0x0000},
+{0x0756, 0x0000},
+{0x0758, 0x0000},
+{0x075a, 0x0000},
+{0x075c, 0x0000},
+{0x075e, 0x0000},
+{0x0760, 0x0000},
+{0x0762, 0x0000},
+{0x0764, 0x0000},
+{0x0766, 0x0000},
+{0x0768, 0x0000},
+{0x076a, 0x0000},
+{0x076c, 0x0000},
+{0x076e, 0x0000},
+{0x0770, 0x0000},
+{0x0772, 0x0000},
+{0x0774, 0x0000},
+{0x0776, 0x0000},
+{0x0778, 0x0000},
+{0x077a, 0x0000},
+{0x077c, 0x0000},
+{0x077e, 0x0000},
+{0x0780, 0x0000},
+{0x0782, 0x0000},
+{0x0784, 0x0000},
+{0x0786, 0x0000},
+{0x0788, 0x0000},
+{0x078a, 0x0000},
+{0x078c, 0x0000},
+{0x078e, 0x0000},
+{0x0790, 0x0000},
+{0x0792, 0x0000},
+{0x0794, 0x0000},
+{0x0796, 0x0000},
+{0x0798, 0x0000},
+{0x079a, 0x0000},
+{0x079c, 0x0000},
+{0x079e, 0x0000},
+{0x07a0, 0x0000},
+{0x07a2, 0x0000},
+{0x07a4, 0x0000},
+{0x07a6, 0x0000},
+{0x07a8, 0x0000},
+{0x07aa, 0x0000},
+{0x07ac, 0x0000},
+{0x07ae, 0x0000},
+{0x07b0, 0x0000},
+{0x07b2, 0x0000},
+{0x07b4, 0x0000},
+{0x07b6, 0x0000},
+{0x07b8, 0x0000},
+{0x07ba, 0x0000},
+{0x07bc, 0x0000},
+{0x07be, 0x0000},
+{0x07c0, 0x0000},
+{0x07c2, 0x0000},
+{0x07c4, 0x0000},
+{0x07c6, 0x0000},
+{0x07c8, 0x0000},
+{0x07ca, 0x0000},
+{0x07cc, 0x0000},
+{0x07ce, 0x0000},
+{0x07d0, 0x0000},
+{0x07d2, 0x0000},
+{0x07d4, 0x0000},
+{0x07d6, 0x0000},
+{0x07d8, 0x0000},
+{0x07da, 0x0000},
+{0x07dc, 0x0000},
+{0x07de, 0x0000},
+{0x07e0, 0x0000},
+{0x07e2, 0x0000},
+{0x07e4, 0x0000},
+{0x07e6, 0x0000},
+{0x07e8, 0x0000},
+{0x07ea, 0x0000},
+{0x07ec, 0x0000},
+{0x07ee, 0x0000},
+{0x07f0, 0x0000},
+{0x07f2, 0x0000},
+{0x07f4, 0x0000},
+{0x07f6, 0x0000},
+{0x07f8, 0x0000},
+{0x07fa, 0x0000},
+{0x07fc, 0x0000},
+{0x07fe, 0x0000},
+{0x0800, 0x0000},
+{0x0802, 0x0000},
+{0x0804, 0x0000},
+{0x0806, 0x0000},
+{0x0808, 0x0000},
+{0x080a, 0x0000},
+{0x080c, 0x0000},
+{0x080e, 0x0000},
+{0x0810, 0x0000},
+{0x0812, 0x0000},
+{0x0814, 0x0000},
+{0x0816, 0x0000},
+{0x0818, 0x0000},
+{0x081a, 0x0000},
+{0x081c, 0x0000},
+{0x081e, 0x0000},
+{0x0820, 0x0000},
+{0x0822, 0x0000},
+{0x0824, 0x0000},
+{0x0826, 0x0000},
+{0x0828, 0x0000},
+{0x082a, 0x0000},
+{0x082c, 0x0000},
+{0x082e, 0x0000},
+{0x0830, 0x0000},
+{0x0832, 0x0000},
+{0x0834, 0x0000},
+{0x0836, 0x0000},
+{0x0838, 0x0000},
+{0x083a, 0x0000},
+{0x083c, 0x0000},
+{0x083e, 0x0000},
+{0x0840, 0x0000},
+{0x0842, 0x0000},
+{0x0844, 0x0000},
+{0x0846, 0x0000},
+{0x0848, 0x0000},
+{0x084a, 0x0000},
+{0x084c, 0x0000},
+{0x084e, 0x0000},
+{0x0850, 0x0000},
+{0x0852, 0x0000},
+{0x0854, 0x0000},
+{0x0856, 0x0000},
+{0x0858, 0x0000},
+{0x085a, 0x0000},
+{0x085c, 0x0000},
+{0x085e, 0x0000},
+{0x0860, 0x0000},
+{0x0862, 0x0000},
+{0x0864, 0x0000},
+{0x0866, 0x0000},
+{0x0868, 0x0000},
+{0x086a, 0x0000},
+{0x086c, 0x0000},
+{0x086e, 0x0000},
+{0x0870, 0x0000},
+{0x0872, 0x0000},
+{0x0874, 0x0000},
+{0x0876, 0x0000},
+{0x0878, 0x0000},
+{0x087a, 0x0000},
+{0x087c, 0x0000},
+{0x087e, 0x0000},
+{0x0880, 0x0000},
+{0x0882, 0x0000},
+{0x0884, 0x0000},
+{0x0886, 0x0000},
+{0x0888, 0x0000},
+{0x088a, 0x0000},
+{0x088c, 0x0000},
+{0x088e, 0x0000},
+{0x0890, 0x0000},
+{0x0892, 0x0000},
+{0x0894, 0x0000},
+{0x0896, 0x0000},
+{0x0898, 0x0000},
+{0x089a, 0x0000},
+{0x089c, 0x0000},
+{0x089e, 0x0000},
+{0x08a0, 0x0000},
+{0x08a2, 0x0000},
+{0x08a4, 0x0000},
+{0x08a6, 0x0000},
+{0x08a8, 0x0000},
+{0x08aa, 0x0000},
+{0x08ac, 0x0000},
+{0x08ae, 0x0000},
+{0x08b0, 0x0000},
+{0x08b2, 0x0000},
+{0x08b4, 0x0000},
+{0x08b6, 0x0000},
+{0x08b8, 0x0000},
+{0x08ba, 0x0000},
+{0x08bc, 0x0000},
+{0x08be, 0x0000},
+{0x08c0, 0x0000},
+{0x08c2, 0x0000},
+{0x08c4, 0x0000},
+{0x08c6, 0x0000},
+{0x08c8, 0x0000},
+{0x08ca, 0x0000},
+{0x08cc, 0x0000},
+{0x08ce, 0x0000},
+{0x08d0, 0x0000},
+{0x08d2, 0x0000},
+{0x08d4, 0x0000},
+{0x08d6, 0x0000},
+{0x08d8, 0x0000},
+{0x08da, 0x0000},
+{0x08dc, 0x0000},
+{0x08de, 0x0000},
+{0x08e0, 0x0000},
+{0x08e2, 0x0000},
+{0x08e4, 0x0000},
+{0x08e6, 0x0000},
+{0x08e8, 0x0000},
+{0x08ea, 0x0000},
+{0x08ec, 0x0000},
+{0x08ee, 0x0000},
+{0x08f0, 0x0000},
+{0x08f2, 0x0000},
+{0x08f4, 0x0000},
+{0x08f6, 0x0000},
+{0x08f8, 0x0000},
+{0x08fa, 0x0000},
+{0x08fc, 0x0000},
+{0x08fe, 0x0000},
+{0x0900, 0x0000},
+{0x0902, 0x0000},
+{0x0904, 0x0000},
+{0x0906, 0x0000},
+{0x0908, 0x0000},
+{0x090a, 0x0000},
+{0x090c, 0x0000},
+{0x090e, 0x0000},
+{0x0910, 0x0000},
+{0x0912, 0x0000},
+{0x0914, 0x0000},
+{0x0916, 0x0000},
+{0x0918, 0x0000},
+{0x091a, 0x0000},
+{0x091c, 0x0000},
+{0x091e, 0x0000},
+{0x0920, 0x0000},
+{0x0922, 0x0000},
+{0x0924, 0x0000},
+{0x0926, 0x0000},
+{0x0928, 0x0000},
+{0x092a, 0x0000},
+{0x092c, 0x0000},
+{0x092e, 0x0000},
+{0x0930, 0x0000},
+{0x0932, 0x0000},
+{0x0934, 0x0000},
+{0x0936, 0x0000},
+{0x0938, 0x0000},
+{0x093a, 0x0000},
+{0x093c, 0x0000},
+{0x093e, 0x0000},
+{0x0940, 0x0000},
+{0x0942, 0x0000},
+{0x0944, 0x0000},
+{0x0946, 0x0000},
+{0x0948, 0x0000},
+{0x094a, 0x0000},
+{0x094c, 0x0000},
+{0x094e, 0x0000},
+{0x0950, 0x0000},
+{0x0952, 0x0000},
+{0x0954, 0x0000},
+{0x0956, 0x0000},
+{0x0958, 0x0000},
+{0x095a, 0x0000},
+{0x095c, 0x0000},
+{0x095e, 0x0000},
+{0x0960, 0x0000},
+{0x0962, 0x0000},
+{0x0964, 0x0000},
+{0x0966, 0x0000},
+{0x0968, 0x0000},
+{0x096a, 0x0000},
+{0x096c, 0x0000},
+{0x096e, 0x0000},
+{0x0970, 0x0000},
+{0x0972, 0x0000},
+{0x0974, 0x0000},
+{0x0976, 0x0000},
+{0x0978, 0x0000},
+{0x097a, 0x0000},
+{0x097c, 0x0000},
+{0x097e, 0x0000},
+{0x0980, 0x0000},
+{0x0982, 0x0000},
+{0x0984, 0x0000},
+{0x0986, 0x0000},
+{0x0988, 0x0000},
+{0x098a, 0x0000},
+{0x098c, 0x0000},
+{0x098e, 0x0000},
+{0x0990, 0x0000},
+{0x0992, 0x0000},
+{0x0994, 0x0000},
+{0x0996, 0x0000},
+{0x0998, 0x0000},
+{0x099a, 0x0000},
+{0x099c, 0x0000},
+{0x099e, 0x0000},
+{0x09a0, 0x0000},
+{0x09a2, 0x0000},
+{0x09a4, 0x0000},
+{0x09a6, 0x0000},
+{0x09a8, 0x0000},
+{0x09aa, 0x0000},
+{0x09ac, 0x0000},
+{0x09ae, 0x0000},
+{0x09b0, 0x0000},
+{0x09b2, 0x0000},
+{0x09b4, 0x0000},
+{0x09b6, 0x0000},
+{0x09b8, 0x0000},
+{0x09ba, 0x0000},
+{0x09bc, 0x0000},
+{0x09be, 0x0000},
+{0x09c0, 0x0000},
+{0x09c2, 0x0000},
+{0x09c4, 0x0000},
+{0x09c6, 0x0000},
+{0x09c8, 0x0000},
+{0x09ca, 0x0000},
+{0x09cc, 0x0000},
+{0x09ce, 0x0000},
+{0x09d0, 0x0000},
+{0x09d2, 0x0000},
+{0x09d4, 0x0000},
+{0x09d6, 0x0000},
+{0x09d8, 0x0000},
+{0x09da, 0x0000},
+{0x09dc, 0x0000},
+{0x09de, 0x0000},
+{0x09e0, 0x0000},
+{0x09e2, 0x0000},
+{0x09e4, 0x0000},
+{0x09e6, 0x0000},
+{0x09e8, 0x0000},
+{0x09ea, 0x0000},
+{0x09ec, 0x0000},
+{0x09ee, 0x0000},
+{0x09f0, 0x0000},
+{0x09f2, 0x0000},
+{0x09f4, 0x0000},
+{0x09f6, 0x0000},
+{0x09f8, 0x0000},
+{0x09fa, 0x0000},
+{0x09fc, 0x4000},
+{0x09fe, 0x0000}
+};
+#endif
\ No newline at end of file
diff --git a/legacy_hal/inc/main_mic_config.h b/legacy_hal/inc/main_mic_config.h
new file mode 100755
index 0000000..bbe8212
--- /dev/null
+++ b/legacy_hal/inc/main_mic_config.h
@@ -0,0 +1,1029 @@
+#ifndef __MAIN_MIC_CONFIG_H_
+#define __MAIN_MIC_CONFIG_H_
+const unsigned short main_mic_config_array[][2] = {
+{0x0200, 0x0000},
+{0x0202, 0x0c81},
+{0x0204, 0x0010},
+{0x0206, 0x0000},
+{0x0208, 0x0000},
+{0x020a, 0x0000},
+{0x020c, 0x0000},
+{0x020e, 0x0000},
+{0x0210, 0x000d},
+{0x0212, 0x0000},
+{0x0214, 0x000e},
+{0x0216, 0x0000},
+{0x0218, 0x0000},
+{0x021a, 0x0000},
+{0x021c, 0x0000},
+{0x021e, 0x000e},
+{0x0220, 0x0000},
+{0x0222, 0x0000},
+{0x0224, 0x0001},
+{0x0226, 0x0a09},
+{0x0228, 0x0000},
+{0x022a, 0x0000},
+{0x022c, 0x0000},
+{0x022e, 0x0000},
+{0x0230, 0x0000},
+{0x0232, 0x0000},
+{0x0234, 0x0000},
+{0x0236, 0x0000},
+{0x0238, 0x0000},
+{0x023a, 0x0000},
+{0x023c, 0x0000},
+{0x023e, 0x0000},
+{0x0240, 0x0000},
+{0x0242, 0x0000},
+{0x0244, 0x0000},
+{0x0246, 0x0000},
+{0x0248, 0x0000},
+{0x024a, 0x0000},
+{0x024c, 0x0000},
+{0x024e, 0x0000},
+{0x0250, 0x0000},
+{0x0252, 0x0000},
+{0x0254, 0x0000},
+{0x0256, 0x0000},
+{0x0258, 0x0000},
+{0x025a, 0x0000},
+{0x025c, 0x0000},
+{0x025e, 0x0000},
+{0x0260, 0x0000},
+{0x0262, 0x01f2},
+{0x0264, 0x40c0},
+{0x0266, 0x0000},
+{0x0268, 0x0100},
+{0x026a, 0x0102},
+{0x026c, 0x0004},
+{0x026e, 0x0006},
+{0x0270, 0x0000},
+{0x0272, 0x0000},
+{0x0274, 0x0000},
+{0x0276, 0x0000},
+{0x0278, 0xc004},
+{0x027a, 0x03f6},
+{0x027c, 0xc0c0},
+{0x027e, 0x0000},
+{0x0280, 0x0100},
+{0x0282, 0x0101},
+{0x0284, 0x0004},
+{0x0286, 0x0006},
+{0x0288, 0x0000},
+{0x028a, 0x0000},
+{0x028c, 0x0000},
+{0x028e, 0x0000},
+{0x0290, 0x0000},
+{0x0292, 0x0000},
+{0x0294, 0x0000},
+{0x0296, 0x0000},
+{0x0298, 0x0000},
+{0x029a, 0x0000},
+{0x029c, 0x0000},
+{0x029e, 0x0000},
+{0x02a0, 0xc00a},
+{0x02a2, 0x0000},
+{0x02a4, 0x0004},
+{0x02a6, 0x0000},
+{0x02a8, 0x0000},
+{0x02aa, 0x0000},
+{0x02ac, 0x0000},
+{0x02ae, 0x0000},
+{0x02b0, 0x0001},
+{0x02b2, 0x0001},
+{0x02b4, 0x0000},
+{0x02b6, 0x0000},
+{0x02b8, 0x815e},
+{0x02ba, 0xfff1},
+{0x02bc, 0x81e0},
+{0x02be, 0xfff1},
+{0x02c0, 0x03ec},
+{0x02c2, 0xfff6},
+{0x02c4, 0x0000},
+{0x02c6, 0x0000},
+{0x02c8, 0x0000},
+{0x02ca, 0x0000},
+{0x02cc, 0x0000},
+{0x02ce, 0x0000},
+{0x02d0, 0x0000},
+{0x02d2, 0x0000},
+{0x02d4, 0x0000},
+{0x02d6, 0x0000},
+{0x02d8, 0x0000},
+{0x02da, 0x0000},
+{0x02dc, 0x0000},
+{0x02de, 0x0000},
+{0x02e0, 0x0000},
+{0x02e2, 0x0000},
+{0x02e4, 0x0000},
+{0x02e6, 0x0000},
+{0x02e8, 0x0000},
+{0x02ea, 0x0000},
+{0x02ec, 0x0000},
+{0x02ee, 0x0000},
+{0x02f0, 0x0000},
+{0x02f2, 0x0000},
+{0x02f4, 0x0000},
+{0x02f6, 0x0000},
+{0x02f8, 0x0000},
+{0x02fa, 0x0000},
+{0x02fc, 0x0000},
+{0x02fe, 0x0000},
+{0x0300, 0x4008},
+{0x0302, 0x1000},
+{0x0304, 0x0000},
+{0x0306, 0x0000},
+{0x0308, 0x0000},
+{0x030a, 0x0048},
+{0x030c, 0x0911},
+{0x030e, 0xb001},
+{0x0310, 0x9393},
+{0x0312, 0x7f00},
+{0x0314, 0x0000},
+{0x0316, 0x7fff},
+{0x0318, 0x0000},
+{0x031a, 0x0000},
+{0x031c, 0x7fff},
+{0x031e, 0x7fff},
+{0x0320, 0x7fff},
+{0x0322, 0x7fff},
+{0x0324, 0x0200},
+{0x0326, 0x001f},
+{0x0328, 0x3040},
+{0x032a, 0x010c},
+{0x032c, 0x0006},
+{0x032e, 0x0a1f},
+{0x0330, 0x08a1},
+{0x0332, 0x003f},
+{0x0334, 0x0020},
+{0x0336, 0x0000},
+{0x0338, 0x4801},
+{0x033a, 0x0096},
+{0x033c, 0x0002},
+{0x033e, 0x0004},
+{0x0340, 0x0000},
+{0x0342, 0x0800},
+{0x0344, 0x0000},
+{0x0346, 0x0005},
+{0x0348, 0x0000},
+{0x034a, 0x0000},
+{0x034c, 0x0000},
+{0x034e, 0x0000},
+{0x0350, 0x0000},
+{0x0352, 0x0000},
+{0x0354, 0x1122},
+{0x0356, 0x3344},
+{0x0358, 0x0806},
+{0x035a, 0x0228},
+{0x035c, 0xa000},
+{0x035e, 0x0000},
+{0x0360, 0x0013},
+{0x0362, 0x0e80},
+{0x0364, 0x0a00},
+{0x0366, 0x4000},
+{0x0368, 0x0026},
+{0x036a, 0x1a00},
+{0x036c, 0x0800},
+{0x036e, 0x0400},
+{0x0370, 0x0fa0},
+{0x0372, 0x0640},
+{0x0374, 0x0b0b},
+{0x0376, 0x0000},
+{0x0378, 0x0000},
+{0x037a, 0x0010},
+{0x037c, 0x01aa},
+{0x037e, 0x2000},
+{0x0380, 0x0000},
+{0x0382, 0x0200},
+{0x0384, 0x7800},
+{0x0386, 0x0280},
+{0x0388, 0x001e},
+{0x038a, 0x003c},
+{0x038c, 0x0f01},
+{0x038e, 0x08a1},
+{0x0390, 0x0040},
+{0x0392, 0x0000},
+{0x0394, 0x0000},
+{0x0396, 0x0000},
+{0x0398, 0x0000},
+{0x039a, 0x0000},
+{0x039c, 0x0000},
+{0x039e, 0x0000},
+{0x03a0, 0x0000},
+{0x03a2, 0x0020},
+{0x03a4, 0x0002},
+{0x03a6, 0x0064},
+{0x03a8, 0x000f},
+{0x03aa, 0x3333},
+{0x03ac, 0x7fbe},
+{0x03ae, 0x3333},
+{0x03b0, 0x7eb8},
+{0x03b2, 0x7fff},
+{0x03b4, 0x0001},
+{0x03b6, 0x7fdf},
+{0x03b8, 0x0002},
+{0x03ba, 0x7333},
+{0x03bc, 0x7333},
+{0x03be, 0x003c},
+{0x03c0, 0x0000},
+{0x03c2, 0x6666},
+{0x03c4, 0x0001},
+{0x03c6, 0x6666},
+{0x03c8, 0x5a9d},
+{0x03ca, 0x0100},
+{0x03cc, 0x0002},
+{0x03ce, 0x0000},
+{0x03d0, 0x0000},
+{0x03d2, 0x7213},
+{0x03d4, 0x0002},
+{0x03d6, 0x4000},
+{0x03d8, 0x0ccc},
+{0x03da, 0x0000},
+{0x03dc, 0x0000},
+{0x03de, 0x0000},
+{0x03e0, 0x0000},
+{0x03e2, 0x0000},
+{0x03e4, 0x0000},
+{0x03e6, 0x0002},
+{0x03e8, 0x01f0},
+{0x03ea, 0x0078},
+{0x03ec, 0x0032},
+{0x03ee, 0x0004},
+{0x03f0, 0x01f0},
+{0x03f2, 0x0078},
+{0x03f4, 0x0032},
+{0x03f6, 0x087a},
+{0x03f8, 0x0100},
+{0x03fa, 0x0190},
+{0x03fc, 0x0004},
+{0x03fe, 0x0017},
+{0x0400, 0x0400},
+{0x0402, 0x0320},
+{0x0404, 0x0033},
+{0x0406, 0x0000},
+{0x0408, 0x0b27},
+{0x040a, 0x1358},
+{0x040c, 0x0c52},
+{0x040e, 0x1560},
+{0x0410, 0x0da2},
+{0x0412, 0x17a2},
+{0x0414, 0x0f0e},
+{0x0416, 0x1a21},
+{0x0418, 0x123d},
+{0x041a, 0x170a},
+{0x041c, 0x0000},
+{0x041e, 0x0000},
+{0x0420, 0x0000},
+{0x0422, 0x0000},
+{0x0424, 0x0000},
+{0x0426, 0x0000},
+{0x0428, 0x0190},
+{0x042a, 0x0190},
+{0x042c, 0x0000},
+{0x042e, 0x0000},
+{0x0430, 0x0000},
+{0x0432, 0x0000},
+{0x0434, 0x0000},
+{0x0436, 0x0000},
+{0x0438, 0x0000},
+{0x043a, 0x7fff},
+{0x043c, 0x0001},
+{0x043e, 0x000a},
+{0x0440, 0x0001},
+{0x0442, 0x0000},
+{0x0444, 0x0000},
+{0x0446, 0x0000},
+{0x0448, 0x0000},
+{0x044a, 0x0000},
+{0x044c, 0x0000},
+{0x044e, 0x0000},
+{0x0450, 0x0000},
+{0x0452, 0x0000},
+{0x0454, 0x0000},
+{0x0456, 0x0000},
+{0x0458, 0x0000},
+{0x045a, 0x0000},
+{0x045c, 0x0000},
+{0x045e, 0x3000},
+{0x0460, 0x3fff},
+{0x0462, 0x020c},
+{0x0464, 0x0000},
+{0x0466, 0x0000},
+{0x0468, 0x0000},
+{0x046a, 0x0000},
+{0x046c, 0x0000},
+{0x046e, 0x0000},
+{0x0470, 0x0000},
+{0x0472, 0x0000},
+{0x0474, 0x0000},
+{0x0476, 0x0000},
+{0x0478, 0x0000},
+{0x047a, 0x0000},
+{0x047c, 0x0000},
+{0x047e, 0x0000},
+{0x0480, 0x0000},
+{0x0482, 0x0000},
+{0x0484, 0x0000},
+{0x0486, 0x0000},
+{0x0488, 0x0064},
+{0x048a, 0x000f},
+{0x048c, 0x0000},
+{0x048e, 0x0036},
+{0x0490, 0x0000},
+{0x0492, 0x03e8},
+{0x0494, 0x0064},
+{0x0496, 0x1999},
+{0x0498, 0x0ccc},
+{0x049a, 0x0005},
+{0x049c, 0x0019},
+{0x049e, 0x4026},
+{0x04a0, 0x5a67},
+{0x04a2, 0x4026},
+{0x04a4, 0x7fb2},
+{0x04a6, 0x0104},
+{0x04a8, 0x0ccc},
+{0x04aa, 0x0ccc},
+{0x04ac, 0x78d6},
+{0x04ae, 0x0d8f},
+{0x04b0, 0x0004},
+{0x04b2, 0x0000},
+{0x04b4, 0x0000},
+{0x04b6, 0x0000},
+{0x04b8, 0x0000},
+{0x04ba, 0x0000},
+{0x04bc, 0x0000},
+{0x04be, 0x0000},
+{0x04c0, 0x0000},
+{0x04c2, 0x0000},
+{0x04c4, 0x0000},
+{0x04c6, 0x0000},
+{0x04c8, 0x0000},
+{0x04ca, 0x0000},
+{0x04cc, 0x0000},
+{0x04ce, 0x0000},
+{0x04d0, 0x0000},
+{0x04d2, 0x0000},
+{0x04d4, 0x0000},
+{0x04d6, 0x0000},
+{0x04d8, 0x0000},
+{0x04da, 0x0000},
+{0x04dc, 0x0000},
+{0x04de, 0x0000},
+{0x04e0, 0x0000},
+{0x04e2, 0x0000},
+{0x04e4, 0x0000},
+{0x04e6, 0x0000},
+{0x04e8, 0x0000},
+{0x04ea, 0x0000},
+{0x04ec, 0x0000},
+{0x04ee, 0x0000},
+{0x04f0, 0x0000},
+{0x04f2, 0x0000},
+{0x04f4, 0x0000},
+{0x04f6, 0x0000},
+{0x04f8, 0x0000},
+{0x04fa, 0x0000},
+{0x04fc, 0x0000},
+{0x04fe, 0x0000},
+{0x0500, 0x7fff},
+{0x0502, 0x7fff},
+{0x0504, 0x7fff},
+{0x0506, 0x7fff},
+{0x0508, 0x7fff},
+{0x050a, 0x7fff},
+{0x050c, 0x7fff},
+{0x050e, 0x7fff},
+{0x0510, 0x7fff},
+{0x0512, 0x7fff},
+{0x0514, 0x7fff},
+{0x0516, 0x7fff},
+{0x0518, 0x7fff},
+{0x051a, 0x7fff},
+{0x051c, 0x7fff},
+{0x051e, 0x7fff},
+{0x0520, 0x7fff},
+{0x0522, 0x7fff},
+{0x0524, 0x7fff},
+{0x0526, 0x7fff},
+{0x0528, 0x7fff},
+{0x052a, 0x7fff},
+{0x052c, 0x7fff},
+{0x052e, 0x7fff},
+{0x0530, 0x7fff},
+{0x0532, 0x7fff},
+{0x0534, 0x7fff},
+{0x0536, 0x7fff},
+{0x0538, 0x7fff},
+{0x053a, 0x7fff},
+{0x053c, 0x7fff},
+{0x053e, 0x7fff},
+{0x0540, 0x7fff},
+{0x0542, 0x7fff},
+{0x0544, 0x7fff},
+{0x0546, 0x7fff},
+{0x0548, 0x7fff},
+{0x054a, 0x7fff},
+{0x054c, 0x7fff},
+{0x054e, 0x7fff},
+{0x0550, 0x7fff},
+{0x0552, 0x7fff},
+{0x0554, 0x7fff},
+{0x0556, 0x7fff},
+{0x0558, 0x7fff},
+{0x055a, 0x7fff},
+{0x055c, 0x7fff},
+{0x055e, 0x7fff},
+{0x0560, 0x7fff},
+{0x0562, 0x7fff},
+{0x0564, 0x7fff},
+{0x0566, 0x7fff},
+{0x0568, 0x7fff},
+{0x056a, 0x7fff},
+{0x056c, 0x7fff},
+{0x056e, 0x7fff},
+{0x0570, 0x7fff},
+{0x0572, 0x7fff},
+{0x0574, 0x7fff},
+{0x0576, 0x7fff},
+{0x0578, 0x7fff},
+{0x057a, 0x7fff},
+{0x057c, 0x7fff},
+{0x057e, 0x7fff},
+{0x0580, 0x7fff},
+{0x0582, 0x7fff},
+{0x0584, 0x7fff},
+{0x0586, 0x7fff},
+{0x0588, 0x7fff},
+{0x058a, 0x7fff},
+{0x058c, 0x7fff},
+{0x058e, 0x7fff},
+{0x0590, 0x7fff},
+{0x0592, 0x7fff},
+{0x0594, 0x7fff},
+{0x0596, 0x7fff},
+{0x0598, 0x7fff},
+{0x059a, 0x7fff},
+{0x059c, 0x7fff},
+{0x059e, 0x7fff},
+{0x05a0, 0x7fff},
+{0x05a2, 0x7fff},
+{0x05a4, 0x7fff},
+{0x05a6, 0x7fff},
+{0x05a8, 0x7fff},
+{0x05aa, 0x7fff},
+{0x05ac, 0x7fff},
+{0x05ae, 0x7fff},
+{0x05b0, 0x7fff},
+{0x05b2, 0x7fff},
+{0x05b4, 0x7fff},
+{0x05b6, 0x7fff},
+{0x05b8, 0x7fff},
+{0x05ba, 0x7fff},
+{0x05bc, 0x7fff},
+{0x05be, 0x7fff},
+{0x05c0, 0x7fff},
+{0x05c2, 0x7fff},
+{0x05c4, 0x7fff},
+{0x05c6, 0x7fff},
+{0x05c8, 0x7fff},
+{0x05ca, 0x7fff},
+{0x05cc, 0x7fff},
+{0x05ce, 0x7fff},
+{0x05d0, 0x7fff},
+{0x05d2, 0x7fff},
+{0x05d4, 0x7fff},
+{0x05d6, 0x7fff},
+{0x05d8, 0x7fff},
+{0x05da, 0x7fff},
+{0x05dc, 0x7fff},
+{0x05de, 0x7fff},
+{0x05e0, 0x7fff},
+{0x05e2, 0x7fff},
+{0x05e4, 0x7fff},
+{0x05e6, 0x7fff},
+{0x05e8, 0x7fff},
+{0x05ea, 0x7fff},
+{0x05ec, 0x7fff},
+{0x05ee, 0x7fff},
+{0x05f0, 0x7fff},
+{0x05f2, 0x7fff},
+{0x05f4, 0x7fff},
+{0x05f6, 0x7fff},
+{0x05f8, 0x7fff},
+{0x05fa, 0x7fff},
+{0x05fc, 0x7fff},
+{0x05fe, 0x7fff},
+{0x0600, 0x0000},
+{0x0602, 0x0000},
+{0x0604, 0x0000},
+{0x0606, 0x0000},
+{0x0608, 0x0000},
+{0x060a, 0x0000},
+{0x060c, 0x0000},
+{0x060e, 0x0000},
+{0x0610, 0x0000},
+{0x0612, 0x0000},
+{0x0614, 0x0000},
+{0x0616, 0x0000},
+{0x0618, 0x0000},
+{0x061a, 0x0000},
+{0x061c, 0x0000},
+{0x061e, 0x0000},
+{0x0620, 0x0000},
+{0x0622, 0x0000},
+{0x0624, 0x0000},
+{0x0626, 0x0000},
+{0x0628, 0x0000},
+{0x062a, 0x0000},
+{0x062c, 0x0000},
+{0x062e, 0x0000},
+{0x0630, 0x0000},
+{0x0632, 0x0000},
+{0x0634, 0x0000},
+{0x0636, 0x0000},
+{0x0638, 0x0000},
+{0x063a, 0x0000},
+{0x063c, 0x0000},
+{0x063e, 0x0000},
+{0x0640, 0x0000},
+{0x0642, 0x0000},
+{0x0644, 0x0000},
+{0x0646, 0x0000},
+{0x0648, 0x0000},
+{0x064a, 0x0000},
+{0x064c, 0x0000},
+{0x064e, 0x0000},
+{0x0650, 0x0000},
+{0x0652, 0x0000},
+{0x0654, 0x0000},
+{0x0656, 0x0000},
+{0x0658, 0x0000},
+{0x065a, 0x0000},
+{0x065c, 0x0000},
+{0x065e, 0x0000},
+{0x0660, 0x0000},
+{0x0662, 0x0000},
+{0x0664, 0x0000},
+{0x0666, 0x0000},
+{0x0668, 0x0000},
+{0x066a, 0x0000},
+{0x066c, 0x0000},
+{0x066e, 0x0000},
+{0x0670, 0x0000},
+{0x0672, 0x0000},
+{0x0674, 0x0000},
+{0x0676, 0x0000},
+{0x0678, 0x0000},
+{0x067a, 0x0000},
+{0x067c, 0x0000},
+{0x067e, 0x0000},
+{0x0680, 0x0000},
+{0x0682, 0x0000},
+{0x0684, 0x0000},
+{0x0686, 0x0000},
+{0x0688, 0x0000},
+{0x068a, 0x0000},
+{0x068c, 0x0000},
+{0x068e, 0x0000},
+{0x0690, 0x0000},
+{0x0692, 0x0000},
+{0x0694, 0x0000},
+{0x0696, 0x0000},
+{0x0698, 0x0000},
+{0x069a, 0x0000},
+{0x069c, 0x0000},
+{0x069e, 0x0000},
+{0x06a0, 0x0000},
+{0x06a2, 0x0000},
+{0x06a4, 0x0000},
+{0x06a6, 0x0000},
+{0x06a8, 0x0000},
+{0x06aa, 0x0000},
+{0x06ac, 0x0000},
+{0x06ae, 0x0000},
+{0x06b0, 0x0000},
+{0x06b2, 0x0000},
+{0x06b4, 0x0000},
+{0x06b6, 0x0000},
+{0x06b8, 0x0000},
+{0x06ba, 0x0000},
+{0x06bc, 0x0000},
+{0x06be, 0x0000},
+{0x06c0, 0x0000},
+{0x06c2, 0x0000},
+{0x06c4, 0x0000},
+{0x06c6, 0x0000},
+{0x06c8, 0x0000},
+{0x06ca, 0x0000},
+{0x06cc, 0x0000},
+{0x06ce, 0x0000},
+{0x06d0, 0x0000},
+{0x06d2, 0x0000},
+{0x06d4, 0x0000},
+{0x06d6, 0x0000},
+{0x06d8, 0x0000},
+{0x06da, 0x0000},
+{0x06dc, 0x0000},
+{0x06de, 0x0000},
+{0x06e0, 0x0000},
+{0x06e2, 0x0000},
+{0x06e4, 0x0000},
+{0x06e6, 0x0000},
+{0x06e8, 0x0000},
+{0x06ea, 0x0000},
+{0x06ec, 0x0000},
+{0x06ee, 0x0000},
+{0x06f0, 0x0000},
+{0x06f2, 0x0000},
+{0x06f4, 0x0000},
+{0x06f6, 0x0000},
+{0x06f8, 0x0000},
+{0x06fa, 0x0000},
+{0x06fc, 0x0000},
+{0x06fe, 0x0000},
+{0x0700, 0x0000},
+{0x0702, 0x0000},
+{0x0704, 0x0000},
+{0x0706, 0x0000},
+{0x0708, 0x0000},
+{0x070a, 0x0000},
+{0x070c, 0x0000},
+{0x070e, 0x0000},
+{0x0710, 0x0000},
+{0x0712, 0x0000},
+{0x0714, 0x0000},
+{0x0716, 0x0000},
+{0x0718, 0x0000},
+{0x071a, 0x0000},
+{0x071c, 0x0000},
+{0x071e, 0x0000},
+{0x0720, 0x0000},
+{0x0722, 0x0000},
+{0x0724, 0x0000},
+{0x0726, 0x0000},
+{0x0728, 0x0000},
+{0x072a, 0x0000},
+{0x072c, 0x0000},
+{0x072e, 0x0000},
+{0x0730, 0x0000},
+{0x0732, 0x0000},
+{0x0734, 0x0000},
+{0x0736, 0x0000},
+{0x0738, 0x0000},
+{0x073a, 0x0000},
+{0x073c, 0x0000},
+{0x073e, 0x0000},
+{0x0740, 0x0000},
+{0x0742, 0x0000},
+{0x0744, 0x0000},
+{0x0746, 0x0000},
+{0x0748, 0x0000},
+{0x074a, 0x0000},
+{0x074c, 0x0000},
+{0x074e, 0x0000},
+{0x0750, 0x0000},
+{0x0752, 0x0000},
+{0x0754, 0x0000},
+{0x0756, 0x0000},
+{0x0758, 0x0000},
+{0x075a, 0x0000},
+{0x075c, 0x0000},
+{0x075e, 0x0000},
+{0x0760, 0x0000},
+{0x0762, 0x0000},
+{0x0764, 0x0000},
+{0x0766, 0x0000},
+{0x0768, 0x0000},
+{0x076a, 0x0000},
+{0x076c, 0x0000},
+{0x076e, 0x0000},
+{0x0770, 0x0000},
+{0x0772, 0x0000},
+{0x0774, 0x0000},
+{0x0776, 0x0000},
+{0x0778, 0x0000},
+{0x077a, 0x0000},
+{0x077c, 0x0000},
+{0x077e, 0x0000},
+{0x0780, 0x0000},
+{0x0782, 0x0000},
+{0x0784, 0x0000},
+{0x0786, 0x0000},
+{0x0788, 0x0000},
+{0x078a, 0x0000},
+{0x078c, 0x0000},
+{0x078e, 0x0000},
+{0x0790, 0x0000},
+{0x0792, 0x0000},
+{0x0794, 0x0000},
+{0x0796, 0x0000},
+{0x0798, 0x0000},
+{0x079a, 0x0000},
+{0x079c, 0x0000},
+{0x079e, 0x0000},
+{0x07a0, 0x0000},
+{0x07a2, 0x0000},
+{0x07a4, 0x0000},
+{0x07a6, 0x0000},
+{0x07a8, 0x0000},
+{0x07aa, 0x0000},
+{0x07ac, 0x0000},
+{0x07ae, 0x0000},
+{0x07b0, 0x0000},
+{0x07b2, 0x0000},
+{0x07b4, 0x0000},
+{0x07b6, 0x0000},
+{0x07b8, 0x0000},
+{0x07ba, 0x0000},
+{0x07bc, 0x0000},
+{0x07be, 0x0000},
+{0x07c0, 0x0000},
+{0x07c2, 0x0000},
+{0x07c4, 0x0000},
+{0x07c6, 0x0000},
+{0x07c8, 0x0000},
+{0x07ca, 0x0000},
+{0x07cc, 0x0000},
+{0x07ce, 0x0000},
+{0x07d0, 0x0000},
+{0x07d2, 0x0000},
+{0x07d4, 0x0000},
+{0x07d6, 0x0000},
+{0x07d8, 0x0000},
+{0x07da, 0x0000},
+{0x07dc, 0x0000},
+{0x07de, 0x0000},
+{0x07e0, 0x0000},
+{0x07e2, 0x0000},
+{0x07e4, 0x0000},
+{0x07e6, 0x0000},
+{0x07e8, 0x0000},
+{0x07ea, 0x0000},
+{0x07ec, 0x0000},
+{0x07ee, 0x0000},
+{0x07f0, 0x0000},
+{0x07f2, 0x0000},
+{0x07f4, 0x0000},
+{0x07f6, 0x0000},
+{0x07f8, 0x0000},
+{0x07fa, 0x0000},
+{0x07fc, 0x0000},
+{0x07fe, 0x0000},
+{0x0800, 0x0000},
+{0x0802, 0x0000},
+{0x0804, 0x0000},
+{0x0806, 0x0000},
+{0x0808, 0x0000},
+{0x080a, 0x0000},
+{0x080c, 0x0000},
+{0x080e, 0x0000},
+{0x0810, 0x0000},
+{0x0812, 0x0000},
+{0x0814, 0x0000},
+{0x0816, 0x0000},
+{0x0818, 0x0000},
+{0x081a, 0x0000},
+{0x081c, 0x0000},
+{0x081e, 0x0000},
+{0x0820, 0x0000},
+{0x0822, 0x0000},
+{0x0824, 0x0000},
+{0x0826, 0x0000},
+{0x0828, 0x0000},
+{0x082a, 0x0000},
+{0x082c, 0x0000},
+{0x082e, 0x0000},
+{0x0830, 0x0000},
+{0x0832, 0x0000},
+{0x0834, 0x0000},
+{0x0836, 0x0000},
+{0x0838, 0x0000},
+{0x083a, 0x0000},
+{0x083c, 0x0000},
+{0x083e, 0x0000},
+{0x0840, 0x0000},
+{0x0842, 0x0000},
+{0x0844, 0x0000},
+{0x0846, 0x0000},
+{0x0848, 0x0000},
+{0x084a, 0x0000},
+{0x084c, 0x0000},
+{0x084e, 0x0000},
+{0x0850, 0x0000},
+{0x0852, 0x0000},
+{0x0854, 0x0000},
+{0x0856, 0x0000},
+{0x0858, 0x0000},
+{0x085a, 0x0000},
+{0x085c, 0x0000},
+{0x085e, 0x0000},
+{0x0860, 0x0000},
+{0x0862, 0x0000},
+{0x0864, 0x0000},
+{0x0866, 0x0000},
+{0x0868, 0x0000},
+{0x086a, 0x0000},
+{0x086c, 0x0000},
+{0x086e, 0x0000},
+{0x0870, 0x0000},
+{0x0872, 0x0000},
+{0x0874, 0x0000},
+{0x0876, 0x0000},
+{0x0878, 0x0000},
+{0x087a, 0x0000},
+{0x087c, 0x0000},
+{0x087e, 0x0000},
+{0x0880, 0x0000},
+{0x0882, 0x0000},
+{0x0884, 0x0000},
+{0x0886, 0x0000},
+{0x0888, 0x0000},
+{0x088a, 0x0000},
+{0x088c, 0x0000},
+{0x088e, 0x0000},
+{0x0890, 0x0000},
+{0x0892, 0x0000},
+{0x0894, 0x0000},
+{0x0896, 0x0000},
+{0x0898, 0x0000},
+{0x089a, 0x0000},
+{0x089c, 0x0000},
+{0x089e, 0x0000},
+{0x08a0, 0x0000},
+{0x08a2, 0x0000},
+{0x08a4, 0x0000},
+{0x08a6, 0x0000},
+{0x08a8, 0x0000},
+{0x08aa, 0x0000},
+{0x08ac, 0x0000},
+{0x08ae, 0x0000},
+{0x08b0, 0x0000},
+{0x08b2, 0x0000},
+{0x08b4, 0x0000},
+{0x08b6, 0x0000},
+{0x08b8, 0x0000},
+{0x08ba, 0x0000},
+{0x08bc, 0x0000},
+{0x08be, 0x0000},
+{0x08c0, 0x0000},
+{0x08c2, 0x0000},
+{0x08c4, 0x0000},
+{0x08c6, 0x0000},
+{0x08c8, 0x0000},
+{0x08ca, 0x0000},
+{0x08cc, 0x0000},
+{0x08ce, 0x0000},
+{0x08d0, 0x0000},
+{0x08d2, 0x0000},
+{0x08d4, 0x0000},
+{0x08d6, 0x0000},
+{0x08d8, 0x0000},
+{0x08da, 0x0000},
+{0x08dc, 0x0000},
+{0x08de, 0x0000},
+{0x08e0, 0x0000},
+{0x08e2, 0x0000},
+{0x08e4, 0x0000},
+{0x08e6, 0x0000},
+{0x08e8, 0x0000},
+{0x08ea, 0x0000},
+{0x08ec, 0x0000},
+{0x08ee, 0x0000},
+{0x08f0, 0x0000},
+{0x08f2, 0x0000},
+{0x08f4, 0x0000},
+{0x08f6, 0x0000},
+{0x08f8, 0x0000},
+{0x08fa, 0x0000},
+{0x08fc, 0x0000},
+{0x08fe, 0x0000},
+{0x0900, 0x0000},
+{0x0902, 0x0000},
+{0x0904, 0x0000},
+{0x0906, 0x0000},
+{0x0908, 0x0000},
+{0x090a, 0x0000},
+{0x090c, 0x0000},
+{0x090e, 0x0000},
+{0x0910, 0x0000},
+{0x0912, 0x0000},
+{0x0914, 0x0000},
+{0x0916, 0x0000},
+{0x0918, 0x0000},
+{0x091a, 0x0000},
+{0x091c, 0x0000},
+{0x091e, 0x0000},
+{0x0920, 0x0000},
+{0x0922, 0x0000},
+{0x0924, 0x0000},
+{0x0926, 0x0000},
+{0x0928, 0x0000},
+{0x092a, 0x0000},
+{0x092c, 0x0000},
+{0x092e, 0x0000},
+{0x0930, 0x0000},
+{0x0932, 0x0000},
+{0x0934, 0x0000},
+{0x0936, 0x0000},
+{0x0938, 0x0000},
+{0x093a, 0x0000},
+{0x093c, 0x0000},
+{0x093e, 0x0000},
+{0x0940, 0x0000},
+{0x0942, 0x0000},
+{0x0944, 0x0000},
+{0x0946, 0x0000},
+{0x0948, 0x0000},
+{0x094a, 0x0000},
+{0x094c, 0x0000},
+{0x094e, 0x0000},
+{0x0950, 0x0000},
+{0x0952, 0x0000},
+{0x0954, 0x0000},
+{0x0956, 0x0000},
+{0x0958, 0x0000},
+{0x095a, 0x0000},
+{0x095c, 0x0000},
+{0x095e, 0x0000},
+{0x0960, 0x0000},
+{0x0962, 0x0000},
+{0x0964, 0x0000},
+{0x0966, 0x0000},
+{0x0968, 0x0000},
+{0x096a, 0x0000},
+{0x096c, 0x0000},
+{0x096e, 0x0000},
+{0x0970, 0x0000},
+{0x0972, 0x0000},
+{0x0974, 0x0000},
+{0x0976, 0x0000},
+{0x0978, 0x0000},
+{0x097a, 0x0000},
+{0x097c, 0x0000},
+{0x097e, 0x0000},
+{0x0980, 0x0000},
+{0x0982, 0x0000},
+{0x0984, 0x0000},
+{0x0986, 0x0000},
+{0x0988, 0x0000},
+{0x098a, 0x0000},
+{0x098c, 0x0000},
+{0x098e, 0x0000},
+{0x0990, 0x0000},
+{0x0992, 0x0000},
+{0x0994, 0x0000},
+{0x0996, 0x0000},
+{0x0998, 0x0000},
+{0x099a, 0x0000},
+{0x099c, 0x0000},
+{0x099e, 0x0000},
+{0x09a0, 0x0000},
+{0x09a2, 0x0000},
+{0x09a4, 0x0000},
+{0x09a6, 0x0000},
+{0x09a8, 0x0000},
+{0x09aa, 0x0000},
+{0x09ac, 0x0000},
+{0x09ae, 0x0000},
+{0x09b0, 0x0000},
+{0x09b2, 0x0000},
+{0x09b4, 0x0000},
+{0x09b6, 0x0000},
+{0x09b8, 0x0000},
+{0x09ba, 0x0000},
+{0x09bc, 0x0000},
+{0x09be, 0x0000},
+{0x09c0, 0x0000},
+{0x09c2, 0x0000},
+{0x09c4, 0x0000},
+{0x09c6, 0x0000},
+{0x09c8, 0x0000},
+{0x09ca, 0x0000},
+{0x09cc, 0x0000},
+{0x09ce, 0x0000},
+{0x09d0, 0x0000},
+{0x09d2, 0x0000},
+{0x09d4, 0x0000},
+{0x09d6, 0x0000},
+{0x09d8, 0x0000},
+{0x09da, 0x0000},
+{0x09dc, 0x0000},
+{0x09de, 0x0000},
+{0x09e0, 0x0000},
+{0x09e2, 0x0000},
+{0x09e4, 0x0000},
+{0x09e6, 0x0000},
+{0x09e8, 0x0000},
+{0x09ea, 0x0000},
+{0x09ec, 0x0000},
+{0x09ee, 0x0000},
+{0x09f0, 0x0000},
+{0x09f2, 0x0000},
+{0x09f4, 0x0000},
+{0x09f6, 0x0000},
+{0x09f8, 0x0000},
+{0x09fa, 0x0000},
+{0x09fc, 0x4000},
+{0x09fe, 0x0000}	
+};
+#endif /*__MAIN_MIC_CONFIG_H_*/
\ No newline at end of file
diff --git a/legacy_hal/inc/speak_config.h b/legacy_hal/inc/speak_config.h
new file mode 100755
index 0000000..9186d01
--- /dev/null
+++ b/legacy_hal/inc/speak_config.h
@@ -0,0 +1,1029 @@
+#ifndef __SPEAK_CONFIG_H_
+#define __SPEAK_CONFIG_H_
+const unsigned short speak_config_array[][2] = {
+{0x0200, 0x0000},
+{0x0202, 0x0c81},
+{0x0204, 0x0010},
+{0x0206, 0x0000},
+{0x0208, 0x0000},
+{0x020a, 0x0000},
+{0x020c, 0x0000},
+{0x020e, 0x0000},
+{0x0210, 0x000d},
+{0x0212, 0x0000},
+{0x0214, 0x000e},
+{0x0216, 0x0000},
+{0x0218, 0x0000},
+{0x021a, 0x0000},
+{0x021c, 0x0000},
+{0x021e, 0x000e},
+{0x0220, 0x0000},
+{0x0222, 0x0000},
+{0x0224, 0x0001},
+{0x0226, 0x0a09},
+{0x0228, 0x0000},
+{0x022a, 0x0000},
+{0x022c, 0x0000},
+{0x022e, 0x0000},
+{0x0230, 0x0000},
+{0x0232, 0x0000},
+{0x0234, 0x0000},
+{0x0236, 0x0000},
+{0x0238, 0x0000},
+{0x023a, 0x0000},
+{0x023c, 0x0000},
+{0x023e, 0x0000},
+{0x0240, 0x0000},
+{0x0242, 0x0000},
+{0x0244, 0x0000},
+{0x0246, 0x0000},
+{0x0248, 0x0000},
+{0x024a, 0x0000},
+{0x024c, 0x0000},
+{0x024e, 0x0000},
+{0x0250, 0x0000},
+{0x0252, 0x0000},
+{0x0254, 0x0000},
+{0x0256, 0x0000},
+{0x0258, 0x0000},
+{0x025a, 0x0000},
+{0x025c, 0x0000},
+{0x025e, 0x0000},
+{0x0260, 0x0000},
+{0x0262, 0x01f2},
+{0x0264, 0x40c0},
+{0x0266, 0x0000},
+{0x0268, 0x0100},
+{0x026a, 0x0102},
+{0x026c, 0x0004},
+{0x026e, 0x0006},
+{0x0270, 0x0000},
+{0x0272, 0x0000},
+{0x0274, 0x0000},
+{0x0276, 0x0000},
+{0x0278, 0xc004},
+{0x027a, 0x03f6},
+{0x027c, 0xc0c0},
+{0x027e, 0x0000},
+{0x0280, 0x0100},
+{0x0282, 0x0101},
+{0x0284, 0x0004},
+{0x0286, 0x0006},
+{0x0288, 0x0000},
+{0x028a, 0x0000},
+{0x028c, 0x0000},
+{0x028e, 0x0000},
+{0x0290, 0x0000},
+{0x0292, 0x0000},
+{0x0294, 0x0000},
+{0x0296, 0x0000},
+{0x0298, 0x0000},
+{0x029a, 0x0000},
+{0x029c, 0x0000},
+{0x029e, 0x0000},
+{0x02a0, 0xc000},
+{0x02a2, 0x0000},
+{0x02a4, 0x0004},
+{0x02a6, 0x0000},
+{0x02a8, 0x0000},
+{0x02aa, 0x0000},
+{0x02ac, 0x0000},
+{0x02ae, 0x0000},
+{0x02b0, 0x0001},
+{0x02b2, 0x0000},
+{0x02b4, 0x0000},
+{0x02b6, 0x0000},
+{0x02b8, 0x815e},
+{0x02ba, 0xfff1},
+{0x02bc, 0x81e0},
+{0x02be, 0xfff1},
+{0x02c0, 0x03ec},
+{0x02c2, 0xfff6},
+{0x02c4, 0x0000},
+{0x02c6, 0x0000},
+{0x02c8, 0x0000},
+{0x02ca, 0x0000},
+{0x02cc, 0x0000},
+{0x02ce, 0x0000},
+{0x02d0, 0x0000},
+{0x02d2, 0x0000},
+{0x02d4, 0x0000},
+{0x02d6, 0x0000},
+{0x02d8, 0x0000},
+{0x02da, 0x0000},
+{0x02dc, 0x0000},
+{0x02de, 0x0000},
+{0x02e0, 0x0000},
+{0x02e2, 0x0000},
+{0x02e4, 0x0000},
+{0x02e6, 0x0000},
+{0x02e8, 0x0000},
+{0x02ea, 0x0000},
+{0x02ec, 0x0000},
+{0x02ee, 0x0000},
+{0x02f0, 0x0000},
+{0x02f2, 0x0000},
+{0x02f4, 0x0000},
+{0x02f6, 0x0000},
+{0x02f8, 0x0000},
+{0x02fa, 0x0000},
+{0x02fc, 0x0000},
+{0x02fe, 0x0000},
+{0x0300, 0x4008},
+{0x0302, 0x1000},
+{0x0304, 0x0000},
+{0x0306, 0x0000},
+{0x0308, 0x0000},
+{0x030a, 0x0040},
+{0x030c, 0x0810},
+{0x030e, 0xb001},
+{0x0310, 0x9393},
+{0x0312, 0x7f00},
+{0x0314, 0x0000},
+{0x0316, 0x7fff},
+{0x0318, 0x0000},
+{0x031a, 0x0000},
+{0x031c, 0x7fff},
+{0x031e, 0x7fff},
+{0x0320, 0x7fff},
+{0x0322, 0x7fff},
+{0x0324, 0x0200},
+{0x0326, 0x001f},
+{0x0328, 0x3040},
+{0x032a, 0x010c},
+{0x032c, 0x0006},
+{0x032e, 0x0a1f},
+{0x0330, 0x08a1},
+{0x0332, 0x003f},
+{0x0334, 0x0020},
+{0x0336, 0x0000},
+{0x0338, 0x4801},
+{0x033a, 0x0096},
+{0x033c, 0x0002},
+{0x033e, 0x0004},
+{0x0340, 0x0000},
+{0x0342, 0x0800},
+{0x0344, 0x0000},
+{0x0346, 0x0005},
+{0x0348, 0x0000},
+{0x034a, 0x0000},
+{0x034c, 0x0000},
+{0x034e, 0x0000},
+{0x0350, 0x0000},
+{0x0352, 0x0000},
+{0x0354, 0x1122},
+{0x0356, 0x3344},
+{0x0358, 0x0806},
+{0x035a, 0x0228},
+{0x035c, 0xa000},
+{0x035e, 0x0000},
+{0x0360, 0x0013},
+{0x0362, 0x0e80},
+{0x0364, 0x0a00},
+{0x0366, 0x4000},
+{0x0368, 0x0026},
+{0x036a, 0x1a00},
+{0x036c, 0x0800},
+{0x036e, 0x0400},
+{0x0370, 0x0fa0},
+{0x0372, 0x0640},
+{0x0374, 0x0b0b},
+{0x0376, 0x0000},
+{0x0378, 0x0000},
+{0x037a, 0x0010},
+{0x037c, 0x01aa},
+{0x037e, 0x2000},
+{0x0380, 0x0000},
+{0x0382, 0x0200},
+{0x0384, 0x7800},
+{0x0386, 0x0280},
+{0x0388, 0x001e},
+{0x038a, 0x003c},
+{0x038c, 0x0f01},
+{0x038e, 0x08a1},
+{0x0390, 0x0040},
+{0x0392, 0x0000},
+{0x0394, 0x0000},
+{0x0396, 0x0000},
+{0x0398, 0x0000},
+{0x039a, 0x0000},
+{0x039c, 0x0000},
+{0x039e, 0x0000},
+{0x03a0, 0x0000},
+{0x03a2, 0x0020},
+{0x03a4, 0x0002},
+{0x03a6, 0x0064},
+{0x03a8, 0x000f},
+{0x03aa, 0x3333},
+{0x03ac, 0x7fbe},
+{0x03ae, 0x3333},
+{0x03b0, 0x7eb8},
+{0x03b2, 0x7fff},
+{0x03b4, 0x0001},
+{0x03b6, 0x7fdf},
+{0x03b8, 0x0002},
+{0x03ba, 0x7333},
+{0x03bc, 0x7333},
+{0x03be, 0x003c},
+{0x03c0, 0x0000},
+{0x03c2, 0x6666},
+{0x03c4, 0x0001},
+{0x03c6, 0x6666},
+{0x03c8, 0x5a9d},
+{0x03ca, 0x0100},
+{0x03cc, 0x0002},
+{0x03ce, 0x0000},
+{0x03d0, 0x0000},
+{0x03d2, 0x7213},
+{0x03d4, 0x0002},
+{0x03d6, 0x4000},
+{0x03d8, 0x0ccc},
+{0x03da, 0x0000},
+{0x03dc, 0x0000},
+{0x03de, 0x0000},
+{0x03e0, 0x0000},
+{0x03e2, 0x0000},
+{0x03e4, 0x0000},
+{0x03e6, 0x0002},
+{0x03e8, 0x01f0},
+{0x03ea, 0x0078},
+{0x03ec, 0x0032},
+{0x03ee, 0x0004},
+{0x03f0, 0x01f0},
+{0x03f2, 0x0078},
+{0x03f4, 0x0032},
+{0x03f6, 0x087a},
+{0x03f8, 0x0100},
+{0x03fa, 0x0190},
+{0x03fc, 0x0004},
+{0x03fe, 0x0017},
+{0x0400, 0x0400},
+{0x0402, 0x0320},
+{0x0404, 0x0033},
+{0x0406, 0x0000},
+{0x0408, 0x0b27},
+{0x040a, 0x1358},
+{0x040c, 0x0c52},
+{0x040e, 0x1560},
+{0x0410, 0x0da2},
+{0x0412, 0x17a2},
+{0x0414, 0x0f0e},
+{0x0416, 0x1a21},
+{0x0418, 0x123d},
+{0x041a, 0x170a},
+{0x041c, 0x0000},
+{0x041e, 0x0000},
+{0x0420, 0x0000},
+{0x0422, 0x0000},
+{0x0424, 0x0000},
+{0x0426, 0x0000},
+{0x0428, 0x0190},
+{0x042a, 0x0190},
+{0x042c, 0x0000},
+{0x042e, 0x0000},
+{0x0430, 0x0000},
+{0x0432, 0x0000},
+{0x0434, 0x0000},
+{0x0436, 0x0000},
+{0x0438, 0x0000},
+{0x043a, 0x7fff},
+{0x043c, 0x0001},
+{0x043e, 0x000a},
+{0x0440, 0x0001},
+{0x0442, 0x0000},
+{0x0444, 0x0000},
+{0x0446, 0x0000},
+{0x0448, 0x0000},
+{0x044a, 0x0000},
+{0x044c, 0x0000},
+{0x044e, 0x0000},
+{0x0450, 0x0000},
+{0x0452, 0x0000},
+{0x0454, 0x0000},
+{0x0456, 0x0000},
+{0x0458, 0x0000},
+{0x045a, 0x0000},
+{0x045c, 0x0000},
+{0x045e, 0x3000},
+{0x0460, 0x3fff},
+{0x0462, 0x020c},
+{0x0464, 0x0000},
+{0x0466, 0x0000},
+{0x0468, 0x0000},
+{0x046a, 0x0000},
+{0x046c, 0x0000},
+{0x046e, 0x0000},
+{0x0470, 0x0000},
+{0x0472, 0x0000},
+{0x0474, 0x0000},
+{0x0476, 0x0000},
+{0x0478, 0x0000},
+{0x047a, 0x0000},
+{0x047c, 0x0000},
+{0x047e, 0x0000},
+{0x0480, 0x0000},
+{0x0482, 0x0000},
+{0x0484, 0x0000},
+{0x0486, 0x0000},
+{0x0488, 0x0064},
+{0x048a, 0x000f},
+{0x048c, 0x0000},
+{0x048e, 0x0036},
+{0x0490, 0x0000},
+{0x0492, 0x03e8},
+{0x0494, 0x0064},
+{0x0496, 0x1999},
+{0x0498, 0x0ccc},
+{0x049a, 0x0005},
+{0x049c, 0x0019},
+{0x049e, 0x4026},
+{0x04a0, 0x5a67},
+{0x04a2, 0x4026},
+{0x04a4, 0x7fb2},
+{0x04a6, 0x0104},
+{0x04a8, 0x0ccc},
+{0x04aa, 0x0ccc},
+{0x04ac, 0x78d6},
+{0x04ae, 0x0d8f},
+{0x04b0, 0x0004},
+{0x04b2, 0x0000},
+{0x04b4, 0x0000},
+{0x04b6, 0x0000},
+{0x04b8, 0x0000},
+{0x04ba, 0x0000},
+{0x04bc, 0x0000},
+{0x04be, 0x0000},
+{0x04c0, 0x0000},
+{0x04c2, 0x0000},
+{0x04c4, 0x0000},
+{0x04c6, 0x0000},
+{0x04c8, 0x0000},
+{0x04ca, 0x0000},
+{0x04cc, 0x0000},
+{0x04ce, 0x0000},
+{0x04d0, 0x0000},
+{0x04d2, 0x0000},
+{0x04d4, 0x0000},
+{0x04d6, 0x0000},
+{0x04d8, 0x0000},
+{0x04da, 0x0000},
+{0x04dc, 0x0000},
+{0x04de, 0x0000},
+{0x04e0, 0x0000},
+{0x04e2, 0x0000},
+{0x04e4, 0x0000},
+{0x04e6, 0x0000},
+{0x04e8, 0x0000},
+{0x04ea, 0x0000},
+{0x04ec, 0x0000},
+{0x04ee, 0x0000},
+{0x04f0, 0x0000},
+{0x04f2, 0x0000},
+{0x04f4, 0x0000},
+{0x04f6, 0x0000},
+{0x04f8, 0x0000},
+{0x04fa, 0x0000},
+{0x04fc, 0x0000},
+{0x04fe, 0x0000},
+{0x0500, 0x7fff},
+{0x0502, 0x7fff},
+{0x0504, 0x7fff},
+{0x0506, 0x7fff},
+{0x0508, 0x7fff},
+{0x050a, 0x7fff},
+{0x050c, 0x7fff},
+{0x050e, 0x7fff},
+{0x0510, 0x7fff},
+{0x0512, 0x7fff},
+{0x0514, 0x7fff},
+{0x0516, 0x7fff},
+{0x0518, 0x7fff},
+{0x051a, 0x7fff},
+{0x051c, 0x7fff},
+{0x051e, 0x7fff},
+{0x0520, 0x7fff},
+{0x0522, 0x7fff},
+{0x0524, 0x7fff},
+{0x0526, 0x7fff},
+{0x0528, 0x7fff},
+{0x052a, 0x7fff},
+{0x052c, 0x7fff},
+{0x052e, 0x7fff},
+{0x0530, 0x7fff},
+{0x0532, 0x7fff},
+{0x0534, 0x7fff},
+{0x0536, 0x7fff},
+{0x0538, 0x7fff},
+{0x053a, 0x7fff},
+{0x053c, 0x7fff},
+{0x053e, 0x7fff},
+{0x0540, 0x7fff},
+{0x0542, 0x7fff},
+{0x0544, 0x7fff},
+{0x0546, 0x7fff},
+{0x0548, 0x7fff},
+{0x054a, 0x7fff},
+{0x054c, 0x7fff},
+{0x054e, 0x7fff},
+{0x0550, 0x7fff},
+{0x0552, 0x7fff},
+{0x0554, 0x7fff},
+{0x0556, 0x7fff},
+{0x0558, 0x7fff},
+{0x055a, 0x7fff},
+{0x055c, 0x7fff},
+{0x055e, 0x7fff},
+{0x0560, 0x7fff},
+{0x0562, 0x7fff},
+{0x0564, 0x7fff},
+{0x0566, 0x7fff},
+{0x0568, 0x7fff},
+{0x056a, 0x7fff},
+{0x056c, 0x7fff},
+{0x056e, 0x7fff},
+{0x0570, 0x7fff},
+{0x0572, 0x7fff},
+{0x0574, 0x7fff},
+{0x0576, 0x7fff},
+{0x0578, 0x7fff},
+{0x057a, 0x7fff},
+{0x057c, 0x7fff},
+{0x057e, 0x7fff},
+{0x0580, 0x7fff},
+{0x0582, 0x7fff},
+{0x0584, 0x7fff},
+{0x0586, 0x7fff},
+{0x0588, 0x7fff},
+{0x058a, 0x7fff},
+{0x058c, 0x7fff},
+{0x058e, 0x7fff},
+{0x0590, 0x7fff},
+{0x0592, 0x7fff},
+{0x0594, 0x7fff},
+{0x0596, 0x7fff},
+{0x0598, 0x7fff},
+{0x059a, 0x7fff},
+{0x059c, 0x7fff},
+{0x059e, 0x7fff},
+{0x05a0, 0x7fff},
+{0x05a2, 0x7fff},
+{0x05a4, 0x7fff},
+{0x05a6, 0x7fff},
+{0x05a8, 0x7fff},
+{0x05aa, 0x7fff},
+{0x05ac, 0x7fff},
+{0x05ae, 0x7fff},
+{0x05b0, 0x7fff},
+{0x05b2, 0x7fff},
+{0x05b4, 0x7fff},
+{0x05b6, 0x7fff},
+{0x05b8, 0x7fff},
+{0x05ba, 0x7fff},
+{0x05bc, 0x7fff},
+{0x05be, 0x7fff},
+{0x05c0, 0x7fff},
+{0x05c2, 0x7fff},
+{0x05c4, 0x7fff},
+{0x05c6, 0x7fff},
+{0x05c8, 0x7fff},
+{0x05ca, 0x7fff},
+{0x05cc, 0x7fff},
+{0x05ce, 0x7fff},
+{0x05d0, 0x7fff},
+{0x05d2, 0x7fff},
+{0x05d4, 0x7fff},
+{0x05d6, 0x7fff},
+{0x05d8, 0x7fff},
+{0x05da, 0x7fff},
+{0x05dc, 0x7fff},
+{0x05de, 0x7fff},
+{0x05e0, 0x7fff},
+{0x05e2, 0x7fff},
+{0x05e4, 0x7fff},
+{0x05e6, 0x7fff},
+{0x05e8, 0x7fff},
+{0x05ea, 0x7fff},
+{0x05ec, 0x7fff},
+{0x05ee, 0x7fff},
+{0x05f0, 0x7fff},
+{0x05f2, 0x7fff},
+{0x05f4, 0x7fff},
+{0x05f6, 0x7fff},
+{0x05f8, 0x7fff},
+{0x05fa, 0x7fff},
+{0x05fc, 0x7fff},
+{0x05fe, 0x7fff},
+{0x0600, 0x0000},
+{0x0602, 0x0000},
+{0x0604, 0x0000},
+{0x0606, 0x0000},
+{0x0608, 0x0000},
+{0x060a, 0x0000},
+{0x060c, 0x0000},
+{0x060e, 0x0000},
+{0x0610, 0x0000},
+{0x0612, 0x0000},
+{0x0614, 0x0000},
+{0x0616, 0x0000},
+{0x0618, 0x0000},
+{0x061a, 0x0000},
+{0x061c, 0x0000},
+{0x061e, 0x0000},
+{0x0620, 0x0000},
+{0x0622, 0x0000},
+{0x0624, 0x0000},
+{0x0626, 0x0000},
+{0x0628, 0x0000},
+{0x062a, 0x0000},
+{0x062c, 0x0000},
+{0x062e, 0x0000},
+{0x0630, 0x0000},
+{0x0632, 0x0000},
+{0x0634, 0x0000},
+{0x0636, 0x0000},
+{0x0638, 0x0000},
+{0x063a, 0x0000},
+{0x063c, 0x0000},
+{0x063e, 0x0000},
+{0x0640, 0x0000},
+{0x0642, 0x0000},
+{0x0644, 0x0000},
+{0x0646, 0x0000},
+{0x0648, 0x0000},
+{0x064a, 0x0000},
+{0x064c, 0x0000},
+{0x064e, 0x0000},
+{0x0650, 0x0000},
+{0x0652, 0x0000},
+{0x0654, 0x0000},
+{0x0656, 0x0000},
+{0x0658, 0x0000},
+{0x065a, 0x0000},
+{0x065c, 0x0000},
+{0x065e, 0x0000},
+{0x0660, 0x0000},
+{0x0662, 0x0000},
+{0x0664, 0x0000},
+{0x0666, 0x0000},
+{0x0668, 0x0000},
+{0x066a, 0x0000},
+{0x066c, 0x0000},
+{0x066e, 0x0000},
+{0x0670, 0x0000},
+{0x0672, 0x0000},
+{0x0674, 0x0000},
+{0x0676, 0x0000},
+{0x0678, 0x0000},
+{0x067a, 0x0000},
+{0x067c, 0x0000},
+{0x067e, 0x0000},
+{0x0680, 0x0000},
+{0x0682, 0x0000},
+{0x0684, 0x0000},
+{0x0686, 0x0000},
+{0x0688, 0x0000},
+{0x068a, 0x0000},
+{0x068c, 0x0000},
+{0x068e, 0x0000},
+{0x0690, 0x0000},
+{0x0692, 0x0000},
+{0x0694, 0x0000},
+{0x0696, 0x0000},
+{0x0698, 0x0000},
+{0x069a, 0x0000},
+{0x069c, 0x0000},
+{0x069e, 0x0000},
+{0x06a0, 0x0000},
+{0x06a2, 0x0000},
+{0x06a4, 0x0000},
+{0x06a6, 0x0000},
+{0x06a8, 0x0000},
+{0x06aa, 0x0000},
+{0x06ac, 0x0000},
+{0x06ae, 0x0000},
+{0x06b0, 0x0000},
+{0x06b2, 0x0000},
+{0x06b4, 0x0000},
+{0x06b6, 0x0000},
+{0x06b8, 0x0000},
+{0x06ba, 0x0000},
+{0x06bc, 0x0000},
+{0x06be, 0x0000},
+{0x06c0, 0x0000},
+{0x06c2, 0x0000},
+{0x06c4, 0x0000},
+{0x06c6, 0x0000},
+{0x06c8, 0x0000},
+{0x06ca, 0x0000},
+{0x06cc, 0x0000},
+{0x06ce, 0x0000},
+{0x06d0, 0x0000},
+{0x06d2, 0x0000},
+{0x06d4, 0x0000},
+{0x06d6, 0x0000},
+{0x06d8, 0x0000},
+{0x06da, 0x0000},
+{0x06dc, 0x0000},
+{0x06de, 0x0000},
+{0x06e0, 0x0000},
+{0x06e2, 0x0000},
+{0x06e4, 0x0000},
+{0x06e6, 0x0000},
+{0x06e8, 0x0000},
+{0x06ea, 0x0000},
+{0x06ec, 0x0000},
+{0x06ee, 0x0000},
+{0x06f0, 0x0000},
+{0x06f2, 0x0000},
+{0x06f4, 0x0000},
+{0x06f6, 0x0000},
+{0x06f8, 0x0000},
+{0x06fa, 0x0000},
+{0x06fc, 0x0000},
+{0x06fe, 0x0000},
+{0x0700, 0x0000},
+{0x0702, 0x0000},
+{0x0704, 0x0000},
+{0x0706, 0x0000},
+{0x0708, 0x0000},
+{0x070a, 0x0000},
+{0x070c, 0x0000},
+{0x070e, 0x0000},
+{0x0710, 0x0000},
+{0x0712, 0x0000},
+{0x0714, 0x0000},
+{0x0716, 0x0000},
+{0x0718, 0x0000},
+{0x071a, 0x0000},
+{0x071c, 0x0000},
+{0x071e, 0x0000},
+{0x0720, 0x0000},
+{0x0722, 0x0000},
+{0x0724, 0x0000},
+{0x0726, 0x0000},
+{0x0728, 0x0000},
+{0x072a, 0x0000},
+{0x072c, 0x0000},
+{0x072e, 0x0000},
+{0x0730, 0x0000},
+{0x0732, 0x0000},
+{0x0734, 0x0000},
+{0x0736, 0x0000},
+{0x0738, 0x0000},
+{0x073a, 0x0000},
+{0x073c, 0x0000},
+{0x073e, 0x0000},
+{0x0740, 0x0000},
+{0x0742, 0x0000},
+{0x0744, 0x0000},
+{0x0746, 0x0000},
+{0x0748, 0x0000},
+{0x074a, 0x0000},
+{0x074c, 0x0000},
+{0x074e, 0x0000},
+{0x0750, 0x0000},
+{0x0752, 0x0000},
+{0x0754, 0x0000},
+{0x0756, 0x0000},
+{0x0758, 0x0000},
+{0x075a, 0x0000},
+{0x075c, 0x0000},
+{0x075e, 0x0000},
+{0x0760, 0x0000},
+{0x0762, 0x0000},
+{0x0764, 0x0000},
+{0x0766, 0x0000},
+{0x0768, 0x0000},
+{0x076a, 0x0000},
+{0x076c, 0x0000},
+{0x076e, 0x0000},
+{0x0770, 0x0000},
+{0x0772, 0x0000},
+{0x0774, 0x0000},
+{0x0776, 0x0000},
+{0x0778, 0x0000},
+{0x077a, 0x0000},
+{0x077c, 0x0000},
+{0x077e, 0x0000},
+{0x0780, 0x0000},
+{0x0782, 0x0000},
+{0x0784, 0x0000},
+{0x0786, 0x0000},
+{0x0788, 0x0000},
+{0x078a, 0x0000},
+{0x078c, 0x0000},
+{0x078e, 0x0000},
+{0x0790, 0x0000},
+{0x0792, 0x0000},
+{0x0794, 0x0000},
+{0x0796, 0x0000},
+{0x0798, 0x0000},
+{0x079a, 0x0000},
+{0x079c, 0x0000},
+{0x079e, 0x0000},
+{0x07a0, 0x0000},
+{0x07a2, 0x0000},
+{0x07a4, 0x0000},
+{0x07a6, 0x0000},
+{0x07a8, 0x0000},
+{0x07aa, 0x0000},
+{0x07ac, 0x0000},
+{0x07ae, 0x0000},
+{0x07b0, 0x0000},
+{0x07b2, 0x0000},
+{0x07b4, 0x0000},
+{0x07b6, 0x0000},
+{0x07b8, 0x0000},
+{0x07ba, 0x0000},
+{0x07bc, 0x0000},
+{0x07be, 0x0000},
+{0x07c0, 0x0000},
+{0x07c2, 0x0000},
+{0x07c4, 0x0000},
+{0x07c6, 0x0000},
+{0x07c8, 0x0000},
+{0x07ca, 0x0000},
+{0x07cc, 0x0000},
+{0x07ce, 0x0000},
+{0x07d0, 0x0000},
+{0x07d2, 0x0000},
+{0x07d4, 0x0000},
+{0x07d6, 0x0000},
+{0x07d8, 0x0000},
+{0x07da, 0x0000},
+{0x07dc, 0x0000},
+{0x07de, 0x0000},
+{0x07e0, 0x0000},
+{0x07e2, 0x0000},
+{0x07e4, 0x0000},
+{0x07e6, 0x0000},
+{0x07e8, 0x0000},
+{0x07ea, 0x0000},
+{0x07ec, 0x0000},
+{0x07ee, 0x0000},
+{0x07f0, 0x0000},
+{0x07f2, 0x0000},
+{0x07f4, 0x0000},
+{0x07f6, 0x0000},
+{0x07f8, 0x0000},
+{0x07fa, 0x0000},
+{0x07fc, 0x0000},
+{0x07fe, 0x0000},
+{0x0800, 0x0000},
+{0x0802, 0x0000},
+{0x0804, 0x0000},
+{0x0806, 0x0000},
+{0x0808, 0x0000},
+{0x080a, 0x0000},
+{0x080c, 0x0000},
+{0x080e, 0x0000},
+{0x0810, 0x0000},
+{0x0812, 0x0000},
+{0x0814, 0x0000},
+{0x0816, 0x0000},
+{0x0818, 0x0000},
+{0x081a, 0x0000},
+{0x081c, 0x0000},
+{0x081e, 0x0000},
+{0x0820, 0x0000},
+{0x0822, 0x0000},
+{0x0824, 0x0000},
+{0x0826, 0x0000},
+{0x0828, 0x0000},
+{0x082a, 0x0000},
+{0x082c, 0x0000},
+{0x082e, 0x0000},
+{0x0830, 0x0000},
+{0x0832, 0x0000},
+{0x0834, 0x0000},
+{0x0836, 0x0000},
+{0x0838, 0x0000},
+{0x083a, 0x0000},
+{0x083c, 0x0000},
+{0x083e, 0x0000},
+{0x0840, 0x0000},
+{0x0842, 0x0000},
+{0x0844, 0x0000},
+{0x0846, 0x0000},
+{0x0848, 0x0000},
+{0x084a, 0x0000},
+{0x084c, 0x0000},
+{0x084e, 0x0000},
+{0x0850, 0x0000},
+{0x0852, 0x0000},
+{0x0854, 0x0000},
+{0x0856, 0x0000},
+{0x0858, 0x0000},
+{0x085a, 0x0000},
+{0x085c, 0x0000},
+{0x085e, 0x0000},
+{0x0860, 0x0000},
+{0x0862, 0x0000},
+{0x0864, 0x0000},
+{0x0866, 0x0000},
+{0x0868, 0x0000},
+{0x086a, 0x0000},
+{0x086c, 0x0000},
+{0x086e, 0x0000},
+{0x0870, 0x0000},
+{0x0872, 0x0000},
+{0x0874, 0x0000},
+{0x0876, 0x0000},
+{0x0878, 0x0000},
+{0x087a, 0x0000},
+{0x087c, 0x0000},
+{0x087e, 0x0000},
+{0x0880, 0x0000},
+{0x0882, 0x0000},
+{0x0884, 0x0000},
+{0x0886, 0x0000},
+{0x0888, 0x0000},
+{0x088a, 0x0000},
+{0x088c, 0x0000},
+{0x088e, 0x0000},
+{0x0890, 0x0000},
+{0x0892, 0x0000},
+{0x0894, 0x0000},
+{0x0896, 0x0000},
+{0x0898, 0x0000},
+{0x089a, 0x0000},
+{0x089c, 0x0000},
+{0x089e, 0x0000},
+{0x08a0, 0x0000},
+{0x08a2, 0x0000},
+{0x08a4, 0x0000},
+{0x08a6, 0x0000},
+{0x08a8, 0x0000},
+{0x08aa, 0x0000},
+{0x08ac, 0x0000},
+{0x08ae, 0x0000},
+{0x08b0, 0x0000},
+{0x08b2, 0x0000},
+{0x08b4, 0x0000},
+{0x08b6, 0x0000},
+{0x08b8, 0x0000},
+{0x08ba, 0x0000},
+{0x08bc, 0x0000},
+{0x08be, 0x0000},
+{0x08c0, 0x0000},
+{0x08c2, 0x0000},
+{0x08c4, 0x0000},
+{0x08c6, 0x0000},
+{0x08c8, 0x0000},
+{0x08ca, 0x0000},
+{0x08cc, 0x0000},
+{0x08ce, 0x0000},
+{0x08d0, 0x0000},
+{0x08d2, 0x0000},
+{0x08d4, 0x0000},
+{0x08d6, 0x0000},
+{0x08d8, 0x0000},
+{0x08da, 0x0000},
+{0x08dc, 0x0000},
+{0x08de, 0x0000},
+{0x08e0, 0x0000},
+{0x08e2, 0x0000},
+{0x08e4, 0x0000},
+{0x08e6, 0x0000},
+{0x08e8, 0x0000},
+{0x08ea, 0x0000},
+{0x08ec, 0x0000},
+{0x08ee, 0x0000},
+{0x08f0, 0x0000},
+{0x08f2, 0x0000},
+{0x08f4, 0x0000},
+{0x08f6, 0x0000},
+{0x08f8, 0x0000},
+{0x08fa, 0x0000},
+{0x08fc, 0x0000},
+{0x08fe, 0x0000},
+{0x0900, 0x0000},
+{0x0902, 0x0000},
+{0x0904, 0x0000},
+{0x0906, 0x0000},
+{0x0908, 0x0000},
+{0x090a, 0x0000},
+{0x090c, 0x0000},
+{0x090e, 0x0000},
+{0x0910, 0x0000},
+{0x0912, 0x0000},
+{0x0914, 0x0000},
+{0x0916, 0x0000},
+{0x0918, 0x0000},
+{0x091a, 0x0000},
+{0x091c, 0x0000},
+{0x091e, 0x0000},
+{0x0920, 0x0000},
+{0x0922, 0x0000},
+{0x0924, 0x0000},
+{0x0926, 0x0000},
+{0x0928, 0x0000},
+{0x092a, 0x0000},
+{0x092c, 0x0000},
+{0x092e, 0x0000},
+{0x0930, 0x0000},
+{0x0932, 0x0000},
+{0x0934, 0x0000},
+{0x0936, 0x0000},
+{0x0938, 0x0000},
+{0x093a, 0x0000},
+{0x093c, 0x0000},
+{0x093e, 0x0000},
+{0x0940, 0x0000},
+{0x0942, 0x0000},
+{0x0944, 0x0000},
+{0x0946, 0x0000},
+{0x0948, 0x0000},
+{0x094a, 0x0000},
+{0x094c, 0x0000},
+{0x094e, 0x0000},
+{0x0950, 0x0000},
+{0x0952, 0x0000},
+{0x0954, 0x0000},
+{0x0956, 0x0000},
+{0x0958, 0x0000},
+{0x095a, 0x0000},
+{0x095c, 0x0000},
+{0x095e, 0x0000},
+{0x0960, 0x0000},
+{0x0962, 0x0000},
+{0x0964, 0x0000},
+{0x0966, 0x0000},
+{0x0968, 0x0000},
+{0x096a, 0x0000},
+{0x096c, 0x0000},
+{0x096e, 0x0000},
+{0x0970, 0x0000},
+{0x0972, 0x0000},
+{0x0974, 0x0000},
+{0x0976, 0x0000},
+{0x0978, 0x0000},
+{0x097a, 0x0000},
+{0x097c, 0x0000},
+{0x097e, 0x0000},
+{0x0980, 0x0000},
+{0x0982, 0x0000},
+{0x0984, 0x0000},
+{0x0986, 0x0000},
+{0x0988, 0x0000},
+{0x098a, 0x0000},
+{0x098c, 0x0000},
+{0x098e, 0x0000},
+{0x0990, 0x0000},
+{0x0992, 0x0000},
+{0x0994, 0x0000},
+{0x0996, 0x0000},
+{0x0998, 0x0000},
+{0x099a, 0x0000},
+{0x099c, 0x0000},
+{0x099e, 0x0000},
+{0x09a0, 0x0000},
+{0x09a2, 0x0000},
+{0x09a4, 0x0000},
+{0x09a6, 0x0000},
+{0x09a8, 0x0000},
+{0x09aa, 0x0000},
+{0x09ac, 0x0000},
+{0x09ae, 0x0000},
+{0x09b0, 0x0000},
+{0x09b2, 0x0000},
+{0x09b4, 0x0000},
+{0x09b6, 0x0000},
+{0x09b8, 0x0000},
+{0x09ba, 0x0000},
+{0x09bc, 0x0000},
+{0x09be, 0x0000},
+{0x09c0, 0x0000},
+{0x09c2, 0x0000},
+{0x09c4, 0x0000},
+{0x09c6, 0x0000},
+{0x09c8, 0x0000},
+{0x09ca, 0x0000},
+{0x09cc, 0x0000},
+{0x09ce, 0x0000},
+{0x09d0, 0x0000},
+{0x09d2, 0x0000},
+{0x09d4, 0x0000},
+{0x09d6, 0x0000},
+{0x09d8, 0x0000},
+{0x09da, 0x0000},
+{0x09dc, 0x0000},
+{0x09de, 0x0000},
+{0x09e0, 0x0000},
+{0x09e2, 0x0000},
+{0x09e4, 0x0000},
+{0x09e6, 0x0000},
+{0x09e8, 0x0000},
+{0x09ea, 0x0000},
+{0x09ec, 0x0000},
+{0x09ee, 0x0000},
+{0x09f0, 0x0000},
+{0x09f2, 0x0000},
+{0x09f4, 0x0000},
+{0x09f6, 0x0000},
+{0x09f8, 0x0000},
+{0x09fa, 0x0000},
+{0x09fc, 0x4000},
+{0x09fe, 0x0000}
+};
+#endif /**__SPEAK_CONFIG_H_**/
\ No newline at end of file
diff --git a/legacy_hal/inc/speak_off_config.h b/legacy_hal/inc/speak_off_config.h
new file mode 100755
index 0000000..898e594
--- /dev/null
+++ b/legacy_hal/inc/speak_off_config.h
@@ -0,0 +1,1029 @@
+#ifndef __SPEAK_OFF_CONFIG_H_
+#define __SPEAK_OFF_CONFIG_H_
+const unsigned short speak_off_config_array[][2] = {
+{0x0200, 0x0000},
+{0x0202, 0x0c81},
+{0x0204, 0x0010},
+{0x0206, 0x0000},
+{0x0208, 0x0000},
+{0x020a, 0x0000},
+{0x020c, 0x0000},
+{0x020e, 0x0000},
+{0x0210, 0x000d},
+{0x0212, 0x0000},
+{0x0214, 0x000e},
+{0x0216, 0x0000},
+{0x0218, 0x0000},
+{0x021a, 0x0000},
+{0x021c, 0x0000},
+{0x021e, 0x000e},
+{0x0220, 0x0000},
+{0x0222, 0x0000},
+{0x0224, 0x0001},
+{0x0226, 0x0a09},
+{0x0228, 0x0000},
+{0x022a, 0x0000},
+{0x022c, 0x0000},
+{0x022e, 0x0000},
+{0x0230, 0x0000},
+{0x0232, 0x0000},
+{0x0234, 0x0000},
+{0x0236, 0x0000},
+{0x0238, 0x0000},
+{0x023a, 0x0000},
+{0x023c, 0x0000},
+{0x023e, 0x0000},
+{0x0240, 0x0000},
+{0x0242, 0x0000},
+{0x0244, 0x0000},
+{0x0246, 0x0000},
+{0x0248, 0x0000},
+{0x024a, 0x0000},
+{0x024c, 0x0004},
+{0x024e, 0x0000},
+{0x0250, 0x0000},
+{0x0252, 0x0000},
+{0x0254, 0x0000},
+{0x0256, 0x0000},
+{0x0258, 0x0000},
+{0x025a, 0x0000},
+{0x025c, 0x0000},
+{0x025e, 0x0000},
+{0x0260, 0x0000},
+{0x0262, 0x01f2},
+{0x0264, 0x40c0},
+{0x0266, 0x0000},
+{0x0268, 0x0100},
+{0x026a, 0x0102},
+{0x026c, 0x0004},
+{0x026e, 0x0006},
+{0x0270, 0x0000},
+{0x0272, 0x0000},
+{0x0274, 0x0000},
+{0x0276, 0x0000},
+{0x0278, 0xc004},
+{0x027a, 0x03f6},
+{0x027c, 0xc0c0},
+{0x027e, 0x0000},
+{0x0280, 0x0100},
+{0x0282, 0x0101},
+{0x0284, 0x0004},
+{0x0286, 0x0006},
+{0x0288, 0x0000},
+{0x028a, 0x0000},
+{0x028c, 0x0000},
+{0x028e, 0x0000},
+{0x0290, 0x0000},
+{0x0292, 0x0000},
+{0x0294, 0x0000},
+{0x0296, 0x0000},
+{0x0298, 0x0000},
+{0x029a, 0x0000},
+{0x029c, 0x0000},
+{0x029e, 0x0000},
+{0x02a0, 0x0000},
+{0x02a2, 0x0000},
+{0x02a4, 0x0004},
+{0x02a6, 0x0000},
+{0x02a8, 0x0000},
+{0x02aa, 0x0000},
+{0x02ac, 0x0000},
+{0x02ae, 0x0000},
+{0x02b0, 0x0000},
+{0x02b2, 0x0002},
+{0x02b4, 0x0000},
+{0x02b6, 0x0000},
+{0x02b8, 0x815e},
+{0x02ba, 0xfff1},
+{0x02bc, 0x81e0},
+{0x02be, 0xfff1},
+{0x02c0, 0x03ec},
+{0x02c2, 0xfff6},
+{0x02c4, 0x0000},
+{0x02c6, 0x0000},
+{0x02c8, 0x0000},
+{0x02ca, 0x0000},
+{0x02cc, 0x0000},
+{0x02ce, 0x0000},
+{0x02d0, 0x0000},
+{0x02d2, 0x0000},
+{0x02d4, 0x0000},
+{0x02d6, 0x0000},
+{0x02d8, 0x0000},
+{0x02da, 0x0000},
+{0x02dc, 0x0000},
+{0x02de, 0x0000},
+{0x02e0, 0x0000},
+{0x02e2, 0x0000},
+{0x02e4, 0x0000},
+{0x02e6, 0x0000},
+{0x02e8, 0x0000},
+{0x02ea, 0x0000},
+{0x02ec, 0x0000},
+{0x02ee, 0x0000},
+{0x02f0, 0x0000},
+{0x02f2, 0x0000},
+{0x02f4, 0x0000},
+{0x02f6, 0x0000},
+{0x02f8, 0x0000},
+{0x02fa, 0x0000},
+{0x02fc, 0x0000},
+{0x02fe, 0x0000},
+{0x0300, 0x4008},
+{0x0302, 0x1000},
+{0x0304, 0x0000},
+{0x0306, 0x0000},
+{0x0308, 0x0000},
+{0x030a, 0x0040},
+{0x030c, 0x0810},
+{0x030e, 0xb001},
+{0x0310, 0x9393},
+{0x0312, 0x7f00},
+{0x0314, 0x0000},
+{0x0316, 0x7fff},
+{0x0318, 0x0000},
+{0x031a, 0x0000},
+{0x031c, 0x7fff},
+{0x031e, 0x7fff},
+{0x0320, 0x7fff},
+{0x0322, 0x7fff},
+{0x0324, 0x0200},
+{0x0326, 0x001f},
+{0x0328, 0x3040},
+{0x032a, 0x010c},
+{0x032c, 0x0006},
+{0x032e, 0x0a1f},
+{0x0330, 0x08a1},
+{0x0332, 0x003f},
+{0x0334, 0x0020},
+{0x0336, 0x0000},
+{0x0338, 0x4801},
+{0x033a, 0x0096},
+{0x033c, 0x0002},
+{0x033e, 0x0004},
+{0x0340, 0x0000},
+{0x0342, 0x0800},
+{0x0344, 0x0000},
+{0x0346, 0x0005},
+{0x0348, 0x0000},
+{0x034a, 0x0000},
+{0x034c, 0x0000},
+{0x034e, 0x0000},
+{0x0350, 0x0000},
+{0x0352, 0x0000},
+{0x0354, 0x1122},
+{0x0356, 0x3344},
+{0x0358, 0x0806},
+{0x035a, 0x0228},
+{0x035c, 0xa000},
+{0x035e, 0x0000},
+{0x0360, 0x0013},
+{0x0362, 0x0e80},
+{0x0364, 0x0a00},
+{0x0366, 0x4000},
+{0x0368, 0x0026},
+{0x036a, 0x1a00},
+{0x036c, 0x0800},
+{0x036e, 0x0400},
+{0x0370, 0x0fa0},
+{0x0372, 0x0640},
+{0x0374, 0x0b0b},
+{0x0376, 0x0000},
+{0x0378, 0x0000},
+{0x037a, 0x0010},
+{0x037c, 0x01aa},
+{0x037e, 0x2000},
+{0x0380, 0x0000},
+{0x0382, 0x0200},
+{0x0384, 0x7800},
+{0x0386, 0x0280},
+{0x0388, 0x001e},
+{0x038a, 0x003c},
+{0x038c, 0x0f01},
+{0x038e, 0x08a1},
+{0x0390, 0x0040},
+{0x0392, 0x0000},
+{0x0394, 0x0000},
+{0x0396, 0x0000},
+{0x0398, 0x0000},
+{0x039a, 0x0000},
+{0x039c, 0x0000},
+{0x039e, 0x0000},
+{0x03a0, 0x0000},
+{0x03a2, 0x0020},
+{0x03a4, 0x0002},
+{0x03a6, 0x0064},
+{0x03a8, 0x000f},
+{0x03aa, 0x3333},
+{0x03ac, 0x7fbe},
+{0x03ae, 0x3333},
+{0x03b0, 0x7eb8},
+{0x03b2, 0x7fff},
+{0x03b4, 0x0001},
+{0x03b6, 0x7fdf},
+{0x03b8, 0x0002},
+{0x03ba, 0x7333},
+{0x03bc, 0x7333},
+{0x03be, 0x003c},
+{0x03c0, 0x0000},
+{0x03c2, 0x6666},
+{0x03c4, 0x0001},
+{0x03c6, 0x6666},
+{0x03c8, 0x5a9d},
+{0x03ca, 0x0100},
+{0x03cc, 0x0002},
+{0x03ce, 0x0000},
+{0x03d0, 0x0000},
+{0x03d2, 0x7213},
+{0x03d4, 0x0002},
+{0x03d6, 0x4000},
+{0x03d8, 0x0ccc},
+{0x03da, 0x0000},
+{0x03dc, 0x0000},
+{0x03de, 0x0000},
+{0x03e0, 0x0000},
+{0x03e2, 0x0000},
+{0x03e4, 0x0000},
+{0x03e6, 0x0002},
+{0x03e8, 0x01f0},
+{0x03ea, 0x0078},
+{0x03ec, 0x0032},
+{0x03ee, 0x0004},
+{0x03f0, 0x01f0},
+{0x03f2, 0x0078},
+{0x03f4, 0x0032},
+{0x03f6, 0x087a},
+{0x03f8, 0x0100},
+{0x03fa, 0x0190},
+{0x03fc, 0x0004},
+{0x03fe, 0x0017},
+{0x0400, 0x0400},
+{0x0402, 0x0320},
+{0x0404, 0x0033},
+{0x0406, 0x0000},
+{0x0408, 0x0b27},
+{0x040a, 0x1358},
+{0x040c, 0x0c52},
+{0x040e, 0x1560},
+{0x0410, 0x0da2},
+{0x0412, 0x17a2},
+{0x0414, 0x0f0e},
+{0x0416, 0x1a21},
+{0x0418, 0x123d},
+{0x041a, 0x170a},
+{0x041c, 0x0000},
+{0x041e, 0x0000},
+{0x0420, 0x0000},
+{0x0422, 0x0000},
+{0x0424, 0x0000},
+{0x0426, 0x0000},
+{0x0428, 0x0190},
+{0x042a, 0x0190},
+{0x042c, 0x0000},
+{0x042e, 0x0000},
+{0x0430, 0x0000},
+{0x0432, 0x0000},
+{0x0434, 0x0000},
+{0x0436, 0x0000},
+{0x0438, 0x0000},
+{0x043a, 0x7fff},
+{0x043c, 0x0001},
+{0x043e, 0x000a},
+{0x0440, 0x0001},
+{0x0442, 0x0000},
+{0x0444, 0x0000},
+{0x0446, 0x0000},
+{0x0448, 0x0000},
+{0x044a, 0x0000},
+{0x044c, 0x0000},
+{0x044e, 0x0000},
+{0x0450, 0x0000},
+{0x0452, 0x0000},
+{0x0454, 0x0000},
+{0x0456, 0x0000},
+{0x0458, 0x0000},
+{0x045a, 0x0000},
+{0x045c, 0x0000},
+{0x045e, 0x3000},
+{0x0460, 0x3fff},
+{0x0462, 0x020c},
+{0x0464, 0x0000},
+{0x0466, 0x0000},
+{0x0468, 0x0000},
+{0x046a, 0x0000},
+{0x046c, 0x0000},
+{0x046e, 0x0000},
+{0x0470, 0x0000},
+{0x0472, 0x0000},
+{0x0474, 0x0000},
+{0x0476, 0x0000},
+{0x0478, 0x0000},
+{0x047a, 0x0000},
+{0x047c, 0x0000},
+{0x047e, 0x0000},
+{0x0480, 0x0000},
+{0x0482, 0x0000},
+{0x0484, 0x0000},
+{0x0486, 0x0000},
+{0x0488, 0x0064},
+{0x048a, 0x000f},
+{0x048c, 0x0000},
+{0x048e, 0x0036},
+{0x0490, 0x0000},
+{0x0492, 0x03e8},
+{0x0494, 0x0064},
+{0x0496, 0x1999},
+{0x0498, 0x0ccc},
+{0x049a, 0x0005},
+{0x049c, 0x0019},
+{0x049e, 0x4026},
+{0x04a0, 0x5a67},
+{0x04a2, 0x4026},
+{0x04a4, 0x7fb2},
+{0x04a6, 0x0104},
+{0x04a8, 0x0ccc},
+{0x04aa, 0x0ccc},
+{0x04ac, 0x78d6},
+{0x04ae, 0x0d8f},
+{0x04b0, 0x0004},
+{0x04b2, 0x0000},
+{0x04b4, 0x0000},
+{0x04b6, 0x0000},
+{0x04b8, 0x0000},
+{0x04ba, 0x0000},
+{0x04bc, 0x0000},
+{0x04be, 0x0000},
+{0x04c0, 0x0000},
+{0x04c2, 0x0000},
+{0x04c4, 0x0000},
+{0x04c6, 0x0000},
+{0x04c8, 0x0000},
+{0x04ca, 0x0000},
+{0x04cc, 0x0000},
+{0x04ce, 0x0000},
+{0x04d0, 0x0000},
+{0x04d2, 0x0000},
+{0x04d4, 0x0000},
+{0x04d6, 0x0000},
+{0x04d8, 0x0000},
+{0x04da, 0x0000},
+{0x04dc, 0x0000},
+{0x04de, 0x0000},
+{0x04e0, 0x0000},
+{0x04e2, 0x0000},
+{0x04e4, 0x0000},
+{0x04e6, 0x0000},
+{0x04e8, 0x0000},
+{0x04ea, 0x0000},
+{0x04ec, 0x0000},
+{0x04ee, 0x0000},
+{0x04f0, 0x0000},
+{0x04f2, 0x0000},
+{0x04f4, 0x0000},
+{0x04f6, 0x0000},
+{0x04f8, 0x0000},
+{0x04fa, 0x0000},
+{0x04fc, 0x0000},
+{0x04fe, 0x0000},
+{0x0500, 0x7fff},
+{0x0502, 0x7fff},
+{0x0504, 0x7fff},
+{0x0506, 0x7fff},
+{0x0508, 0x7fff},
+{0x050a, 0x7fff},
+{0x050c, 0x7fff},
+{0x050e, 0x7fff},
+{0x0510, 0x7fff},
+{0x0512, 0x7fff},
+{0x0514, 0x7fff},
+{0x0516, 0x7fff},
+{0x0518, 0x7fff},
+{0x051a, 0x7fff},
+{0x051c, 0x7fff},
+{0x051e, 0x7fff},
+{0x0520, 0x7fff},
+{0x0522, 0x7fff},
+{0x0524, 0x7fff},
+{0x0526, 0x7fff},
+{0x0528, 0x7fff},
+{0x052a, 0x7fff},
+{0x052c, 0x7fff},
+{0x052e, 0x7fff},
+{0x0530, 0x7fff},
+{0x0532, 0x7fff},
+{0x0534, 0x7fff},
+{0x0536, 0x7fff},
+{0x0538, 0x7fff},
+{0x053a, 0x7fff},
+{0x053c, 0x7fff},
+{0x053e, 0x7fff},
+{0x0540, 0x7fff},
+{0x0542, 0x7fff},
+{0x0544, 0x7fff},
+{0x0546, 0x7fff},
+{0x0548, 0x7fff},
+{0x054a, 0x7fff},
+{0x054c, 0x7fff},
+{0x054e, 0x7fff},
+{0x0550, 0x7fff},
+{0x0552, 0x7fff},
+{0x0554, 0x7fff},
+{0x0556, 0x7fff},
+{0x0558, 0x7fff},
+{0x055a, 0x7fff},
+{0x055c, 0x7fff},
+{0x055e, 0x7fff},
+{0x0560, 0x7fff},
+{0x0562, 0x7fff},
+{0x0564, 0x7fff},
+{0x0566, 0x7fff},
+{0x0568, 0x7fff},
+{0x056a, 0x7fff},
+{0x056c, 0x7fff},
+{0x056e, 0x7fff},
+{0x0570, 0x7fff},
+{0x0572, 0x7fff},
+{0x0574, 0x7fff},
+{0x0576, 0x7fff},
+{0x0578, 0x7fff},
+{0x057a, 0x7fff},
+{0x057c, 0x7fff},
+{0x057e, 0x7fff},
+{0x0580, 0x7fff},
+{0x0582, 0x7fff},
+{0x0584, 0x7fff},
+{0x0586, 0x7fff},
+{0x0588, 0x7fff},
+{0x058a, 0x7fff},
+{0x058c, 0x7fff},
+{0x058e, 0x7fff},
+{0x0590, 0x7fff},
+{0x0592, 0x7fff},
+{0x0594, 0x7fff},
+{0x0596, 0x7fff},
+{0x0598, 0x7fff},
+{0x059a, 0x7fff},
+{0x059c, 0x7fff},
+{0x059e, 0x7fff},
+{0x05a0, 0x7fff},
+{0x05a2, 0x7fff},
+{0x05a4, 0x7fff},
+{0x05a6, 0x7fff},
+{0x05a8, 0x7fff},
+{0x05aa, 0x7fff},
+{0x05ac, 0x7fff},
+{0x05ae, 0x7fff},
+{0x05b0, 0x7fff},
+{0x05b2, 0x7fff},
+{0x05b4, 0x7fff},
+{0x05b6, 0x7fff},
+{0x05b8, 0x7fff},
+{0x05ba, 0x7fff},
+{0x05bc, 0x7fff},
+{0x05be, 0x7fff},
+{0x05c0, 0x7fff},
+{0x05c2, 0x7fff},
+{0x05c4, 0x7fff},
+{0x05c6, 0x7fff},
+{0x05c8, 0x7fff},
+{0x05ca, 0x7fff},
+{0x05cc, 0x7fff},
+{0x05ce, 0x7fff},
+{0x05d0, 0x7fff},
+{0x05d2, 0x7fff},
+{0x05d4, 0x7fff},
+{0x05d6, 0x7fff},
+{0x05d8, 0x7fff},
+{0x05da, 0x7fff},
+{0x05dc, 0x7fff},
+{0x05de, 0x7fff},
+{0x05e0, 0x7fff},
+{0x05e2, 0x7fff},
+{0x05e4, 0x7fff},
+{0x05e6, 0x7fff},
+{0x05e8, 0x7fff},
+{0x05ea, 0x7fff},
+{0x05ec, 0x7fff},
+{0x05ee, 0x7fff},
+{0x05f0, 0x7fff},
+{0x05f2, 0x7fff},
+{0x05f4, 0x7fff},
+{0x05f6, 0x7fff},
+{0x05f8, 0x7fff},
+{0x05fa, 0x7fff},
+{0x05fc, 0x7fff},
+{0x05fe, 0x7fff},
+{0x0600, 0x0000},
+{0x0602, 0x0000},
+{0x0604, 0x0000},
+{0x0606, 0x0000},
+{0x0608, 0x0000},
+{0x060a, 0x0000},
+{0x060c, 0x0000},
+{0x060e, 0x0000},
+{0x0610, 0x0000},
+{0x0612, 0x0000},
+{0x0614, 0x0000},
+{0x0616, 0x0000},
+{0x0618, 0x0000},
+{0x061a, 0x0000},
+{0x061c, 0x0000},
+{0x061e, 0x0000},
+{0x0620, 0x0000},
+{0x0622, 0x0000},
+{0x0624, 0x0000},
+{0x0626, 0x0000},
+{0x0628, 0x0000},
+{0x062a, 0x0000},
+{0x062c, 0x0000},
+{0x062e, 0x0000},
+{0x0630, 0x0000},
+{0x0632, 0x0000},
+{0x0634, 0x0000},
+{0x0636, 0x0000},
+{0x0638, 0x0000},
+{0x063a, 0x0000},
+{0x063c, 0x0000},
+{0x063e, 0x0000},
+{0x0640, 0x0000},
+{0x0642, 0x0000},
+{0x0644, 0x0000},
+{0x0646, 0x0000},
+{0x0648, 0x0000},
+{0x064a, 0x0000},
+{0x064c, 0x0000},
+{0x064e, 0x0000},
+{0x0650, 0x0000},
+{0x0652, 0x0000},
+{0x0654, 0x0000},
+{0x0656, 0x0000},
+{0x0658, 0x0000},
+{0x065a, 0x0000},
+{0x065c, 0x0000},
+{0x065e, 0x0000},
+{0x0660, 0x0000},
+{0x0662, 0x0000},
+{0x0664, 0x0000},
+{0x0666, 0x0000},
+{0x0668, 0x0000},
+{0x066a, 0x0000},
+{0x066c, 0x0000},
+{0x066e, 0x0000},
+{0x0670, 0x0000},
+{0x0672, 0x0000},
+{0x0674, 0x0000},
+{0x0676, 0x0000},
+{0x0678, 0x0000},
+{0x067a, 0x0000},
+{0x067c, 0x0000},
+{0x067e, 0x0000},
+{0x0680, 0x0000},
+{0x0682, 0x0000},
+{0x0684, 0x0000},
+{0x0686, 0x0000},
+{0x0688, 0x0000},
+{0x068a, 0x0000},
+{0x068c, 0x0000},
+{0x068e, 0x0000},
+{0x0690, 0x0000},
+{0x0692, 0x0000},
+{0x0694, 0x0000},
+{0x0696, 0x0000},
+{0x0698, 0x0000},
+{0x069a, 0x0000},
+{0x069c, 0x0000},
+{0x069e, 0x0000},
+{0x06a0, 0x0000},
+{0x06a2, 0x0000},
+{0x06a4, 0x0000},
+{0x06a6, 0x0000},
+{0x06a8, 0x0000},
+{0x06aa, 0x0000},
+{0x06ac, 0x0000},
+{0x06ae, 0x0000},
+{0x06b0, 0x0000},
+{0x06b2, 0x0000},
+{0x06b4, 0x0000},
+{0x06b6, 0x0000},
+{0x06b8, 0x0000},
+{0x06ba, 0x0000},
+{0x06bc, 0x0000},
+{0x06be, 0x0000},
+{0x06c0, 0x0000},
+{0x06c2, 0x0000},
+{0x06c4, 0x0000},
+{0x06c6, 0x0000},
+{0x06c8, 0x0000},
+{0x06ca, 0x0000},
+{0x06cc, 0x0000},
+{0x06ce, 0x0000},
+{0x06d0, 0x0000},
+{0x06d2, 0x0000},
+{0x06d4, 0x0000},
+{0x06d6, 0x0000},
+{0x06d8, 0x0000},
+{0x06da, 0x0000},
+{0x06dc, 0x0000},
+{0x06de, 0x0000},
+{0x06e0, 0x0000},
+{0x06e2, 0x0000},
+{0x06e4, 0x0000},
+{0x06e6, 0x0000},
+{0x06e8, 0x0000},
+{0x06ea, 0x0000},
+{0x06ec, 0x0000},
+{0x06ee, 0x0000},
+{0x06f0, 0x0000},
+{0x06f2, 0x0000},
+{0x06f4, 0x0000},
+{0x06f6, 0x0000},
+{0x06f8, 0x0000},
+{0x06fa, 0x0000},
+{0x06fc, 0x0000},
+{0x06fe, 0x0000},
+{0x0700, 0x0000},
+{0x0702, 0x0000},
+{0x0704, 0x0000},
+{0x0706, 0x0000},
+{0x0708, 0x0000},
+{0x070a, 0x0000},
+{0x070c, 0x0000},
+{0x070e, 0x0000},
+{0x0710, 0x0000},
+{0x0712, 0x0000},
+{0x0714, 0x0000},
+{0x0716, 0x0000},
+{0x0718, 0x0000},
+{0x071a, 0x0000},
+{0x071c, 0x0000},
+{0x071e, 0x0000},
+{0x0720, 0x0000},
+{0x0722, 0x0000},
+{0x0724, 0x0000},
+{0x0726, 0x0000},
+{0x0728, 0x0000},
+{0x072a, 0x0000},
+{0x072c, 0x0000},
+{0x072e, 0x0000},
+{0x0730, 0x0000},
+{0x0732, 0x0000},
+{0x0734, 0x0000},
+{0x0736, 0x0000},
+{0x0738, 0x0000},
+{0x073a, 0x0000},
+{0x073c, 0x0000},
+{0x073e, 0x0000},
+{0x0740, 0x0000},
+{0x0742, 0x0000},
+{0x0744, 0x0000},
+{0x0746, 0x0000},
+{0x0748, 0x0000},
+{0x074a, 0x0000},
+{0x074c, 0x0000},
+{0x074e, 0x0000},
+{0x0750, 0x0000},
+{0x0752, 0x0000},
+{0x0754, 0x0000},
+{0x0756, 0x0000},
+{0x0758, 0x0000},
+{0x075a, 0x0000},
+{0x075c, 0x0000},
+{0x075e, 0x0000},
+{0x0760, 0x0000},
+{0x0762, 0x0000},
+{0x0764, 0x0000},
+{0x0766, 0x0000},
+{0x0768, 0x0000},
+{0x076a, 0x0000},
+{0x076c, 0x0000},
+{0x076e, 0x0000},
+{0x0770, 0x0000},
+{0x0772, 0x0000},
+{0x0774, 0x0000},
+{0x0776, 0x0000},
+{0x0778, 0x0000},
+{0x077a, 0x0000},
+{0x077c, 0x0000},
+{0x077e, 0x0000},
+{0x0780, 0x0000},
+{0x0782, 0x0000},
+{0x0784, 0x0000},
+{0x0786, 0x0000},
+{0x0788, 0x0000},
+{0x078a, 0x0000},
+{0x078c, 0x0000},
+{0x078e, 0x0000},
+{0x0790, 0x0000},
+{0x0792, 0x0000},
+{0x0794, 0x0000},
+{0x0796, 0x0000},
+{0x0798, 0x0000},
+{0x079a, 0x0000},
+{0x079c, 0x0000},
+{0x079e, 0x0000},
+{0x07a0, 0x0000},
+{0x07a2, 0x0000},
+{0x07a4, 0x0000},
+{0x07a6, 0x0000},
+{0x07a8, 0x0000},
+{0x07aa, 0x0000},
+{0x07ac, 0x0000},
+{0x07ae, 0x0000},
+{0x07b0, 0x0000},
+{0x07b2, 0x0000},
+{0x07b4, 0x0000},
+{0x07b6, 0x0000},
+{0x07b8, 0x0000},
+{0x07ba, 0x0000},
+{0x07bc, 0x0000},
+{0x07be, 0x0000},
+{0x07c0, 0x0000},
+{0x07c2, 0x0000},
+{0x07c4, 0x0000},
+{0x07c6, 0x0000},
+{0x07c8, 0x0000},
+{0x07ca, 0x0000},
+{0x07cc, 0x0000},
+{0x07ce, 0x0000},
+{0x07d0, 0x0000},
+{0x07d2, 0x0000},
+{0x07d4, 0x0000},
+{0x07d6, 0x0000},
+{0x07d8, 0x0000},
+{0x07da, 0x0000},
+{0x07dc, 0x0000},
+{0x07de, 0x0000},
+{0x07e0, 0x0000},
+{0x07e2, 0x0000},
+{0x07e4, 0x0000},
+{0x07e6, 0x0000},
+{0x07e8, 0x0000},
+{0x07ea, 0x0000},
+{0x07ec, 0x0000},
+{0x07ee, 0x0000},
+{0x07f0, 0x0000},
+{0x07f2, 0x0000},
+{0x07f4, 0x0000},
+{0x07f6, 0x0000},
+{0x07f8, 0x0000},
+{0x07fa, 0x0000},
+{0x07fc, 0x0000},
+{0x07fe, 0x0000},
+{0x0800, 0x0000},
+{0x0802, 0x0000},
+{0x0804, 0x0000},
+{0x0806, 0x0000},
+{0x0808, 0x0000},
+{0x080a, 0x0000},
+{0x080c, 0x0000},
+{0x080e, 0x0000},
+{0x0810, 0x0000},
+{0x0812, 0x0000},
+{0x0814, 0x0000},
+{0x0816, 0x0000},
+{0x0818, 0x0000},
+{0x081a, 0x0000},
+{0x081c, 0x0000},
+{0x081e, 0x0000},
+{0x0820, 0x0000},
+{0x0822, 0x0000},
+{0x0824, 0x0000},
+{0x0826, 0x0000},
+{0x0828, 0x0000},
+{0x082a, 0x0000},
+{0x082c, 0x0000},
+{0x082e, 0x0000},
+{0x0830, 0x0000},
+{0x0832, 0x0000},
+{0x0834, 0x0000},
+{0x0836, 0x0000},
+{0x0838, 0x0000},
+{0x083a, 0x0000},
+{0x083c, 0x0000},
+{0x083e, 0x0000},
+{0x0840, 0x0000},
+{0x0842, 0x0000},
+{0x0844, 0x0000},
+{0x0846, 0x0000},
+{0x0848, 0x0000},
+{0x084a, 0x0000},
+{0x084c, 0x0000},
+{0x084e, 0x0000},
+{0x0850, 0x0000},
+{0x0852, 0x0000},
+{0x0854, 0x0000},
+{0x0856, 0x0000},
+{0x0858, 0x0000},
+{0x085a, 0x0000},
+{0x085c, 0x0000},
+{0x085e, 0x0000},
+{0x0860, 0x0000},
+{0x0862, 0x0000},
+{0x0864, 0x0000},
+{0x0866, 0x0000},
+{0x0868, 0x0000},
+{0x086a, 0x0000},
+{0x086c, 0x0000},
+{0x086e, 0x0000},
+{0x0870, 0x0000},
+{0x0872, 0x0000},
+{0x0874, 0x0000},
+{0x0876, 0x0000},
+{0x0878, 0x0000},
+{0x087a, 0x0000},
+{0x087c, 0x0000},
+{0x087e, 0x0000},
+{0x0880, 0x0000},
+{0x0882, 0x0000},
+{0x0884, 0x0000},
+{0x0886, 0x0000},
+{0x0888, 0x0000},
+{0x088a, 0x0000},
+{0x088c, 0x0000},
+{0x088e, 0x0000},
+{0x0890, 0x0000},
+{0x0892, 0x0000},
+{0x0894, 0x0000},
+{0x0896, 0x0000},
+{0x0898, 0x0000},
+{0x089a, 0x0000},
+{0x089c, 0x0000},
+{0x089e, 0x0000},
+{0x08a0, 0x0000},
+{0x08a2, 0x0000},
+{0x08a4, 0x0000},
+{0x08a6, 0x0000},
+{0x08a8, 0x0000},
+{0x08aa, 0x0000},
+{0x08ac, 0x0000},
+{0x08ae, 0x0000},
+{0x08b0, 0x0000},
+{0x08b2, 0x0000},
+{0x08b4, 0x0000},
+{0x08b6, 0x0000},
+{0x08b8, 0x0000},
+{0x08ba, 0x0000},
+{0x08bc, 0x0000},
+{0x08be, 0x0000},
+{0x08c0, 0x0000},
+{0x08c2, 0x0000},
+{0x08c4, 0x0000},
+{0x08c6, 0x0000},
+{0x08c8, 0x0000},
+{0x08ca, 0x0000},
+{0x08cc, 0x0000},
+{0x08ce, 0x0000},
+{0x08d0, 0x0000},
+{0x08d2, 0x0000},
+{0x08d4, 0x0000},
+{0x08d6, 0x0000},
+{0x08d8, 0x0000},
+{0x08da, 0x0000},
+{0x08dc, 0x0000},
+{0x08de, 0x0000},
+{0x08e0, 0x0000},
+{0x08e2, 0x0000},
+{0x08e4, 0x0000},
+{0x08e6, 0x0000},
+{0x08e8, 0x0000},
+{0x08ea, 0x0000},
+{0x08ec, 0x0000},
+{0x08ee, 0x0000},
+{0x08f0, 0x0000},
+{0x08f2, 0x0000},
+{0x08f4, 0x0000},
+{0x08f6, 0x0000},
+{0x08f8, 0x0000},
+{0x08fa, 0x0000},
+{0x08fc, 0x0000},
+{0x08fe, 0x0000},
+{0x0900, 0x0000},
+{0x0902, 0x0000},
+{0x0904, 0x0000},
+{0x0906, 0x0000},
+{0x0908, 0x0000},
+{0x090a, 0x0000},
+{0x090c, 0x0000},
+{0x090e, 0x0000},
+{0x0910, 0x0000},
+{0x0912, 0x0000},
+{0x0914, 0x0000},
+{0x0916, 0x0000},
+{0x0918, 0x0000},
+{0x091a, 0x0000},
+{0x091c, 0x0000},
+{0x091e, 0x0000},
+{0x0920, 0x0000},
+{0x0922, 0x0000},
+{0x0924, 0x0000},
+{0x0926, 0x0000},
+{0x0928, 0x0000},
+{0x092a, 0x0000},
+{0x092c, 0x0000},
+{0x092e, 0x0000},
+{0x0930, 0x0000},
+{0x0932, 0x0000},
+{0x0934, 0x0000},
+{0x0936, 0x0000},
+{0x0938, 0x0000},
+{0x093a, 0x0000},
+{0x093c, 0x0000},
+{0x093e, 0x0000},
+{0x0940, 0x0000},
+{0x0942, 0x0000},
+{0x0944, 0x0000},
+{0x0946, 0x0000},
+{0x0948, 0x0000},
+{0x094a, 0x0000},
+{0x094c, 0x0000},
+{0x094e, 0x0000},
+{0x0950, 0x0000},
+{0x0952, 0x0000},
+{0x0954, 0x0000},
+{0x0956, 0x0000},
+{0x0958, 0x0000},
+{0x095a, 0x0000},
+{0x095c, 0x0000},
+{0x095e, 0x0000},
+{0x0960, 0x0000},
+{0x0962, 0x0000},
+{0x0964, 0x0000},
+{0x0966, 0x0000},
+{0x0968, 0x0000},
+{0x096a, 0x0000},
+{0x096c, 0x0000},
+{0x096e, 0x0000},
+{0x0970, 0x0000},
+{0x0972, 0x0000},
+{0x0974, 0x0000},
+{0x0976, 0x0000},
+{0x0978, 0x0000},
+{0x097a, 0x0000},
+{0x097c, 0x0000},
+{0x097e, 0x0000},
+{0x0980, 0x0000},
+{0x0982, 0x0000},
+{0x0984, 0x0000},
+{0x0986, 0x0000},
+{0x0988, 0x0000},
+{0x098a, 0x0000},
+{0x098c, 0x0000},
+{0x098e, 0x0000},
+{0x0990, 0x0000},
+{0x0992, 0x0000},
+{0x0994, 0x0000},
+{0x0996, 0x0000},
+{0x0998, 0x0000},
+{0x099a, 0x0000},
+{0x099c, 0x0000},
+{0x099e, 0x0000},
+{0x09a0, 0x0000},
+{0x09a2, 0x0000},
+{0x09a4, 0x0000},
+{0x09a6, 0x0000},
+{0x09a8, 0x0000},
+{0x09aa, 0x0000},
+{0x09ac, 0x0000},
+{0x09ae, 0x0000},
+{0x09b0, 0x0000},
+{0x09b2, 0x0000},
+{0x09b4, 0x0000},
+{0x09b6, 0x0000},
+{0x09b8, 0x0000},
+{0x09ba, 0x0000},
+{0x09bc, 0x0000},
+{0x09be, 0x0000},
+{0x09c0, 0x0000},
+{0x09c2, 0x0000},
+{0x09c4, 0x0000},
+{0x09c6, 0x0000},
+{0x09c8, 0x0000},
+{0x09ca, 0x0000},
+{0x09cc, 0x0000},
+{0x09ce, 0x0000},
+{0x09d0, 0x0000},
+{0x09d2, 0x0000},
+{0x09d4, 0x0000},
+{0x09d6, 0x0000},
+{0x09d8, 0x0000},
+{0x09da, 0x0000},
+{0x09dc, 0x0000},
+{0x09de, 0x0000},
+{0x09e0, 0x0000},
+{0x09e2, 0x0000},
+{0x09e4, 0x0000},
+{0x09e6, 0x0000},
+{0x09e8, 0x0000},
+{0x09ea, 0x0000},
+{0x09ec, 0x0000},
+{0x09ee, 0x0000},
+{0x09f0, 0x0000},
+{0x09f2, 0x0000},
+{0x09f4, 0x0000},
+{0x09f6, 0x0000},
+{0x09f8, 0x0000},
+{0x09fa, 0x0000},
+{0x09fc, 0x4000},
+{0x09fe, 0x0000}	
+};
+#endif /*__SPEAK_OFF_CONFIG_H_*/
\ No newline at end of file
diff --git a/legacy_hal/inc/voip_config.h b/legacy_hal/inc/voip_config.h
new file mode 100755
index 0000000..389110d
--- /dev/null
+++ b/legacy_hal/inc/voip_config.h
@@ -0,0 +1,1029 @@
+#ifndef __VOIP_CONFIG_H_
+#define __VOIP_CONFIG_H_
+const unsigned short voip_config_array[][2] = {
+{0x0200, 0x0000},
+{0x0202, 0x0c81},
+{0x0204, 0x0010},
+{0x0206, 0x0000},
+{0x0208, 0x0000},
+{0x020a, 0x0000},
+{0x020c, 0x0000},
+{0x020e, 0x0000},
+{0x0210, 0x000d},
+{0x0212, 0x0000},
+{0x0214, 0x000e},
+{0x0216, 0x0000},
+{0x0218, 0x0000},
+{0x021a, 0x0000},
+{0x021c, 0x0000},
+{0x021e, 0x000e},
+{0x0220, 0x0000},
+{0x0222, 0x0000},
+{0x0224, 0x0001},
+{0x0226, 0x0a09},
+{0x0228, 0x0000},
+{0x022a, 0x0000},
+{0x022c, 0x0000},
+{0x022e, 0x0000},
+{0x0230, 0x0000},
+{0x0232, 0x0000},
+{0x0234, 0x0000},
+{0x0236, 0x0000},
+{0x0238, 0x0000},
+{0x023a, 0x0000},
+{0x023c, 0x0000},
+{0x023e, 0x0000},
+{0x0240, 0x0000},
+{0x0242, 0x0000},
+{0x0244, 0x0000},
+{0x0246, 0x0000},
+{0x0248, 0x0000},
+{0x024a, 0x0000},
+{0x024c, 0x0000},
+{0x024e, 0x0000},
+{0x0250, 0x0000},
+{0x0252, 0x0000},
+{0x0254, 0x0000},
+{0x0256, 0x0000},
+{0x0258, 0x0000},
+{0x025a, 0x0000},
+{0x025c, 0x0000},
+{0x025e, 0x0000},
+{0x0260, 0x0000},
+{0x0262, 0x01f2},
+{0x0264, 0x40c0},
+{0x0266, 0x0000},
+{0x0268, 0x0100},
+{0x026a, 0x0102},
+{0x026c, 0x0004},
+{0x026e, 0x0006},
+{0x0270, 0x0000},
+{0x0272, 0x0000},
+{0x0274, 0x0000},
+{0x0276, 0x0000},
+{0x0278, 0xc004},
+{0x027a, 0x03f6},
+{0x027c, 0xc0c0},
+{0x027e, 0x0000},
+{0x0280, 0x0100},
+{0x0282, 0x0101},
+{0x0284, 0x0004},
+{0x0286, 0x0006},
+{0x0288, 0x0000},
+{0x028a, 0x0000},
+{0x028c, 0x0000},
+{0x028e, 0x0000},
+{0x0290, 0x0000},
+{0x0292, 0x0000},
+{0x0294, 0x0000},
+{0x0296, 0x0000},
+{0x0298, 0x0000},
+{0x029a, 0x0000},
+{0x029c, 0x0000},
+{0x029e, 0x0000},
+{0x02a0, 0xc00a},
+{0x02a2, 0x0000},
+{0x02a4, 0x0004},
+{0x02a6, 0x0000},
+{0x02a8, 0x0000},
+{0x02aa, 0x0000},
+{0x02ac, 0x0000},
+{0x02ae, 0x0000},
+{0x02b0, 0x0001},
+{0x02b2, 0x0001},
+{0x02b4, 0x0000},
+{0x02b6, 0x0000},
+{0x02b8, 0x815e},
+{0x02ba, 0xfff1},
+{0x02bc, 0x81e0},
+{0x02be, 0xfff1},
+{0x02c0, 0x03ec},
+{0x02c2, 0xfff6},
+{0x02c4, 0x0000},
+{0x02c6, 0x0000},
+{0x02c8, 0x0000},
+{0x02ca, 0x0000},
+{0x02cc, 0x0000},
+{0x02ce, 0x0000},
+{0x02d0, 0x0000},
+{0x02d2, 0x0000},
+{0x02d4, 0x0000},
+{0x02d6, 0x0000},
+{0x02d8, 0x0000},
+{0x02da, 0x0000},
+{0x02dc, 0x0000},
+{0x02de, 0x0000},
+{0x02e0, 0x0000},
+{0x02e2, 0x0000},
+{0x02e4, 0x0000},
+{0x02e6, 0x0000},
+{0x02e8, 0x0000},
+{0x02ea, 0x0000},
+{0x02ec, 0x0000},
+{0x02ee, 0x0000},
+{0x02f0, 0x0000},
+{0x02f2, 0x0000},
+{0x02f4, 0x0000},
+{0x02f6, 0x0000},
+{0x02f8, 0x0000},
+{0x02fa, 0x0000},
+{0x02fc, 0x0000},
+{0x02fe, 0x0000},
+{0x0300, 0x4008},
+{0x0302, 0x1000},
+{0x0304, 0x0000},
+{0x0306, 0x0000},
+{0x0308, 0x0000},
+{0x030a, 0x0048},
+{0x030c, 0x0911},
+{0x030e, 0xb001},
+{0x0310, 0x9393},
+{0x0312, 0x7f00},
+{0x0314, 0x0000},
+{0x0316, 0x7fff},
+{0x0318, 0x0000},
+{0x031a, 0x0000},
+{0x031c, 0x7fff},
+{0x031e, 0x7fff},
+{0x0320, 0x7fff},
+{0x0322, 0x7fff},
+{0x0324, 0x0200},
+{0x0326, 0x001f},
+{0x0328, 0x3040},
+{0x032a, 0x010c},
+{0x032c, 0x0006},
+{0x032e, 0x0a1f},
+{0x0330, 0x08a1},
+{0x0332, 0x003f},
+{0x0334, 0x0020},
+{0x0336, 0x0000},
+{0x0338, 0x4801},
+{0x033a, 0x0096},
+{0x033c, 0x0002},
+{0x033e, 0x0004},
+{0x0340, 0x0000},
+{0x0342, 0x0800},
+{0x0344, 0x0000},
+{0x0346, 0x0005},
+{0x0348, 0x0000},
+{0x034a, 0x0000},
+{0x034c, 0x0000},
+{0x034e, 0x0000},
+{0x0350, 0x0000},
+{0x0352, 0x0000},
+{0x0354, 0x1122},
+{0x0356, 0x3344},
+{0x0358, 0x0806},
+{0x035a, 0x0228},
+{0x035c, 0xa000},
+{0x035e, 0x0000},
+{0x0360, 0x0013},
+{0x0362, 0x0e80},
+{0x0364, 0x0a00},
+{0x0366, 0x4000},
+{0x0368, 0x0026},
+{0x036a, 0x1a00},
+{0x036c, 0x0800},
+{0x036e, 0x0400},
+{0x0370, 0x0fa0},
+{0x0372, 0x0640},
+{0x0374, 0x0b0b},
+{0x0376, 0x0000},
+{0x0378, 0x0000},
+{0x037a, 0x0010},
+{0x037c, 0x01aa},
+{0x037e, 0x2000},
+{0x0380, 0x0000},
+{0x0382, 0x0200},
+{0x0384, 0x7800},
+{0x0386, 0x0280},
+{0x0388, 0x001e},
+{0x038a, 0x003c},
+{0x038c, 0x0f01},
+{0x038e, 0x08a1},
+{0x0390, 0x0040},
+{0x0392, 0x0000},
+{0x0394, 0x0000},
+{0x0396, 0x0000},
+{0x0398, 0x0000},
+{0x039a, 0x0000},
+{0x039c, 0x0000},
+{0x039e, 0x0000},
+{0x03a0, 0x0000},
+{0x03a2, 0x0020},
+{0x03a4, 0x0002},
+{0x03a6, 0x0064},
+{0x03a8, 0x000f},
+{0x03aa, 0x3333},
+{0x03ac, 0x7fbe},
+{0x03ae, 0x3333},
+{0x03b0, 0x7eb8},
+{0x03b2, 0x7fff},
+{0x03b4, 0x0001},
+{0x03b6, 0x7fdf},
+{0x03b8, 0x0002},
+{0x03ba, 0x7333},
+{0x03bc, 0x7333},
+{0x03be, 0x003c},
+{0x03c0, 0x0000},
+{0x03c2, 0x6666},
+{0x03c4, 0x0001},
+{0x03c6, 0x6666},
+{0x03c8, 0x5a9d},
+{0x03ca, 0x0100},
+{0x03cc, 0x0002},
+{0x03ce, 0x0000},
+{0x03d0, 0x0000},
+{0x03d2, 0x7213},
+{0x03d4, 0x0002},
+{0x03d6, 0x4000},
+{0x03d8, 0x0ccc},
+{0x03da, 0x0000},
+{0x03dc, 0x0000},
+{0x03de, 0x0000},
+{0x03e0, 0x0000},
+{0x03e2, 0x0000},
+{0x03e4, 0x0000},
+{0x03e6, 0x0002},
+{0x03e8, 0x01f0},
+{0x03ea, 0x0078},
+{0x03ec, 0x0032},
+{0x03ee, 0x0004},
+{0x03f0, 0x01f0},
+{0x03f2, 0x0078},
+{0x03f4, 0x0032},
+{0x03f6, 0x087a},
+{0x03f8, 0x0100},
+{0x03fa, 0x0190},
+{0x03fc, 0x0004},
+{0x03fe, 0x0017},
+{0x0400, 0x0400},
+{0x0402, 0x0320},
+{0x0404, 0x0033},
+{0x0406, 0x0000},
+{0x0408, 0x0b27},
+{0x040a, 0x1358},
+{0x040c, 0x0c52},
+{0x040e, 0x1560},
+{0x0410, 0x0da2},
+{0x0412, 0x17a2},
+{0x0414, 0x0f0e},
+{0x0416, 0x1a21},
+{0x0418, 0x123d},
+{0x041a, 0x170a},
+{0x041c, 0x0000},
+{0x041e, 0x0000},
+{0x0420, 0x0000},
+{0x0422, 0x0000},
+{0x0424, 0x0000},
+{0x0426, 0x0000},
+{0x0428, 0x0190},
+{0x042a, 0x0190},
+{0x042c, 0x0000},
+{0x042e, 0x0000},
+{0x0430, 0x0000},
+{0x0432, 0x0000},
+{0x0434, 0x0000},
+{0x0436, 0x0000},
+{0x0438, 0x0000},
+{0x043a, 0x7fff},
+{0x043c, 0x0001},
+{0x043e, 0x000a},
+{0x0440, 0x0001},
+{0x0442, 0x0000},
+{0x0444, 0x0000},
+{0x0446, 0x0000},
+{0x0448, 0x0000},
+{0x044a, 0x0000},
+{0x044c, 0x0000},
+{0x044e, 0x0000},
+{0x0450, 0x0000},
+{0x0452, 0x0000},
+{0x0454, 0x0000},
+{0x0456, 0x0000},
+{0x0458, 0x0000},
+{0x045a, 0x0000},
+{0x045c, 0x0000},
+{0x045e, 0x3000},
+{0x0460, 0x3fff},
+{0x0462, 0x020c},
+{0x0464, 0x0000},
+{0x0466, 0x0000},
+{0x0468, 0x0000},
+{0x046a, 0x0000},
+{0x046c, 0x0000},
+{0x046e, 0x0000},
+{0x0470, 0x0000},
+{0x0472, 0x0000},
+{0x0474, 0x0000},
+{0x0476, 0x0000},
+{0x0478, 0x0000},
+{0x047a, 0x0000},
+{0x047c, 0x0000},
+{0x047e, 0x0000},
+{0x0480, 0x0000},
+{0x0482, 0x0000},
+{0x0484, 0x0000},
+{0x0486, 0x0000},
+{0x0488, 0x0064},
+{0x048a, 0x000f},
+{0x048c, 0x0000},
+{0x048e, 0x0036},
+{0x0490, 0x0000},
+{0x0492, 0x03e8},
+{0x0494, 0x0064},
+{0x0496, 0x1999},
+{0x0498, 0x0ccc},
+{0x049a, 0x0005},
+{0x049c, 0x0019},
+{0x049e, 0x4026},
+{0x04a0, 0x5a67},
+{0x04a2, 0x4026},
+{0x04a4, 0x7fb2},
+{0x04a6, 0x0104},
+{0x04a8, 0x0ccc},
+{0x04aa, 0x0ccc},
+{0x04ac, 0x78d6},
+{0x04ae, 0x0d8f},
+{0x04b0, 0x0004},
+{0x04b2, 0x0000},
+{0x04b4, 0x0000},
+{0x04b6, 0x0000},
+{0x04b8, 0x0000},
+{0x04ba, 0x0000},
+{0x04bc, 0x0000},
+{0x04be, 0x0000},
+{0x04c0, 0x0000},
+{0x04c2, 0x0000},
+{0x04c4, 0x0000},
+{0x04c6, 0x0000},
+{0x04c8, 0x0000},
+{0x04ca, 0x0000},
+{0x04cc, 0x0000},
+{0x04ce, 0x0000},
+{0x04d0, 0x0000},
+{0x04d2, 0x0000},
+{0x04d4, 0x0000},
+{0x04d6, 0x0000},
+{0x04d8, 0x0000},
+{0x04da, 0x0000},
+{0x04dc, 0x0000},
+{0x04de, 0x0000},
+{0x04e0, 0x0000},
+{0x04e2, 0x0000},
+{0x04e4, 0x0000},
+{0x04e6, 0x0000},
+{0x04e8, 0x0000},
+{0x04ea, 0x0000},
+{0x04ec, 0x0000},
+{0x04ee, 0x0000},
+{0x04f0, 0x0000},
+{0x04f2, 0x0000},
+{0x04f4, 0x0000},
+{0x04f6, 0x0000},
+{0x04f8, 0x0000},
+{0x04fa, 0x0000},
+{0x04fc, 0x0000},
+{0x04fe, 0x0000},
+{0x0500, 0x7fff},
+{0x0502, 0x7fff},
+{0x0504, 0x7fff},
+{0x0506, 0x7fff},
+{0x0508, 0x7fff},
+{0x050a, 0x7fff},
+{0x050c, 0x7fff},
+{0x050e, 0x7fff},
+{0x0510, 0x7fff},
+{0x0512, 0x7fff},
+{0x0514, 0x7fff},
+{0x0516, 0x7fff},
+{0x0518, 0x7fff},
+{0x051a, 0x7fff},
+{0x051c, 0x7fff},
+{0x051e, 0x7fff},
+{0x0520, 0x7fff},
+{0x0522, 0x7fff},
+{0x0524, 0x7fff},
+{0x0526, 0x7fff},
+{0x0528, 0x7fff},
+{0x052a, 0x7fff},
+{0x052c, 0x7fff},
+{0x052e, 0x7fff},
+{0x0530, 0x7fff},
+{0x0532, 0x7fff},
+{0x0534, 0x7fff},
+{0x0536, 0x7fff},
+{0x0538, 0x7fff},
+{0x053a, 0x7fff},
+{0x053c, 0x7fff},
+{0x053e, 0x7fff},
+{0x0540, 0x7fff},
+{0x0542, 0x7fff},
+{0x0544, 0x7fff},
+{0x0546, 0x7fff},
+{0x0548, 0x7fff},
+{0x054a, 0x7fff},
+{0x054c, 0x7fff},
+{0x054e, 0x7fff},
+{0x0550, 0x7fff},
+{0x0552, 0x7fff},
+{0x0554, 0x7fff},
+{0x0556, 0x7fff},
+{0x0558, 0x7fff},
+{0x055a, 0x7fff},
+{0x055c, 0x7fff},
+{0x055e, 0x7fff},
+{0x0560, 0x7fff},
+{0x0562, 0x7fff},
+{0x0564, 0x7fff},
+{0x0566, 0x7fff},
+{0x0568, 0x7fff},
+{0x056a, 0x7fff},
+{0x056c, 0x7fff},
+{0x056e, 0x7fff},
+{0x0570, 0x7fff},
+{0x0572, 0x7fff},
+{0x0574, 0x7fff},
+{0x0576, 0x7fff},
+{0x0578, 0x7fff},
+{0x057a, 0x7fff},
+{0x057c, 0x7fff},
+{0x057e, 0x7fff},
+{0x0580, 0x7fff},
+{0x0582, 0x7fff},
+{0x0584, 0x7fff},
+{0x0586, 0x7fff},
+{0x0588, 0x7fff},
+{0x058a, 0x7fff},
+{0x058c, 0x7fff},
+{0x058e, 0x7fff},
+{0x0590, 0x7fff},
+{0x0592, 0x7fff},
+{0x0594, 0x7fff},
+{0x0596, 0x7fff},
+{0x0598, 0x7fff},
+{0x059a, 0x7fff},
+{0x059c, 0x7fff},
+{0x059e, 0x7fff},
+{0x05a0, 0x7fff},
+{0x05a2, 0x7fff},
+{0x05a4, 0x7fff},
+{0x05a6, 0x7fff},
+{0x05a8, 0x7fff},
+{0x05aa, 0x7fff},
+{0x05ac, 0x7fff},
+{0x05ae, 0x7fff},
+{0x05b0, 0x7fff},
+{0x05b2, 0x7fff},
+{0x05b4, 0x7fff},
+{0x05b6, 0x7fff},
+{0x05b8, 0x7fff},
+{0x05ba, 0x7fff},
+{0x05bc, 0x7fff},
+{0x05be, 0x7fff},
+{0x05c0, 0x7fff},
+{0x05c2, 0x7fff},
+{0x05c4, 0x7fff},
+{0x05c6, 0x7fff},
+{0x05c8, 0x7fff},
+{0x05ca, 0x7fff},
+{0x05cc, 0x7fff},
+{0x05ce, 0x7fff},
+{0x05d0, 0x7fff},
+{0x05d2, 0x7fff},
+{0x05d4, 0x7fff},
+{0x05d6, 0x7fff},
+{0x05d8, 0x7fff},
+{0x05da, 0x7fff},
+{0x05dc, 0x7fff},
+{0x05de, 0x7fff},
+{0x05e0, 0x7fff},
+{0x05e2, 0x7fff},
+{0x05e4, 0x7fff},
+{0x05e6, 0x7fff},
+{0x05e8, 0x7fff},
+{0x05ea, 0x7fff},
+{0x05ec, 0x7fff},
+{0x05ee, 0x7fff},
+{0x05f0, 0x7fff},
+{0x05f2, 0x7fff},
+{0x05f4, 0x7fff},
+{0x05f6, 0x7fff},
+{0x05f8, 0x7fff},
+{0x05fa, 0x7fff},
+{0x05fc, 0x7fff},
+{0x05fe, 0x7fff},
+{0x0600, 0x0000},
+{0x0602, 0x0000},
+{0x0604, 0x0000},
+{0x0606, 0x0000},
+{0x0608, 0x0000},
+{0x060a, 0x0000},
+{0x060c, 0x0000},
+{0x060e, 0x0000},
+{0x0610, 0x0000},
+{0x0612, 0x0000},
+{0x0614, 0x0000},
+{0x0616, 0x0000},
+{0x0618, 0x0000},
+{0x061a, 0x0000},
+{0x061c, 0x0000},
+{0x061e, 0x0000},
+{0x0620, 0x0000},
+{0x0622, 0x0000},
+{0x0624, 0x0000},
+{0x0626, 0x0000},
+{0x0628, 0x0000},
+{0x062a, 0x0000},
+{0x062c, 0x0000},
+{0x062e, 0x0000},
+{0x0630, 0x0000},
+{0x0632, 0x0000},
+{0x0634, 0x0000},
+{0x0636, 0x0000},
+{0x0638, 0x0000},
+{0x063a, 0x0000},
+{0x063c, 0x0000},
+{0x063e, 0x0000},
+{0x0640, 0x0000},
+{0x0642, 0x0000},
+{0x0644, 0x0000},
+{0x0646, 0x0000},
+{0x0648, 0x0000},
+{0x064a, 0x0000},
+{0x064c, 0x0000},
+{0x064e, 0x0000},
+{0x0650, 0x0000},
+{0x0652, 0x0000},
+{0x0654, 0x0000},
+{0x0656, 0x0000},
+{0x0658, 0x0000},
+{0x065a, 0x0000},
+{0x065c, 0x0000},
+{0x065e, 0x0000},
+{0x0660, 0x0000},
+{0x0662, 0x0000},
+{0x0664, 0x0000},
+{0x0666, 0x0000},
+{0x0668, 0x0000},
+{0x066a, 0x0000},
+{0x066c, 0x0000},
+{0x066e, 0x0000},
+{0x0670, 0x0000},
+{0x0672, 0x0000},
+{0x0674, 0x0000},
+{0x0676, 0x0000},
+{0x0678, 0x0000},
+{0x067a, 0x0000},
+{0x067c, 0x0000},
+{0x067e, 0x0000},
+{0x0680, 0x0000},
+{0x0682, 0x0000},
+{0x0684, 0x0000},
+{0x0686, 0x0000},
+{0x0688, 0x0000},
+{0x068a, 0x0000},
+{0x068c, 0x0000},
+{0x068e, 0x0000},
+{0x0690, 0x0000},
+{0x0692, 0x0000},
+{0x0694, 0x0000},
+{0x0696, 0x0000},
+{0x0698, 0x0000},
+{0x069a, 0x0000},
+{0x069c, 0x0000},
+{0x069e, 0x0000},
+{0x06a0, 0x0000},
+{0x06a2, 0x0000},
+{0x06a4, 0x0000},
+{0x06a6, 0x0000},
+{0x06a8, 0x0000},
+{0x06aa, 0x0000},
+{0x06ac, 0x0000},
+{0x06ae, 0x0000},
+{0x06b0, 0x0000},
+{0x06b2, 0x0000},
+{0x06b4, 0x0000},
+{0x06b6, 0x0000},
+{0x06b8, 0x0000},
+{0x06ba, 0x0000},
+{0x06bc, 0x0000},
+{0x06be, 0x0000},
+{0x06c0, 0x0000},
+{0x06c2, 0x0000},
+{0x06c4, 0x0000},
+{0x06c6, 0x0000},
+{0x06c8, 0x0000},
+{0x06ca, 0x0000},
+{0x06cc, 0x0000},
+{0x06ce, 0x0000},
+{0x06d0, 0x0000},
+{0x06d2, 0x0000},
+{0x06d4, 0x0000},
+{0x06d6, 0x0000},
+{0x06d8, 0x0000},
+{0x06da, 0x0000},
+{0x06dc, 0x0000},
+{0x06de, 0x0000},
+{0x06e0, 0x0000},
+{0x06e2, 0x0000},
+{0x06e4, 0x0000},
+{0x06e6, 0x0000},
+{0x06e8, 0x0000},
+{0x06ea, 0x0000},
+{0x06ec, 0x0000},
+{0x06ee, 0x0000},
+{0x06f0, 0x0000},
+{0x06f2, 0x0000},
+{0x06f4, 0x0000},
+{0x06f6, 0x0000},
+{0x06f8, 0x0000},
+{0x06fa, 0x0000},
+{0x06fc, 0x0000},
+{0x06fe, 0x0000},
+{0x0700, 0x0000},
+{0x0702, 0x0000},
+{0x0704, 0x0000},
+{0x0706, 0x0000},
+{0x0708, 0x0000},
+{0x070a, 0x0000},
+{0x070c, 0x0000},
+{0x070e, 0x0000},
+{0x0710, 0x0000},
+{0x0712, 0x0000},
+{0x0714, 0x0000},
+{0x0716, 0x0000},
+{0x0718, 0x0000},
+{0x071a, 0x0000},
+{0x071c, 0x0000},
+{0x071e, 0x0000},
+{0x0720, 0x0000},
+{0x0722, 0x0000},
+{0x0724, 0x0000},
+{0x0726, 0x0000},
+{0x0728, 0x0000},
+{0x072a, 0x0000},
+{0x072c, 0x0000},
+{0x072e, 0x0000},
+{0x0730, 0x0000},
+{0x0732, 0x0000},
+{0x0734, 0x0000},
+{0x0736, 0x0000},
+{0x0738, 0x0000},
+{0x073a, 0x0000},
+{0x073c, 0x0000},
+{0x073e, 0x0000},
+{0x0740, 0x0000},
+{0x0742, 0x0000},
+{0x0744, 0x0000},
+{0x0746, 0x0000},
+{0x0748, 0x0000},
+{0x074a, 0x0000},
+{0x074c, 0x0000},
+{0x074e, 0x0000},
+{0x0750, 0x0000},
+{0x0752, 0x0000},
+{0x0754, 0x0000},
+{0x0756, 0x0000},
+{0x0758, 0x0000},
+{0x075a, 0x0000},
+{0x075c, 0x0000},
+{0x075e, 0x0000},
+{0x0760, 0x0000},
+{0x0762, 0x0000},
+{0x0764, 0x0000},
+{0x0766, 0x0000},
+{0x0768, 0x0000},
+{0x076a, 0x0000},
+{0x076c, 0x0000},
+{0x076e, 0x0000},
+{0x0770, 0x0000},
+{0x0772, 0x0000},
+{0x0774, 0x0000},
+{0x0776, 0x0000},
+{0x0778, 0x0000},
+{0x077a, 0x0000},
+{0x077c, 0x0000},
+{0x077e, 0x0000},
+{0x0780, 0x0000},
+{0x0782, 0x0000},
+{0x0784, 0x0000},
+{0x0786, 0x0000},
+{0x0788, 0x0000},
+{0x078a, 0x0000},
+{0x078c, 0x0000},
+{0x078e, 0x0000},
+{0x0790, 0x0000},
+{0x0792, 0x0000},
+{0x0794, 0x0000},
+{0x0796, 0x0000},
+{0x0798, 0x0000},
+{0x079a, 0x0000},
+{0x079c, 0x0000},
+{0x079e, 0x0000},
+{0x07a0, 0x0000},
+{0x07a2, 0x0000},
+{0x07a4, 0x0000},
+{0x07a6, 0x0000},
+{0x07a8, 0x0000},
+{0x07aa, 0x0000},
+{0x07ac, 0x0000},
+{0x07ae, 0x0000},
+{0x07b0, 0x0000},
+{0x07b2, 0x0000},
+{0x07b4, 0x0000},
+{0x07b6, 0x0000},
+{0x07b8, 0x0000},
+{0x07ba, 0x0000},
+{0x07bc, 0x0000},
+{0x07be, 0x0000},
+{0x07c0, 0x0000},
+{0x07c2, 0x0000},
+{0x07c4, 0x0000},
+{0x07c6, 0x0000},
+{0x07c8, 0x0000},
+{0x07ca, 0x0000},
+{0x07cc, 0x0000},
+{0x07ce, 0x0000},
+{0x07d0, 0x0000},
+{0x07d2, 0x0000},
+{0x07d4, 0x0000},
+{0x07d6, 0x0000},
+{0x07d8, 0x0000},
+{0x07da, 0x0000},
+{0x07dc, 0x0000},
+{0x07de, 0x0000},
+{0x07e0, 0x0000},
+{0x07e2, 0x0000},
+{0x07e4, 0x0000},
+{0x07e6, 0x0000},
+{0x07e8, 0x0000},
+{0x07ea, 0x0000},
+{0x07ec, 0x0000},
+{0x07ee, 0x0000},
+{0x07f0, 0x0000},
+{0x07f2, 0x0000},
+{0x07f4, 0x0000},
+{0x07f6, 0x0000},
+{0x07f8, 0x0000},
+{0x07fa, 0x0000},
+{0x07fc, 0x0000},
+{0x07fe, 0x0000},
+{0x0800, 0x0000},
+{0x0802, 0x0000},
+{0x0804, 0x0000},
+{0x0806, 0x0000},
+{0x0808, 0x0000},
+{0x080a, 0x0000},
+{0x080c, 0x0000},
+{0x080e, 0x0000},
+{0x0810, 0x0000},
+{0x0812, 0x0000},
+{0x0814, 0x0000},
+{0x0816, 0x0000},
+{0x0818, 0x0000},
+{0x081a, 0x0000},
+{0x081c, 0x0000},
+{0x081e, 0x0000},
+{0x0820, 0x0000},
+{0x0822, 0x0000},
+{0x0824, 0x0000},
+{0x0826, 0x0000},
+{0x0828, 0x0000},
+{0x082a, 0x0000},
+{0x082c, 0x0000},
+{0x082e, 0x0000},
+{0x0830, 0x0000},
+{0x0832, 0x0000},
+{0x0834, 0x0000},
+{0x0836, 0x0000},
+{0x0838, 0x0000},
+{0x083a, 0x0000},
+{0x083c, 0x0000},
+{0x083e, 0x0000},
+{0x0840, 0x0000},
+{0x0842, 0x0000},
+{0x0844, 0x0000},
+{0x0846, 0x0000},
+{0x0848, 0x0000},
+{0x084a, 0x0000},
+{0x084c, 0x0000},
+{0x084e, 0x0000},
+{0x0850, 0x0000},
+{0x0852, 0x0000},
+{0x0854, 0x0000},
+{0x0856, 0x0000},
+{0x0858, 0x0000},
+{0x085a, 0x0000},
+{0x085c, 0x0000},
+{0x085e, 0x0000},
+{0x0860, 0x0000},
+{0x0862, 0x0000},
+{0x0864, 0x0000},
+{0x0866, 0x0000},
+{0x0868, 0x0000},
+{0x086a, 0x0000},
+{0x086c, 0x0000},
+{0x086e, 0x0000},
+{0x0870, 0x0000},
+{0x0872, 0x0000},
+{0x0874, 0x0000},
+{0x0876, 0x0000},
+{0x0878, 0x0000},
+{0x087a, 0x0000},
+{0x087c, 0x0000},
+{0x087e, 0x0000},
+{0x0880, 0x0000},
+{0x0882, 0x0000},
+{0x0884, 0x0000},
+{0x0886, 0x0000},
+{0x0888, 0x0000},
+{0x088a, 0x0000},
+{0x088c, 0x0000},
+{0x088e, 0x0000},
+{0x0890, 0x0000},
+{0x0892, 0x0000},
+{0x0894, 0x0000},
+{0x0896, 0x0000},
+{0x0898, 0x0000},
+{0x089a, 0x0000},
+{0x089c, 0x0000},
+{0x089e, 0x0000},
+{0x08a0, 0x0000},
+{0x08a2, 0x0000},
+{0x08a4, 0x0000},
+{0x08a6, 0x0000},
+{0x08a8, 0x0000},
+{0x08aa, 0x0000},
+{0x08ac, 0x0000},
+{0x08ae, 0x0000},
+{0x08b0, 0x0000},
+{0x08b2, 0x0000},
+{0x08b4, 0x0000},
+{0x08b6, 0x0000},
+{0x08b8, 0x0000},
+{0x08ba, 0x0000},
+{0x08bc, 0x0000},
+{0x08be, 0x0000},
+{0x08c0, 0x0000},
+{0x08c2, 0x0000},
+{0x08c4, 0x0000},
+{0x08c6, 0x0000},
+{0x08c8, 0x0000},
+{0x08ca, 0x0000},
+{0x08cc, 0x0000},
+{0x08ce, 0x0000},
+{0x08d0, 0x0000},
+{0x08d2, 0x0000},
+{0x08d4, 0x0000},
+{0x08d6, 0x0000},
+{0x08d8, 0x0000},
+{0x08da, 0x0000},
+{0x08dc, 0x0000},
+{0x08de, 0x0000},
+{0x08e0, 0x0000},
+{0x08e2, 0x0000},
+{0x08e4, 0x0000},
+{0x08e6, 0x0000},
+{0x08e8, 0x0000},
+{0x08ea, 0x0000},
+{0x08ec, 0x0000},
+{0x08ee, 0x0000},
+{0x08f0, 0x0000},
+{0x08f2, 0x0000},
+{0x08f4, 0x0000},
+{0x08f6, 0x0000},
+{0x08f8, 0x0000},
+{0x08fa, 0x0000},
+{0x08fc, 0x0000},
+{0x08fe, 0x0000},
+{0x0900, 0x0000},
+{0x0902, 0x0000},
+{0x0904, 0x0000},
+{0x0906, 0x0000},
+{0x0908, 0x0000},
+{0x090a, 0x0000},
+{0x090c, 0x0000},
+{0x090e, 0x0000},
+{0x0910, 0x0000},
+{0x0912, 0x0000},
+{0x0914, 0x0000},
+{0x0916, 0x0000},
+{0x0918, 0x0000},
+{0x091a, 0x0000},
+{0x091c, 0x0000},
+{0x091e, 0x0000},
+{0x0920, 0x0000},
+{0x0922, 0x0000},
+{0x0924, 0x0000},
+{0x0926, 0x0000},
+{0x0928, 0x0000},
+{0x092a, 0x0000},
+{0x092c, 0x0000},
+{0x092e, 0x0000},
+{0x0930, 0x0000},
+{0x0932, 0x0000},
+{0x0934, 0x0000},
+{0x0936, 0x0000},
+{0x0938, 0x0000},
+{0x093a, 0x0000},
+{0x093c, 0x0000},
+{0x093e, 0x0000},
+{0x0940, 0x0000},
+{0x0942, 0x0000},
+{0x0944, 0x0000},
+{0x0946, 0x0000},
+{0x0948, 0x0000},
+{0x094a, 0x0000},
+{0x094c, 0x0000},
+{0x094e, 0x0000},
+{0x0950, 0x0000},
+{0x0952, 0x0000},
+{0x0954, 0x0000},
+{0x0956, 0x0000},
+{0x0958, 0x0000},
+{0x095a, 0x0000},
+{0x095c, 0x0000},
+{0x095e, 0x0000},
+{0x0960, 0x0000},
+{0x0962, 0x0000},
+{0x0964, 0x0000},
+{0x0966, 0x0000},
+{0x0968, 0x0000},
+{0x096a, 0x0000},
+{0x096c, 0x0000},
+{0x096e, 0x0000},
+{0x0970, 0x0000},
+{0x0972, 0x0000},
+{0x0974, 0x0000},
+{0x0976, 0x0000},
+{0x0978, 0x0000},
+{0x097a, 0x0000},
+{0x097c, 0x0000},
+{0x097e, 0x0000},
+{0x0980, 0x0000},
+{0x0982, 0x0000},
+{0x0984, 0x0000},
+{0x0986, 0x0000},
+{0x0988, 0x0000},
+{0x098a, 0x0000},
+{0x098c, 0x0000},
+{0x098e, 0x0000},
+{0x0990, 0x0000},
+{0x0992, 0x0000},
+{0x0994, 0x0000},
+{0x0996, 0x0000},
+{0x0998, 0x0000},
+{0x099a, 0x0000},
+{0x099c, 0x0000},
+{0x099e, 0x0000},
+{0x09a0, 0x0000},
+{0x09a2, 0x0000},
+{0x09a4, 0x0000},
+{0x09a6, 0x0000},
+{0x09a8, 0x0000},
+{0x09aa, 0x0000},
+{0x09ac, 0x0000},
+{0x09ae, 0x0000},
+{0x09b0, 0x0000},
+{0x09b2, 0x0000},
+{0x09b4, 0x0000},
+{0x09b6, 0x0000},
+{0x09b8, 0x0000},
+{0x09ba, 0x0000},
+{0x09bc, 0x0000},
+{0x09be, 0x0000},
+{0x09c0, 0x0000},
+{0x09c2, 0x0000},
+{0x09c4, 0x0000},
+{0x09c6, 0x0000},
+{0x09c8, 0x0000},
+{0x09ca, 0x0000},
+{0x09cc, 0x0000},
+{0x09ce, 0x0000},
+{0x09d0, 0x0000},
+{0x09d2, 0x0000},
+{0x09d4, 0x0000},
+{0x09d6, 0x0000},
+{0x09d8, 0x0000},
+{0x09da, 0x0000},
+{0x09dc, 0x0000},
+{0x09de, 0x0000},
+{0x09e0, 0x0000},
+{0x09e2, 0x0000},
+{0x09e4, 0x0000},
+{0x09e6, 0x0000},
+{0x09e8, 0x0000},
+{0x09ea, 0x0000},
+{0x09ec, 0x0000},
+{0x09ee, 0x0000},
+{0x09f0, 0x0000},
+{0x09f2, 0x0000},
+{0x09f4, 0x0000},
+{0x09f6, 0x0000},
+{0x09f8, 0x0000},
+{0x09fa, 0x0000},
+{0x09fc, 0x4000},
+{0x09fe, 0x0000}	
+};
+#endif /*__VOIP_CONFIG_H_*/
\ No newline at end of file
diff --git a/legacy_hal/jstarAudio.c b/legacy_hal/jstarAudio.c
new file mode 100755
index 0000000..4a5b0b4
--- /dev/null
+++ b/legacy_hal/jstarAudio.c
@@ -0,0 +1,364 @@
+#include <stdio.h>
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <cutils/log.h>
+#include <cutils/config_utils.h>
+
+#include "alsa_audio.h"
+#include "jstarAudio.h"
+
+#include "./inc/speak_config.h"
+#include "./inc/speak_off_config.h"
+#include "./inc/headset_config.h"
+#include "./inc/incall_config.h"
+#include "./inc/main_mic_config.h"
+#include "./inc/base_config.h"
+#include "./inc/voip_config.h"
+
+#define ZL380TW_PATH	"/dev/zl380tw"
+#define ARRAY_LEN	(1024)
+
+#define msleep(x) 	usleep(x*1000)
+
+char w_value[4] = {0};
+unsigned int spk_status = 0;
+unsigned int hp_status = 0;
+unsigned int mic_status = 0;
+unsigned int spk_status_old = 0;
+unsigned int hp_status_old = 0;
+unsigned int mic_status_old = 0;
+unsigned short (*dsp_config_current)[2] = base_config_array;
+unsigned short (*dsp_config_old)[2] = base_config_array;
+
+unsigned short dsp_reset_array[2] = {0x0006, 0x0002};
+/***
+base_config_array数组始终和dsp ram内的数据一直。也就是当前dsp内的数据
+每一份配置和base_config_array数据比较就知道需要修改哪些寄存器的值。
+**/
+#if 1
+static int vproc_HbiWrite(int fd, unsigned short cmd, unsigned int numwords, unsigned short *pData) {
+	int status;
+	int i = 0, j = 2;
+	int length;
+	unsigned char buf[8];
+	if ((numwords == 0) || (numwords > 126)) {
+		ALOGE("number of words is out of range. Maximum is 126\n");
+		return -1;
+	}
+
+	buf[0] = (cmd >> 8) & 0xff;
+	buf[1] = (cmd & 0xFF);
+	
+	//ALOGE("%s,buf[]=0x%02x, 0x%02x, \n", __func__, buf[0], buf[1]);
+	
+	for (i = 0; i < numwords; i++) {
+		buf[j]   = (pData[i] >> 8) & 0xFF;
+		buf[j+1] = (pData[i] & 0xFF);
+		//ALOGE("%s,0x%02x, 0x%02x, \n", __func__, buf[j], buf[j+1]);
+		j += 2;
+	}
+	//ALOGE("%s,numBytes send = 0x%02x, ", __func__, (numwords+1)*2);
+	
+	length = (numwords+1)*2;
+	i = 0;
+	do {
+		status = write(fd, buf, length);
+		if (status < 0) {
+			ALOGE("write func faile i %d\n", i);
+			return -2;
+		}
+		i++;
+	} while(status != length && i < 5);
+	return 0;
+}
+
+static int audio_write_config_array(const unsigned short (*config_array)[2], int length) {
+	
+	int i;
+	int status;
+	int fd;
+	unsigned short value;
+	fd = open(ZL380TW_PATH, O_RDWR);
+	if(fd < 0) {
+		ALOGE("open file node %s faile, fd : %d\n", ZL380TW_PATH, fd);
+		return -1;
+	}
+	
+	/*send the config to the device RAM*/
+	for (i = 0; i < length; i++) {
+		if(base_config_array[i][1] != config_array[i][1]) {
+			value = config_array[i][1];
+			status = vproc_HbiWrite(fd, config_array[i][0], 1, &value);
+			if (status != 0) {
+				/**关闭文件节点**/
+				close(fd);
+				ALOGE("%s, faile\n", __func__);
+				return -1;
+			}
+			base_config_array[i][1] = config_array[i][1];
+		}
+	}
+	
+	status = vproc_HbiWrite(fd, dsp_reset_array[0], 1, &dsp_reset_array[1]);
+	if (status != 0) {
+		/**关闭文件节点**/
+		close(fd);
+		ALOGE("%s, faile\n", __func__);
+		return -1;
+	}
+	close(fd);
+	//ALOGD("%s,write sucess\n", __func__);	
+	return 0;
+}
+
+static int set_config_on_route(unsigned int route) {
+	int length;
+	int status;
+	ALOGE("%s, route : %d\n", __func__, route);
+	switch(route) {
+	case SPEAKER_NORMAL_ROUTE:
+	case HEADPHONE_NORMAL_ROUTE:
+	case HEADSET_NORMAL_ROUTE:
+	case HDMI_NORMAL_ROUTE:
+	case SPEAKER_HEADPHONE_NORMAL_ROUTE:
+		//ALOGD("SPEAKER_NORMAL_ROUTE config start\n");
+		if (dsp_config_current != speak_config_array){
+			dsp_config_old = (dsp_config_current != speak_off_config_array) ?
+						dsp_config_current : dsp_config_old;
+			dsp_config_current = speak_config_array;
+			length = sizeof(speak_config_array)/sizeof(speak_config_array[0]);
+			status = audio_write_config_array(dsp_config_current, length);
+		}
+		//ALOGD("SPEAKER_NORMAL_ROUTE config end\n");
+		break;
+	case SPEAKER_INCALL_ROUTE:	
+	case EARPIECE_INCALL_ROUTE:
+	case HEADPHONE_INCALL_ROUTE:
+	case HEADSET_INCALL_ROUTE:
+		//ALOGD("SPEAKER_INCALL_ROUTE config start\n");
+		if (dsp_config_current != incall_config_array){
+			dsp_config_old = (dsp_config_current != speak_off_config_array) ?
+						dsp_config_current : dsp_config_old;
+			dsp_config_current = incall_config_array;
+			length = sizeof(incall_config_array)/sizeof(incall_config_array[0]);
+			status = audio_write_config_array(dsp_config_current, length);
+		}
+		//ALOGD("SPEAKER_INCALL_ROUTE config end\n");
+		break;
+
+	case HEADSET_VOIP_ROUTE:
+	case SPEAKER_VOIP_ROUTE:
+	case EARPIECE_VOIP_ROUTE:
+	case HEADPHONE_VOIP_ROUTE:
+		//ALOGD("SPEAKER_VOIP_ROUTE config start\n");
+		if (dsp_config_current != voip_config_array){
+			dsp_config_old = (dsp_config_current != speak_off_config_array) ?
+						dsp_config_current : dsp_config_old;
+			dsp_config_current = voip_config_array;
+			length = sizeof(voip_config_array)/sizeof(voip_config_array[0]);
+			status = audio_write_config_array(dsp_config_current, length);
+		}
+		//ALOGD("SPEAKER_VOIP_ROUTE config end\n");
+		break;
+	
+	case HEADSET_RINGTONE_ROUTE:
+	case SPEAKER_RINGTONE_ROUTE:
+	case EARPIECE_RINGTONE_ROUTE:
+	case SPEAKER_HEADPHONE_RINGTONE_ROUTE:
+		//ALOGD("SPEAKER_RINGTONE_ROUTE config start\n");
+		if (dsp_config_current != speak_config_array){
+			dsp_config_old = (dsp_config_current != speak_off_config_array) ?
+						dsp_config_current : dsp_config_old;
+			dsp_config_current = speak_config_array;
+			length = sizeof(speak_config_array)/sizeof(speak_config_array[0]);
+			status = audio_write_config_array(dsp_config_current, length);
+		}
+		//ALOGD("SPEAKER_RINGTONE_ROUTE config end\n");
+		break;
+	case MAIN_MIC_CAPTURE_ROUTE:
+	case HANDS_FREE_MIC_CAPTURE_ROUTE:
+		//ALOGD("MAIN_MIC_CAPTURE_ROUTE config start\n");
+		if (dsp_config_current != main_mic_config_array){
+			dsp_config_old = (dsp_config_current != speak_off_config_array) ?
+						dsp_config_current : dsp_config_old;
+			dsp_config_current = main_mic_config_array;
+			length = sizeof(main_mic_config_array)/sizeof(main_mic_config_array[0]);
+			status = audio_write_config_array(dsp_config_current, length);
+		}
+		//ALOGD("MAIN_MIC_CAPTURE_ROUTE config end\n");
+		break;
+	case INCALL_OFF_ROUTE:
+	case CAPTURE_OFF_ROUTE:
+	case VOIP_OFF_ROUTE:
+		//ALOGD("XXXX_OFF_ROUTE config start\n");
+		if(dsp_config_old != NULL) {
+			dsp_config_current = dsp_config_old;
+			status = audio_write_config_array(dsp_config_current, ARRAY_LEN);
+		}
+		//ALOGD("XXXX_OFF_ROUTE config end\n");
+		break;
+	case PLAYBACK_OFF_ROUTE:
+		//ALOGD("PLAYBACK_OFF_ROUTE config start\n");
+		
+		if (dsp_config_current != speak_off_config_array) {
+			if(dsp_config_current == main_mic_config_array){
+				/*dsp_config_old = (dsp_config_current != speak_off_config_array) ?
+							dsp_config_current : dsp_config_old;
+				dsp_config_current = main_mic_config_array;*/
+				length = sizeof(main_mic_config_array)/sizeof(main_mic_config_array[0]);
+				status = audio_write_config_array(dsp_config_current, length);
+			} else {
+				dsp_config_old = (dsp_config_current != speak_off_config_array) ?
+						dsp_config_current : dsp_config_old;
+				dsp_config_current = speak_off_config_array;
+				length = sizeof(speak_off_config_array)/sizeof(speak_off_config_array[0]);
+				status = audio_write_config_array(dsp_config_current, length);
+			}
+		}
+		//ALOGD("PLAYBACK_OFF_ROUTE config end\n");
+		break;
+	default :
+		//ALOGD("default config\n");
+		length = sizeof(speak_config_array)/sizeof(speak_config_array[0]);
+		status = audio_write_config_array(speak_config_array, length);
+		break;
+	}
+	return status;
+}
+#else 
+static int set_config_on_route(unsigned int route){ return 0;}
+#endif
+int set_config_status_route(unsigned int route) {
+	
+	FILE *file = NULL;
+	
+	set_config_on_route(route);
+	
+	switch (route) {
+	case SPEAKER_NORMAL_ROUTE:
+	case EARPIECE_NORMAL_ROUTE:
+	case SPEAKER_HEADPHONE_NORMAL_ROUTE:
+		hp_status = 0;
+		spk_status = 1;
+		break;
+	case HEADSET_NORMAL_ROUTE:
+	case HEADPHONE_NORMAL_ROUTE:
+		hp_status = 1;
+		spk_status = 0;
+		break;
+	case SPEAKER_INCALL_ROUTE:
+	case EARPIECE_INCALL_ROUTE:
+		mic_status = 0;
+		hp_status = 0;
+		spk_status = 1;
+		break;
+	case HEADSET_INCALL_ROUTE:
+	case HEADPHONE_INCALL_ROUTE:
+		mic_status = 1;
+		hp_status = 1;
+		spk_status = 0;
+		break;
+	case SPEAKER_RINGTONE_ROUTE:
+	case HEADSET_RINGTONE_ROUTE:
+	case EARPIECE_RINGTONE_ROUTE:
+	case HEADPHONE_RINGTONE_ROUTE:
+	case SPEAKER_HEADPHONE_RINGTONE_ROUTE:	
+		hp_status = 1;
+		spk_status = 1;
+		break;
+	case SPEAKER_VOIP_ROUTE:
+	case EARPIECE_VOIP_ROUTE:
+		mic_status = 0;
+		hp_status = 0;
+		spk_status = 1;
+		break;
+	case HEADSET_VOIP_ROUTE:
+	case HEADPHONE_VOIP_ROUTE:
+		mic_status = 1;
+		hp_status = 1;
+		spk_status = 0;
+		break;
+	case BLUETOOTH_SOC_MIC_CAPTURE_ROUTE:
+	case BLUETOOTH_NORMAL_ROUTE:
+	case BLUETOOTH_INCALL_ROUTE:
+	case BLUETOOTH_VOIP_ROUTE:
+		break;
+	case MAIN_MIC_CAPTURE_ROUTE:
+		mic_status = 0;
+		hp_status = 0;
+		spk_status = 1;
+		break;
+	case HANDS_FREE_MIC_CAPTURE_ROUTE:
+		mic_status = 1;
+		hp_status = 1;
+		spk_status = 0;
+		break;
+	case PLAYBACK_OFF_ROUTE:
+		spk_status = 0;
+		break;
+	case CAPTURE_OFF_ROUTE:
+		break;
+	case INCALL_OFF_ROUTE:
+		break;
+	case VOIP_OFF_ROUTE:
+		break;
+	case HDMI_NORMAL_ROUTE:
+
+	case USB_NORMAL_ROUTE:
+
+	case USB_CAPTURE_ROUTE:
+		break;
+		
+	default:
+		ALOGE("get_route_config() Error route %d", route);
+		return 0;
+	}
+	
+	if((hp_status != hp_status_old && hp_status)
+		|| (spk_status != spk_status_old && spk_status)
+		|| (mic_status != mic_status_old)) {
+		msleep(300);
+	}
+/*	if((hp_status != hp_status_old)
+		|| (spk_status != spk_status_old)
+		|| (mic_status != mic_status_old)) {
+		msleep(300);
+	}*/
+/*****************************************************/	
+	if(hp_status != hp_status_old) {
+		/******close headset*******/
+		file = fopen(HEADSET_CONTROL_NAME, "r+");
+		if(file != NULL) {
+			sprintf(w_value, "%d", hp_status);
+			fwrite(w_value, sizeof(char), 1, file);
+			fclose(file);
+			hp_status_old = hp_status;
+		}
+	}
+	if(spk_status != spk_status_old) {
+		/******open speak*******/
+		file = fopen(SPEAK_CONTROL_NAME, "r+");
+		if(file != NULL) {
+			sprintf(w_value, "%d", spk_status);
+			fwrite(w_value, sizeof(char), 1, file);
+			fclose(file);
+			spk_status_old = spk_status;
+		}
+	}
+	if(mic_status != mic_status_old) {
+		/******open mic*******/
+		file = fopen(MAIN_MIC_CONTROL_NAME, "r+");
+		if(file != NULL) {
+			sprintf(w_value, "%d", mic_status);
+			fwrite(w_value, sizeof(char), 1, file);
+			fclose(file);
+			mic_status_old = mic_status;
+		}
+	}
+/*****************************************************/		
+	return 0;
+}
+
+
diff --git a/legacy_hal/jstarAudio.h b/legacy_hal/jstarAudio.h
new file mode 100755
index 0000000..7fa97b7
--- /dev/null
+++ b/legacy_hal/jstarAudio.h
@@ -0,0 +1,16 @@
+
+#ifndef __JSTAR_AUDIO_H_
+#define __JSTAR_AUDIO_H_
+
+
+
+#define SPEAK_CONTROL_NAME 	"/sys/class/misc/spkconctrol/spkctl"
+#define HEADSET_CONTROL_NAME 	"/sys/class/misc/spkconctrol/hpctl"
+#define HEADSET_DETECT_NAME 	"/sys/class/misc/spkconctrol/hpdet"
+#define MAIN_MIC_CONTROL_NAME 	"/sys/class/misc/spkconctrol/micctl"
+
+
+//int set_config_on_route(unsigned int route);
+int set_config_status_route(unsigned int route);
+
+#endif /**__JSTAR_AUDIO_H_**/
\ No newline at end of file
diff --git a/legacy_hal/tw_ldcfg.c b/legacy_hal/tw_ldcfg.c
new file mode 100755
index 0000000..f30ce7d
--- /dev/null
+++ b/legacy_hal/tw_ldcfg.c
@@ -0,0 +1,165 @@
+#include <stdio.h>
+#include <stdlib.h>  /* malloc, free, rand */
+
+#include "./zl380tw/vproc_common.h"
+#include "./zl380tw/vprocTwolf_access.h"
+
+/*NOTE: notice that the *.c code are included in the apps-
+* This is because the compiler I'm using requires that
+* But if your makefile is such that compiler knows where to find these files
+* then remove the #include *.c below
+*/
+#if 1
+#include "./zl380tw/vproc_common.c"
+#include "./zl380tw/vprocTwolf_access.c"
+#endif
+
+#undef SAVE_CFG_TO_FLASH   /*define this macro to save the cfg from RAM to flash*/
+
+uint16 numElements;
+
+dataArr *pCr2Buf;
+/* fseekNunlines() -- The firmware file is an ascii text file.
+ * the information from fseek will not be usefull
+ * this is our own fseek equivalent
+ */
+static unsigned long fseekNunlines(FILE *BOOT_FD) {
+    uint32 line_count = 0;
+    int c;
+
+    while ( (c=fgetc(BOOT_FD)) != EOF ) {
+        if ( c == '\n' )
+            line_count++;
+    }
+    return line_count;
+}
+
+/* readCfgFile() use this function to
+ * Read the Voice processing cr2 config file into RAM
+ * filepath -- pointer to the location where to find the file
+ * pCr2Buf -- the actual firmware data array will be pointed to this buffer
+ */
+static int readCfgFile(char *filepath) {
+	unsigned int reg[2], val[2], len;
+	uint8 done = 0;
+	uint16 index = 0;
+	FILE *BOOT_FD;
+	char *s;
+	char line[512] = "";
+
+
+	BOOT_FD = fopen(filepath, "rb");
+	if (BOOT_FD != NULL) {
+		len = fseekNunlines(BOOT_FD);
+		if (len <= 0) {
+		   	printf("Error: file is not of the correct format...\n");
+		   	return -1;
+		}
+		printf("fileLength = %u\n", len);
+        /*start at the beginning of the file*/
+        //fseek(BOOT_FD, 0, SEEK_SET);
+
+		/* allocate memory to contain the reg and val:*/
+		pCr2Buf = (dataArr *) malloc(len*sizeof(dataArr));
+		if (pCr2Buf == NULL) {
+            printf ("not enough memory to allocate %u bytes.. ", len*sizeof(dataArr));
+            return -1;
+		}
+
+	    rewind(BOOT_FD);
+        /*read and format the data accordingly*/
+        numElements  = 0;
+        do {
+		   	 s = fgets(line, 512, BOOT_FD);
+		   	 if (line[0] == ';') {
+			 	 continue;
+			 } else
+			 if (s != NULL) {
+			 	 numElements++;
+			 	 sscanf(line, "%x %c %x", reg, s, val);
+			  	 pCr2Buf[index].reg = reg[0];
+			  	 pCr2Buf[index].value = val[0];
+			    // printf("pCr2Buf[%d].reg pCr2Buf[%d].value  = 0x%04x\t0x%04x\n", index, index, pCr2Buf[index].reg, pCr2Buf[index].value);
+			  	 index++;
+			  } else { done = 1;}
+
+        } while (done == 0);
+
+        fclose(BOOT_FD);
+		printf ("size of pCr2Buf = %u bytes.. \n", sizeof(pCr2Buf));
+	} else {
+	  	printf("Error: can't open file\n");
+	}
+	return 0;
+}
+
+/*This example host app load the *.s3 firmware to the device RAM. Optionally save it to flash
+ * Then start the firmware from the execution address in RAM
+ * It then stops the firmware - Load the cr2 file into RAM. Optionally save it to flash
+ * Then resstarts the firmware
+ */
+
+int main (int argc, char** argv) {
+
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+
+
+	if (argc != 2) {
+	    printf("Error: argc = %d - missing %d arg(s)... \n", argc, 3-(argc-1));
+		printf("command Usage:%s ConfigPath\n", argv[0]);
+		exit(1);
+	}
+    printf(":%s %s\n", argv[0], argv[1]);
+
+ 
+    /*global file handle*/
+    status = VprocTwolfHbiInit();
+
+    if (status < 0)
+    {
+        perror("tw_spi_access open");
+        return -1;
+    }
+
+    if (readCfgFile(argv[1]) < 0){
+	    printf("Error:read %s file\n", argv[1]);
+    }
+    printf("a- Reading config file to host RAM - done....\n");
+
+
+    printf("c- Loading the config file into the device RAM\n");
+	status  = VprocTwolfLoadConfig(pCr2Buf, numElements);
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfLoadConfig()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+    dataArr dspreset;
+    dspreset.reg = 0x0006;
+    dspreset.value = 0x0002;
+    	status  = VprocTwolfLoadConfig(&dspreset, 1);
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:dsp reset falied\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+
+#ifdef SAVE_CONFIG_TO_FLASH
+   status = VprocTwolfSaveCfgToFlash();
+   if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfSaveCfgToFlash()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+   }
+   printf("d- Saving config to flash- done....\n");
+#endif
+
+    printf("e- Loading config record - done....\n");
+    free(pCr2Buf);
+    pCr2Buf = NULL;
+    VprocTwolfHbiCleanup();
+
+    return 0;
+}
+
+
diff --git a/legacy_hal/zl380tw/VprocTw_Hal.c b/legacy_hal/zl380tw/VprocTw_Hal.c
new file mode 100755
index 0000000..07b61ec
--- /dev/null
+++ b/legacy_hal/zl380tw/VprocTw_Hal.c
@@ -0,0 +1,233 @@
+#include "VprocTw_Hal.h"
+
+/*HAL Init function - To open a file connection to the 
+ * microsemi zl380xx_tw kernel char driver. This function must be called by
+ * application initialization routine.
+ *
+ * return: a positive integer value for success, a negative value for failure
+ */
+static int VprocHALInit(void)
+{
+    int status = 0;
+	printf(" VprocHALInit():1!!!!\n");
+    char *file_name = "/dev/zl380tw";
+    /*global file handle*/
+	printf(" VprocHALInit():2!!!!\n");
+    gTwolf_fd = -1;
+    gTwolf_fd = open(file_name, O_RDWR);
+	printf(" VprocHALInit():3!!!!\n");
+    if (gTwolf_fd == -1)
+    {
+        perror("unble to open /dev/zl380tw "
+        " make sure the driver is installed in the kernel");
+        return -1;
+    }
+	printf(" VprocHALInit():4!!!!\n");
+    return status;
+}
+
+/*HAL clean up function - To close any open file connection
+ * microsemi zl380xx_tw kernel kernel char driver
+ *
+ * return: a positive integer value for success, a negative value for failure
+ */
+static void VprocHALcleanup(void)
+{
+    /*global file handle*/
+    if (gTwolf_fd != -1) 
+       close(gTwolf_fd);
+    gTwolf_fd = -1;
+}
+
+
+/*HAL read function - To read from the microsemi_spis_tw kernel char driver
+ * [param in] pData    - pointer to the data read 
+ * [param in] numBytes - the number of bytes to write
+ *
+ * return: a positive integer value for success, a negative value for failure
+ */
+static int VprocHALread(unsigned char *pData, unsigned short numBytes)
+{
+    int status = 0;
+    if (gTwolf_fd < 0) {
+        return -1;         
+    } 
+    status = read(gTwolf_fd, pData, numBytes);
+    if (status < 0) {
+        perror("microsemi_spis_tw_read driver");
+    }
+    return status;
+}
+
+/* HAL write function - To write to the microsemi_spis_tw kernel char driver
+ * [param in] pData    - pointer to the data to write 
+ * [param in] numBytes - the number of bytes to write
+ *
+ * return: a positive integer value for success, a negative value for failure
+ */
+static int VprocHALwrite(unsigned char *pData, unsigned short numBytes)
+{
+    int status = 0;
+    if (gTwolf_fd < 0) {
+        return -1;         
+    } 
+    status = write(gTwolf_fd, pData, numBytes);
+    if (status < 0) {
+        perror("microsemi_spis_tw_write driver");
+    }
+    return status;
+}
+
+/* HAL IOCTL functions 
+ * [param in] cmd      - The IOCTL command as defined within microsemi_spis_tw.h
+ * [param in] *arg     - the data to pass to the kernel driver funtion
+ *
+ * return: a positive integer value for success, a negative value for failure
+ */
+static int ioctlHALfunctions (unsigned int cmd, void* arg) 
+{
+    int status = 0;	
+    if (gTwolf_fd < 0) {
+        return -1;         
+    } 
+
+    switch (cmd) {
+    	case TWOLF_BOOT_PREPARE :
+            status = ioctl(gTwolf_fd, TWOLF_BOOT_PREPARE);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_BOOT_PREPARE");
+                return status;
+            } 
+                  	
+        break;	
+    	case TWOLF_BOOT_SEND_MORE_DATA: {
+            status = ioctl(gTwolf_fd, TWOLF_BOOT_SEND_MORE_DATA, (char *)arg);	 
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_BOOT_SEND_MORE_DATA");
+                return status;
+            } 
+            
+    	    break;
+    	}
+    	case TWOLF_BOOT_CONCLUDE :
+            status = ioctl(gTwolf_fd, TWOLF_BOOT_CONCLUDE);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_BOOT_PREPARE");
+                return status;
+            } 
+                  	
+    	break;	
+    	
+    	case TWOLF_CMD_PARAM_REG_ACCESS : {      
+            /* Send a mailbox command and release the mailbox right to the host*/
+            status = ioctl(gTwolf_fd, TWOLF_CMD_PARAM_REG_ACCESS, (unsigned short *)arg);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_CMD_PARAM_REG_ACCESS");
+                return status; 
+            } 
+                      	
+            break;
+        }
+    	case TWOLF_CMD_PARAM_RESULT_CHECK :
+            status = ioctl(gTwolf_fd, TWOLF_CMD_PARAM_RESULT_CHECK);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_CMD_PARAM_RESULT_CHECK");
+                return status;
+            }       
+            
+       	break;
+    	case TWOLF_RESET : {
+             
+            status = ioctl(gTwolf_fd, TWOLF_RESET, (unsigned short *)arg);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_RESET");
+                return status;
+            }           
+            
+    	    break;
+        }
+    	case TWOLF_SAVE_FWR_TO_FLASH :
+            status = ioctl(gTwolf_fd, TWOLF_SAVE_FWR_TO_FLASH);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_SAVE_FWR_TO_FLASH");
+                return status;
+            }          
+            
+    	break;
+    	case TWOLF_SAVE_CFG_TO_FLASH :
+
+            status = ioctl(gTwolf_fd, TWOLF_SAVE_CFG_TO_FLASH);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_SAVE_CFG_TO_FLASH");
+                return status;
+            }          
+        
+            
+    	break;
+    	case TWOLF_HBI_INIT : {
+            if (ioctl(gTwolf_fd, TWOLF_HBI_INIT, (unsigned short *)arg) == -1)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_HBI_INIT");
+                return -1;
+            } 
+                     
+    	    break;
+        }
+    	case TWOLF_LOAD_FWRCFG_FROM_FLASH : {
+            if (ioctl(gTwolf_fd, TWOLF_LOAD_FWRCFG_FROM_FLASH, (unsigned short *)arg) == -1)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_LOAD_FWRCFG_FROM_FLASH");
+                return -1;
+            }           
+    	    break;
+        }
+    	case TWOLF_LOAD_FWR_FROM_FLASH : {
+            if (ioctl(gTwolf_fd, TWOLF_LOAD_FWR_FROM_FLASH, (unsigned short *)arg) == -1)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_LOAD_FWR_FROM_FLASH");
+                return -1;
+            }           
+    	    break;
+        }
+    	case TWOLF_ERASE_ALL_FLASH :
+            status = ioctl(gTwolf_fd, TWOLF_ERASE_ALL_FLASH);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_ERASE_ALL_FLASH");
+                return status;
+            }        
+            
+    	break;
+    	case TWOLF_STOP_FWR :
+            status = ioctl(gTwolf_fd, TWOLF_STOP_FWR);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_STOP_FWR");
+                return status;
+            }                  
+            
+    	break;
+    	case TWOLF_START_FWR :
+            status = ioctl(gTwolf_fd, TWOLF_START_FWR);
+            if (status < 0)
+            {
+                perror("microsemi_spis_tw ioctl TWOLF_START_FWR");
+                return status;
+            }                  
+            
+    	break;
+    	default: {
+            perror("Invalid IOTCL!!!\n");
+           return -1; 
+        }   
+     }
+     return 0;
+}
diff --git a/legacy_hal/zl380tw/VprocTw_Hal.h b/legacy_hal/zl380tw/VprocTw_Hal.h
new file mode 100755
index 0000000..64b1fce
--- /dev/null
+++ b/legacy_hal/zl380tw/VprocTw_Hal.h
@@ -0,0 +1,19 @@
+#ifndef __VPROCTW_HAL_
+#define __VPROCTW_HAL_
+
+#include <sys/ioctl.h>
+#include <linux/types.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include "zl380tw.h"
+//#include <linux/spi/zl380tw.h>
+
+int gTwolf_fd;
+static int VprocHALInit(void);
+static void VprocHALcleanup(void);
+static int VprocHALread(unsigned char *pData, unsigned short numBytes);
+static int VprocHALwrite(unsigned char *pData, unsigned short numBytes);
+static int ioctlHALfunctions (unsigned int cmd, void* arg); 
+
+#endif
\ No newline at end of file
diff --git a/legacy_hal/zl380tw/tw_ldcfg.c b/legacy_hal/zl380tw/tw_ldcfg.c
new file mode 100755
index 0000000..f8b8d8b
--- /dev/null
+++ b/legacy_hal/zl380tw/tw_ldcfg.c
@@ -0,0 +1,156 @@
+#include <stdio.h>
+#include <stdlib.h>  /* malloc, free, rand */
+
+#include "vproc_common.h"
+#include "vprocTwolf_access.h"
+
+/*NOTE: notice that the *.c code are included in the apps-
+* This is because the compiler I'm using requires that
+* But if your makefile is such that compiler knows where to find these files
+* then remove the #include *.c below
+*/
+#if 1
+#include "vproc_common.c"
+#include "vprocTwolf_access.c"
+#endif
+
+#undef SAVE_CFG_TO_FLASH   /*define this macro to save the cfg from RAM to flash*/
+
+static uint16 numElements;
+
+static dataArr *pCr2Buf;
+/* fseekNunlines() -- The firmware file is an ascii text file.
+ * the information from fseek will not be usefull
+ * this is our own fseek equivalent
+ */
+static unsigned long fseekNunlines(FILE *BOOT_FD) {
+    uint32 line_count = 0;
+    int c;
+
+    while ( (c=fgetc(BOOT_FD)) != EOF ) {
+        if ( c == '\n' )
+            line_count++;
+    }
+    return line_count;
+}
+
+/* readCfgFile() use this function to
+ * Read the Voice processing cr2 config file into RAM
+ * filepath -- pointer to the location where to find the file
+ * pCr2Buf -- the actual firmware data array will be pointed to this buffer
+ */
+static int readCfgFile(char *filepath) {
+	unsigned int reg[2], val[2], len;
+	uint8 done = 0;
+	uint16 index = 0;
+	FILE *BOOT_FD;
+	char *s;
+	char line[512] = "";
+
+
+	BOOT_FD = fopen(filepath, "rb");
+	if (BOOT_FD != NULL) {
+		len = fseekNunlines(BOOT_FD);
+		if (len <= 0) {
+		   	printf("Error: file is not of the correct format...\n");
+		   	return -1;
+		}
+		printf("fileLength = %u\n", len);
+        /*start at the beginning of the file*/
+        //fseek(BOOT_FD, 0, SEEK_SET);
+
+		/* allocate memory to contain the reg and val:*/
+		pCr2Buf = (dataArr *) malloc(len*sizeof(dataArr));
+		if (pCr2Buf == NULL) {
+            printf ("not enough memory to allocate %u bytes.. ", len*sizeof(dataArr));
+            return -1;
+		}
+
+	    rewind(BOOT_FD);
+        /*read and format the data accordingly*/
+        numElements  = 0;
+        do {
+		   	 s = fgets(line, 512, BOOT_FD);
+		   	 if (line[0] == ';') {
+			 	 continue;
+			 } else
+			 if (s != NULL) {
+			 	 numElements++;
+			 	 sscanf(line, "%x %c %x", reg, s, val);
+			  	 pCr2Buf[index].reg = reg[0];
+			  	 pCr2Buf[index].value = val[0];
+			    // printf("pCr2Buf[%d].reg pCr2Buf[%d].value  = 0x%04x\t0x%04x\n", index, index, pCr2Buf[index].reg, pCr2Buf[index].value);
+			  	 index++;
+			  } else { done = 1;}
+
+        } while (done == 0);
+
+        fclose(BOOT_FD);
+		printf ("size of pCr2Buf = %u bytes.. \n", sizeof(pCr2Buf));
+	} else {
+	  	printf("Error: can't open file\n");
+	}
+	return 0;
+}
+
+/*This example host app load the *.s3 firmware to the device RAM. Optionally save it to flash
+ * Then start the firmware from the execution address in RAM
+ * It then stops the firmware - Load the cr2 file into RAM. Optionally save it to flash
+ * Then resstarts the firmware
+ */
+#if 0
+int main (int argc, char** argv) {
+
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+
+
+	if (argc != 2) {
+	    printf("Error: argc = %d - missing %d arg(s)... \n", argc, 3-(argc-1));
+		printf("command Usage:%s ConfigPath\n", argv[0]);
+		exit(1);
+	}
+    printf(":%s %s %s\n", argv[0], argv[1], argv[2]);
+
+ 
+    /*global file handle*/
+    status = VprocTwolfHbiInit();
+
+    if (status < 0)
+    {
+        perror("tw_spi_access open");
+        return -1;
+    }
+
+    if (readCfgFile(argv[1]) < 0){
+	    printf("Error:read %s file\n", argv[1]);
+    }
+    printf("a- Reading config file to host RAM - done....\n");
+
+
+    printf("c- Loading the config file into the device RAM\n");
+	status  = VprocTwolfLoadConfig(pCr2Buf, numElements);
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfLoadConfig()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+
+#ifdef SAVE_CONFIG_TO_FLASH
+   status = VprocTwolfSaveCfgToFlash();
+   if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfSaveCfgToFlash()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+   }
+   printf("d- Saving config to flash- done....\n");
+#endif
+
+    printf("e- Loading config record - done....\n");
+    free(pCr2Buf);
+    pCr2Buf = NULL;
+    VprocTwolfHbiCleanup();
+
+    return 0;
+}
+#endif
+
diff --git a/legacy_hal/zl380tw/tw_ldfwcfg.c b/legacy_hal/zl380tw/tw_ldfwcfg.c
new file mode 100755
index 0000000..ee24339
--- /dev/null
+++ b/legacy_hal/zl380tw/tw_ldfwcfg.c
@@ -0,0 +1,244 @@
+#include <stdio.h>
+#include <stdlib.h>  /* malloc, free, rand */
+
+#include "vproc_common.h"
+#include "vprocTwolf_access.h"
+
+/*NOTE: notice that the *.c code are included in the apps-
+* This is because the compiler I'm using requires that
+* But if your makefile is such that compiler knows where to find these files
+* then remove the #include *.c below
+*/
+#if 1
+#include "vproc_common.c"
+#include "vprocTwolf_access.c"
+#endif
+
+#define SAVE_IMAGE_TO_FLASH
+#define SAVE_CFG_TO_FLASH
+//#undef SAVE_IMAGE_TO_FLASH /*define this macro to save the firmware from RAM to flash*/
+//#undef SAVE_CFG_TO_FLASH   /*define this macro to save the cfg from RAM to flash*/
+/*quick test*/
+
+uint16 numElements;
+
+dataArr *pCr2Buf;
+/* fseekNunlines() -- The firmware file is an ascii text file.
+ * the information from fseek will not be usefull
+ * this is our own fseek equivalent
+ */
+static unsigned long fseekNunlines(FILE *BOOT_FD) {
+    uint32 line_count = 0;
+    int c;
+
+    while ( (c=fgetc(BOOT_FD)) != EOF ) {
+        if ( c == '\n' )
+            line_count++;
+    }
+    return line_count;
+}
+
+/* readCfgFile() use this function to
+ * Read the Voice processing cr2 config file into RAM
+ * filepath -- pointer to the location where to find the file
+ * pCr2Buf -- the actual firmware data array will be pointed to this buffer
+ */
+static int readCfgFile(char *filepath) {
+	unsigned int reg[2], val[2], len;
+	uint8 done = 0;
+	uint16 index = 0;
+	FILE *BOOT_FD;
+	char *s;
+	char line[512] = "";
+
+
+	BOOT_FD = fopen(filepath, "rb");
+	if (BOOT_FD != NULL) {
+		len = fseekNunlines(BOOT_FD);
+		if (len <= 0) {
+			printf("Error: file is not of the correct format...\n");
+			return -1;
+		}
+		//printf("fileLength = %u\n", len);
+		/*start at the beginning of the file*/
+		//fseek(BOOT_FD, 0, SEEK_SET);
+
+		/* allocate memory to contain the reg and val:*/
+		pCr2Buf = (dataArr *) malloc(len*sizeof(dataArr));
+		if (pCr2Buf == NULL) {
+			printf ("not enough memory to allocate %u bytes.. ", len*sizeof(dataArr));
+			return -1;
+		}
+
+		rewind(BOOT_FD);
+		/*read and format the data accordingly*/
+		numElements  = 0;
+
+		do {
+			s = fgets(line, 512, BOOT_FD);
+			if (line[0] == ';') {
+				continue;
+			} else if (s != NULL) {
+				numElements++;
+				sscanf(line, "%x %c %x", reg, s, val);
+				pCr2Buf[index].reg = reg[0];
+				pCr2Buf[index].value = val[0];
+				// printf("pCr2Buf[%d].reg pCr2Buf[%d].value  = 0x%04x\t0x%04x\n", index, index, pCr2Buf[index].reg, pCr2Buf[index].value);
+				index++;
+			} else { 
+				done = 1;
+			}
+
+        } while (done == 0);
+
+        fclose(BOOT_FD);
+		//printf ("size of pCr2Buf = %u bytes.. \n", len*sizeof(pCr2Buf));
+	} else {
+	  	printf("Error: can't open file\n");
+	}
+	return 0;
+}
+
+static int codec_write_reg(int addr,int numwords,int value)
+{    
+	int val[1];
+	int status = -1;
+	val[0] = value;
+	//WRITE_INFOINFOOPEN();
+	status  = VprocTwolfHbiWrite(addr, numwords, val);
+	//LOGD("***************************%d**********%x*",status,value);
+	if (status != VPROC_STATUS_SUCCESS)
+	{
+		printf("Error %d:VprocTwolfHbiWrite()\n", status);
+		VprocTwolfHbiCleanup();
+		//WRITE_INFOINFOCLOSE();
+		return -1;
+	}
+	//WRITE_INFOINFOCLOSE();
+	return 0;
+}
+
+/*This example host app load the *.s3 firmware to the device RAM. Optionally save it to flash
+ * Then start the firmware from the execution address in RAM
+ * It then stops the firmware - Load the cr2 file into RAM. Optionally save it to flash
+ * Then resstarts the firmware
+ */
+int main (int argc, char** argv) {
+
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+    FILE *BOOT_FD;
+    int ret;
+    char line[256] = "";
+
+
+	if (argc < 3) {
+	    printf("Error: argc = %d - missing %d arg(s)... \n", argc, 3-(argc-1));
+		printf("command Usage:%s firmwarePath ConfigPath\n", argv[0]);
+		exit(1);
+	}
+    printf(":%s %s %s\n", argv[0], argv[1], argv[2]);
+
+
+	BOOT_FD = fopen(argv[1], "rb");
+	if (BOOT_FD == NULL) {
+	    printf("Error: can't open file %s\n", argv[1]);
+	    return -1;
+	}
+    /*global file handle*/
+    status = VprocTwolfHbiInit();
+    //gTwolf_fd = open(file_name, O_RDWR);
+	if (status < 0) {
+        perror("tw_spi_access open");
+        return -1;
+    }
+
+    printf("1- Opening firmware file - done....\n");
+
+
+	status  = VprocTwolfHbiBootPrepare();
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfHbiBootPrepare()\n", status);
+        fclose(BOOT_FD);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+    printf("-- Boot prepare - done....\n");
+    
+    while (fgets(line, 256, BOOT_FD) != NULL) {
+        status = VprocTwolfHbiBootMoreData(line);
+        if (status == VPROC_STATUS_BOOT_LOADING_MORE_DATA) {
+            continue;
+        } else if (status == VPROC_STATUS_BOOT_LOADING_CMP) {
+        
+            break ;              
+        } else if (status != VPROC_STATUS_SUCCESS) {        
+            printf("Error %d:VprocTwolfHbiBootMoreData()\n", status);
+            fclose(BOOT_FD);
+            VprocTwolfHbiCleanup();
+            return -1;
+        }
+	}
+    printf("-- Firmware data transfer - done....\n");	
+    fclose(BOOT_FD);
+
+    status  = VprocTwolfHbiBootConclude();
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfHbiBootConclude()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+
+#ifdef SAVE_IMAGE_TO_FLASH
+    printf("-- Saving firmware to flash....\n");
+    status = VprocTwolfSaveImgToFlash();
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfSaveImgToFlash()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+    printf("-- Saving firmware to flash....done\n");
+
+#endif
+
+	status  = VprocTwolfFirmwareStart();
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfFirmwareStart()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+
+    printf("3- Loading the config file into the device RAM\n");
+    if (readCfgFile(argv[2]) < 0){
+	    printf("Error:read %s file\n", argv[2]);
+    }
+    printf("a- Reading config file to host RAM - done....\n");
+
+
+	status  = VprocTwolfLoadConfig(pCr2Buf, numElements);
+    if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfLoadConfig()\n", status);
+        VprocTwolfHbiCleanup();
+        return -1;
+    }
+
+#ifdef SAVE_CFG_TO_FLASH
+   printf("-- Saving config to flash....\n");
+   status = VprocTwolfSaveCfgToFlash();
+   if (status != VPROC_STATUS_SUCCESS) {
+        printf("Error %d:VprocTwolfSaveCfgToFlash()\n", status);
+        VprocTwolfHbiCleanup();        
+        return -1;
+   }
+    printf("-- Saving config to flash....done\n");
+
+#endif
+    printf("Device boot loading completed successfully...\n");
+	ret = codec_write_reg(0x0006,1,0x0002);
+	printf("success reset soft...\n");
+	free(pCr2Buf);
+	pCr2Buf = NULL;
+	VprocTwolfHbiCleanup();
+	return 0;
+}
+
+
diff --git a/legacy_hal/zl380tw/vprocTwolf_access.c b/legacy_hal/zl380tw/vprocTwolf_access.c
new file mode 100755
index 0000000..b9b30da
--- /dev/null
+++ b/legacy_hal/zl380tw/vprocTwolf_access.c
@@ -0,0 +1,786 @@
+/*
+ * User Space API wrapper for the "/dev/microsemi_spis_tw" linux kernel driver
+ * A host can use these functions to access the the microsemi Z
+ * L38040/050/051/060/080 Voice Processing devices over a spi interface.  
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * Microsemi Inc. 2014, Jean Bony
+ */
+
+#include "vprocTwolf_access.h"
+ 
+/* VprocTwolfcmdRegWr(): use this function to
+ *   access the host command register
+ *
+ * Input Argument: cmd - the command to send
+ * Return: (VprocStatusType) type error code (0 = success, else= fail)
+ */
+#if 0 /*not used*/
+static VprocStatusType VprocTwolfcmdRegWr(unsigned short cmd)
+{
+    int status = 0;
+
+    /* Send a mailbox command and release the mailbox right to the host*/
+
+    status = ioctlHALfunctions(TWOLF_CMD_PARAM_REG_ACCESS, &cmd);
+    if (status < 0)
+    {
+        return VPROC_STATUS_ERR_HBI;
+    } 
+    return status;       
+}
+
+static VprocStatusType VprocTwolfCheckCmdResult(void)
+{
+    int status = 0;
+    /* verify the status of the last mailbox command*/
+
+    status = ioctlHALfunctions(TWOLF_CMD_PARAM_RESULT_CHECK, NULL);
+    if (status !=0) {
+        VPROG_DBG_ERROR("Command failed...Resultcode = 0x%04x\n", status);
+        return VPROC_STATUS_ERR_VERIFY;
+    }
+     /*wait*/
+    return VPROC_STATUS_SUCCESS;
+}
+#endif
+/******************************************************************************
+ * TwolfPagedWrite()
+ * This function selects the specified page, writes the number of specified
+ * words, starting at the specified offset from a source buffer.
+ *
+ * \param[in] page Page to select
+ * \param[in] offset Offset of the requested Page to read from
+ * \param[in] numWords Number of words to read starting from the offset
+ * \param[in] pSrc Pointer to the date to write
+ *
+ * \retval ::VP_STATUS_SUCCESS
+ * \retval ::VP_STATUS_ERR_HBI
+ ******************************************************************************/
+static VprocStatusType
+TwolfHbiPage255Write(
+    unsigned char page,
+    unsigned char offset,
+    unsigned char numWords,
+    unsigned short *pDdata)
+{
+    uint16 cmdWrd = (uint16)(page<<8) | (uint16)offset;
+	if (VprocTwolfHbiWrite(cmdWrd, numWords, pDdata)!= VPROC_STATUS_SUCCESS) {
+        return VPROC_STATUS_ERR_HBI;
+    }
+    return VPROC_STATUS_SUCCESS;
+} /* TwolfHbiPagedWrite() */
+
+/*------------------------------------------------------
+ * Higher level functions - Can be called by a host application
+ *------------------------------------------------------*/
+
+/*VprocTwolfHbiRead - use this function to read up to 252 words from the device
+ * \param[in] cmd of the requested device register to read from
+ * \param[in] numWords Number of words to read starting from the offset
+ * \param[in] pData Pointer to the data read
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+static VprocStatusType VprocTwolfHbiRead(
+    unsigned short cmd,   /*register to read from*/
+    unsigned char numwords,
+    unsigned short *pData)
+{
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+    int i=0, j=0;
+    unsigned char buf[256];
+
+    if ((numwords == 0) || (numwords > 126)) {
+        VPROG_DBG_ERROR("number of words is out of range. Maximum is 126\n");
+        return VPROC_STATUS_INVALID_ARG;
+    }
+   	buf[0] = (cmd >> 8) & 0xff;
+   	buf[1] = (cmd & 0xFF) ;
+
+    status = VprocHALread(buf, numwords*2);
+    if (status < 0) {
+        return VPROC_STATUS_ERR_HBI;
+    }
+
+    /*print the data - status is the total number of bytes received*/
+    for (i = 0; i < numwords; i++) {
+        *(pData+i) = (buf[j]<<8) | buf[j+1];
+        j +=2;
+        VPROG_DBG_INFO("RD: addr 0x%04x = 0x%04x\n", (cmd+i), *(pData+i)); 
+                                                          
+    }
+    return VPROC_STATUS_SUCCESS;
+}
+
+/*VprocTwolfHbiWrite - use this function to write up to 252 words to the device
+ * \param[in] cmd of the requested device register to write to
+ * \param[in] numWords Number of words to write starting from the offset
+ * \param[in] pData Pointer to the data to write
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+VprocStatusType VprocTwolfHbiWrite(
+    unsigned short cmd,   /*register to read from*/
+    unsigned char numwords,
+    unsigned short *pData)
+{
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+    int i=0, j=2;
+    unsigned char buf[256];
+    if ((numwords == 0) || (numwords > 126)) {
+        VPROG_DBG_INFO("number of words is out of range. Maximum is 126\n");
+        return VPROC_STATUS_INVALID_ARG;
+    }
+
+   	buf[0] = (cmd >> 8) & 0xff;
+   	buf[1] = (cmd & 0xFF);
+   	VPROG_DBG_INFO("%s,buf[]=0x%02x, 0x%02x, \n", __func__, buf[0], buf[1]);
+    for (i=0;i<numwords;i++) {
+        buf[j]   = (pData[i] >> 8) & 0xFF;
+        buf[j+1] = (pData[i] & 0xFF);
+        VPROG_DBG_INFO("%s,0x%02x, 0x%02x, \n", __func__, buf[j], buf[j+1]);
+        j += 2;
+    }
+    VPROG_DBG_INFO("%s,numBytes send = 0x%02x, ", __func__, (numwords+1)*2);
+    /*add the command type bytes in the count*/
+    status = VprocHALwrite(buf, (numwords+1)*2);	
+    if (status < 0) {
+        VPROG_DBG_ERROR("%s, microsemi_spis_tw_write driver\n", __func__); 
+        return VPROC_STATUS_WR_FAILED;    
+    }    
+    return VPROC_STATUS_SUCCESS;
+}
+
+/*VprocTwolfHbiInit - use this function to initialize the device HBI
+ *   This function must be the first function called by the application in order
+ * to configure the interface before any of the API function can 
+ * communicate with the device
+ * at startup during the system init
+ *   Configure the HBI_CONFIG_VAL as per the host system. But default
+ *   config is good for most cases. See HBI section in device datasheet for 
+ *   details
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+VprocStatusType VprocTwolfHbiInit(void)
+{   
+	printf(" VprocTwolfHbiInit:start!!!!\n");            
+	unsigned short buf = HBI_CONFIG_VAL;
+	if (VprocHALInit() < 0){
+		printf(" VprocHALInit():start!!!!\n");
+		return VPROC_STATUS_DEV_NOT_INITIALIZED;
+	}           
+	if (ioctlHALfunctions(TWOLF_HBI_INIT, &buf) < 0){
+		printf(" ioctlHALfunctions:start!!!!\n");
+		return VPROC_STATUS_INIT_FAILED;
+	}           
+	return VPROC_STATUS_SUCCESS;
+}
+
+/*VprocTwolfHbiCleanup - To close any open communication path to
+ * to the device
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+VprocStatusType VprocTwolfHbiCleanup(void)
+{                
+    VprocHALcleanup();          
+    return VPROC_STATUS_SUCCESS;
+}
+
+
+/*VprocTwolfHbiDeviceCheck - Check whether the HBI and the device are working
+ * properly
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+static VprocStatusType VprocTwolfHbiDeviceCheck(void)
+{                
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+    uint16 buf[2] = {0x1234, 0x5678};
+    status = VprocTwolfHbiWrite(0x00C, 2, buf);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("Can not communicate with the device !!!\n\n");  
+        return VPROC_STATUS_ERR_HBI;
+    }
+	status  = VprocTwolfHbiRead(0x00C, 2, buf);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("Can not communicate with the device !!!\n\n");  
+        return VPROC_STATUS_ERR_HBI;
+    }
+    if ((buf[0] != 0x1234) && (buf[1] != 0x5600)) {
+           VPROG_DBG_ERROR("Device is not responding properly !!!\n\n");  
+           return VPROC_STATUS_ERR_HBI;   
+    }
+          
+    return VPROC_STATUS_SUCCESS;
+}
+
+/*VprocTwolfLoadConfig() - use this function to load a custom or new config 
+ * record into the device RAM to override the default config
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+static VprocStatusType VprocTwolfLoadConfig(dataArr *pCr2Buf, unsigned short numElements)
+{
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+    unsigned short i, buf;
+    /*stop the current firmware but do not reset the device and do not go to boot mode*/
+
+    /*send the config to the device RAM*/
+    for (i=0; i<numElements; i++) {
+        buf = pCr2Buf[i].value;
+        status = VprocTwolfHbiWrite(pCr2Buf[i].reg, 1, &buf);
+        if (status != VPROC_STATUS_SUCCESS) {
+            return VPROC_STATUS_ERR_HBI;
+        }
+
+    }
+    
+    return status;
+}
+
+/* These 3 functions provide an alternative method to loading an *.s3
+ *  firmware image into the device
+ * Procedure:
+ * 1- Call VprocTwolfHbiBootPrepare() to put the device in boot mode
+ * 2- Call the VprocTwolfHbiBootMoreData() repeatedly by passing it a pointer
+ *    to one line of the *.s3 image at a time until the full image (all lines)
+ *    are transferred to the device successfully.
+ *    When the transfer of a line is complete, this function will return the sta-
+ *    tus VPROC_STATUS_BOOT_LOADING_MORE_DATA. Then when all lines of the image
+ *    are transferred the function will return the status 
+ *         VPROC_STATUS_BOOT_LOADING_CMP
+ * 3- VprocTwolfHbiBootConclude() to complete and verify the image boot loading
+ *    process 
+ *    
+ */
+static VprocStatusType VprocTwolfHbiBootPrepare(void){
+                
+	VprocStatusType status = VPROC_STATUS_SUCCESS;	
+
+	status = ioctlHALfunctions(TWOLF_BOOT_PREPARE, NULL);
+	if (status != VPROC_STATUS_SUCCESS) {
+		return VPROC_STATUS_FW_LOAD_FAILED;
+	} 
+	return status;          
+}
+
+
+VprocStatusType VprocTwolfHbiBootMoreData(char *blockOfFwrData) 
+{
+    //return ioctl(twolf_fd, TWOLF_BOOT_SEND_MORE_DATA, blockOfFwrData);
+    return ioctlHALfunctions(TWOLF_BOOT_SEND_MORE_DATA, blockOfFwrData);
+       
+}
+
+
+static VprocStatusType VprocTwolfHbiBootConclude(void)
+{
+	VprocStatusType status = VPROC_STATUS_SUCCESS;
+
+	status = ioctlHALfunctions(TWOLF_BOOT_CONCLUDE, NULL);
+	if (status != VPROC_STATUS_SUCCESS) {
+		return VPROC_STATUS_FW_LOAD_FAILED;
+	}        
+	return status;            
+}
+
+
+/* HbiSrecBoot_alt() Use this alternate method to load the st_twFirmware.c 
+ *(converted *.s3 to c code) to the device
+ */
+static VprocStatusType HbiSrecBoot_alt(
+    twFirmware *st_firmware)
+{
+    uint16 index = 0;
+    uint16 gTargetAddr[2] = {0,0};
+    
+    VprocStatusType status = VPROC_STATUS_SUCCESS;
+    
+    
+    while (index < st_firmware->twFirmwareStreamLen) {
+
+	/* put the address into our global target addr */
+	gTargetAddr[0] = (uint16)((st_firmware->st_Fwr[index].targetAddr & 0xFFFF0000)>>16);
+	gTargetAddr[1] = (uint16)(st_firmware->st_Fwr[index].targetAddr & 0x0000FFFF);
+
+	VPROG_DBG_INFO("gTargetAddr[0] = 0x%04x, gTargetAddr[1] = 0x%04x: \n", gTargetAddr[0], gTargetAddr[1]);
+
+	VPROG_DBG_INFO("numWords = %d: \n", st_firmware->st_Fwr[index].numWords);
+
+	/* write the data to the device */
+	if (st_firmware->st_Fwr[index].numWords != 0) {
+		uint8 offset = gTargetAddr[1] & 0x00FF;
+		gTargetAddr[1] &= 0xFF00; /*zero out the lsbyte*/                                    
+		if (st_firmware->st_Fwr[index].useTargetAddr) {
+			status = VprocTwolfHbiWrite(PAGE_255_BASE_HI_REG, 2, gTargetAddr);
+			if (status != VPROC_STATUS_SUCCESS) {
+			    VPROG_DBG_ERROR("Unable to set gTargetAddr[0] = 0x%04x,"" gTargetAddr[1] = 0x%04x: \n", gTargetAddr[0], gTargetAddr[1]);
+			    return VPROC_STATUS_ERR_HBI;
+			}
+		}
+		status = TwolfHbiPage255Write(0xFF, offset, st_firmware->st_Fwr[index].numWords, st_firmware->st_Fwr[index].buf);
+		if(status != VPROC_STATUS_SUCCESS) {
+			VPROG_DBG_ERROR("status = %d, numWords = %d: \n", status, st_firmware->st_Fwr[index].numWords);
+			return status;
+		}
+	}
+	index++;
+    }
+
+    /*
+     * convert the number of bytes to two 16 bit
+     * values and write them to the requested page register
+     */
+    /* even number of bytes required */
+
+    /* program the program's execution start register */
+    gTargetAddr[0] = (uint16)((st_firmware->execAddr & 0xFFFF0000) >> 16);
+    gTargetAddr[1] = (uint16)(st_firmware->execAddr & 0x0000FFFF);
+    status = VprocTwolfHbiWrite(0x12C, 2, gTargetAddr);
+    if(status != VPROC_STATUS_SUCCESS) {
+       VPROG_DBG_ERROR(" unable to program page 1 execution address\n");
+       return status;
+    }
+
+    /* print out the srecord program info */
+    VPROG_DBG_INFO("prgmBase 0x%08lx\n", st_firmware->prgmBase);
+    VPROG_DBG_INFO("execAddr 0x%08lx\n", st_firmware->execAddr);
+    VPROG_DBG_INFO("DONE\n");
+    return VPROC_STATUS_SUCCESS;
+}
+
+/*VprocTwolfHbiBoot_alt - use this function to bootload the firmware 
+ * into the device
+ * \param[in] pointer to image data structure
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ * \retval ::VPROC_STATUS_MAILBOX_BUSY
+*/
+static VprocStatusType VprocTwolfHbiBoot_alt(twFirmware *st_firmware)
+{
+	VprocStatusType status = VPROC_STATUS_SUCCESS;
+
+	/* write a value of 1 to address 0x14 (direct page offset 0x0A).
+	 * to stop current firmware, reset the device into the Boot Rom mode.
+	 */
+	status = VprocTwolfHbiBootPrepare();
+	if (status != VPROC_STATUS_SUCCESS) {
+		VPROG_DBG_ERROR("ERROR %d: \n", status);
+		return status;
+	}
+
+	/*Transfer the image*/
+	status =  HbiSrecBoot_alt(st_firmware);
+	if (status != VPROC_STATUS_SUCCESS) {
+		VPROG_DBG_ERROR("ERROR %d: \n", status);
+		return status;
+	}
+
+	/*tell Twolf that the firmware loading is complete*/
+
+	return VprocTwolfHbiBootConclude();
+}
+
+
+
+static VprocStatusType VprocTwolfEraseFlash(void)
+{
+    VprocStatusType status = VPROC_STATUS_SUCCESS; 
+    /*go to boot mode first */
+    status = VprocTwolfReset(VPROC_RST_BOOT);
+    if (status != VPROC_STATUS_SUCCESS) {
+        return VPROC_STATUS_DEV_NOT_INITIALIZED;
+    }        
+               
+    status = ioctlHALfunctions(TWOLF_ERASE_ALL_FLASH, NULL);
+    if (status != VPROC_STATUS_SUCCESS) {
+         return VPROC_STATUS_ERR_HBI;
+    }        
+ 
+    return status;
+}
+
+static VprocStatusType VprocTwolfLoadFwrCfgFromFlash(uint16 image_number)
+{
+    //VprocStatusType status = VPROC_STATUS_SUCCESS;
+    uint16 buf = image_number; 
+               
+    if (ioctlHALfunctions(TWOLF_LOAD_FWRCFG_FROM_FLASH, &buf) == -1) {
+        return VPROC_STATUS_FW_LOAD_FAILED;
+    }   
+  
+    return VPROC_STATUS_SUCCESS;
+}
+
+static VprocStatusType VprocTwolfLoadFwrFromFlash(uint16 image_number)
+{
+    uint16 buf = image_number; 
+
+    if (ioctlHALfunctions(TWOLF_LOAD_FWR_FROM_FLASH, &buf) == -1) {
+        return VPROC_STATUS_FW_LOAD_FAILED;
+    }
+ 
+    return VPROC_STATUS_SUCCESS;
+}
+
+
+/* VprocTwolfReset(): use this function to reset the device.
+ *  
+ *
+ * Input Argument: mode  - the reset mode (VPROC_RST_HARDWARE_ROM, 
+ *         VPROC_RST_HARDWARE_ROM, VPROC_RST_SOFT, VPROC_RST_AEC)
+ * Return: (VprocStatusType) type error code (0 = success, else= fail)
+ */
+static VprocStatusType VprocTwolfReset(VprocResetMode mode)
+{
+    uint16 buf = mode;
+
+    if (ioctlHALfunctions(TWOLF_RESET, &buf) == -1) {
+        return VPROC_STATUS_DEV_NOT_INITIALIZED;
+    }           
+    
+    //Vproc_msDelay(50); /*wait for device to settle*/
+    return VPROC_STATUS_SUCCESS;
+}
+
+/* VprocTwolfSaveImgToFlash(): use this function to
+ *     save both the config record and the firmware to flash. It Sets the bit
+ *     which initiates a firmware save to flash 
+ *
+ * Input Argument: None
+ * Return: (VprocStatusType) type error code (0 = success, else= fail)
+ */
+
+static VprocStatusType VprocTwolfSaveImgToFlash(void)
+{
+
+    int status = 0;
+
+    status = ioctlHALfunctions(TWOLF_SAVE_FWR_TO_FLASH, NULL);
+    if (status < 0) {
+        return VPROC_STATUS_FW_SAVE_FAILED;
+    }          
+    return status;
+}
+
+/* VprocTwolfSaveCfgToFlash(): use this function to
+ *     save the config record to flash. It Sets the bit
+ *     which initiates a config save to flash 
+ *
+ * Input Argument: None
+ * Return: (VprocStatusType) type error code (0 = success, else= fail)
+ * The firmware must be stopped first with VprocTwolfFirmwareStop()
+ */
+
+static VprocStatusType VprocTwolfSaveCfgToFlash(void)
+{
+
+    int status = 0;
+    /* verify the status of the last mailbox command*/
+
+    status = ioctlHALfunctions(TWOLF_SAVE_CFG_TO_FLASH, NULL);
+    if (status < 0) {
+        return VPROC_STATUS_GFG_SAVE_FAILED;
+    }          
+
+    return status;
+}
+
+/*VprocTwolfFirmwareStart - use this function to start/restart the firmware
+ * previously stopped with VprocTwolfFirmwareStop()
+ * \param[in] none
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+static VprocStatusType VprocTwolfFirmwareStart(void)
+{
+   
+    int status = 0;
+    /* verify the status of the last mailbox command*/
+
+    status = ioctlHALfunctions(TWOLF_START_FWR, NULL);
+    if (status < 0) {
+        return VPROC_STATUS_ERR_HBI;
+    }          
+
+    return VPROC_STATUS_SUCCESS;
+}
+
+/*VprocTwolfFirmwareStop - use this function to stop the firmware currently running
+ * And set the device in boot mode
+ * \param[in] none
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+static VprocStatusType VprocTwolfFirmwareStop(void)
+{
+   
+    int status = 0;
+    /* verify the status of the last mailbox command*/
+
+   status = ioctlHALfunctions(TWOLF_STOP_FWR, NULL);
+   if (status < 0) {
+        return VPROC_STATUS_ERR_HBI;
+   }         
+
+   return VPROC_STATUS_SUCCESS;
+}
+
+
+
+/*VprocTwolfRecordConfigure() - use this function to onfigure the Twolf for audio
+ * recording mode
+ * [param in]  clockrate - the (16-bit) TDM/I2S clock rate in KHz
+ * [param in]  fsrate    - the (16-bit) sample rate  in KHz
+ * [param in]  aecon     - to enable or disable Echo Canceller processing
+ */
+
+static VprocStatusType VprocTwolfUpstreamConfigure(unsigned short clockrate,/*in kHz*/ unsigned short fsrate,/*in Hz*/ unsigned char aecOn/*0 for OFF, 1 for ON*/) { 
+
+    int status = 0;
+    uint16 temp = 0;
+    /* verify the status of the last mailbox command*/
+    /* verify */
+    if (!((fsrate ==48000) || (fsrate ==44100) || (fsrate ==16000) || (fsrate ==8000)))
+    {
+       printf("Invalid sample rate of %u HZ...\n", fsrate);
+       return VPROC_STATUS_INVALID_ARG;
+    }
+    if ((clockrate <512) || (clockrate >16384)) 
+    {
+       printf("Invalid clock rate of %u KHz...\n", clockrate);
+       return VPROC_STATUS_INVALID_ARG;
+    }
+    temp = 0x8004;
+    status = VprocTwolfHbiWrite(0x0260, 1, &temp);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }            
+    /* verify the status of the last mailbox command*/
+    temp = ((((1000*clockrate)/fsrate) - 1)<<4) | (fsrate/8000);
+    printf("pclkrate = %u KHz, fsrate = %u Hz, calculated clkrate = 0x%04x\n", 
+                              clockrate, fsrate, temp); 
+    status = VprocTwolfHbiWrite(0x0262, 1, &temp);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }
+    
+    temp = 0x0003;
+    status = VprocTwolfHbiWrite(0x02B0, 1, &temp);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }
+
+    if (aecOn == 0) {  /*pure stereo bypass*/
+        uint16 buf[] ={0x000d, 0x0010, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+                     0x0000, 0x000d, 0x0001, 0x0002, 0x0000, 0x0000, 0x0000,
+                     0x0000, 0x0000, 0x0000, 0x0000, 0x0000};    
+    
+        status = VprocTwolfHbiWrite(0x0202, 19, buf);
+        if (status != VPROC_STATUS_SUCCESS) {
+            VPROG_DBG_ERROR("ERROR %d: \n", status);
+            return status;
+        }
+#ifdef TW_ADD_SIDETONE        
+        temp = 0x0001; /*Connect DAC1 directly to the MIC1*/
+        status = VprocTwolfHbiWrite(0x0210, 1, &temp);
+        if (status != VPROC_STATUS_SUCCESS) {
+            VPROG_DBG_ERROR("ERROR %d: \n", status);
+            return status;
+        }
+#endif /*TW_ADD_SIDETONE*/   
+       
+    
+    } else if (aecOn == 1) {
+        uint16 buf[] ={0x0c05, 0x0010, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+                     0x000d, 0x0000, 0x000e, 0x0000, 0x0000, 0x0000, 0x0000,
+                     0x0000, 0x0000, 0x000d, 0x0001, 0x0005};    
+           
+          VPROG_DBG_INFO("AEC runs at 8 or 16KHz, fsrate > 16Kz cause audio"
+                    " to be decimated to 16KHa, then re-sampled to 48KHz\n"); 
+
+        status = VprocTwolfHbiWrite(0x0202, 19, buf);
+        if (status != VPROC_STATUS_SUCCESS) {
+            VPROG_DBG_ERROR("ERROR %d: \n", status);
+            return status;
+        }
+
+    }
+    
+    /*soft-reset to apply the configuration*/
+    temp = 0x0002;
+    status = VprocTwolfHbiWrite(0x0006, 1, &temp);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }
+    
+    return VPROC_STATUS_SUCCESS;
+}
+
+/*VprocTwolfPlayConfigure() - use this function to configure the Twolf for I2S audio
+ * recording mode
+ * [param in]  clockrate - the (16-bit) TDM/I2S clock rate in KHz
+ * [param in]  fsrate    - the (16-bit) sample rate  in KHz
+ * [param in]  aecon     - to enable or disable Echo Canceller processing
+ */
+
+static VprocStatusType VprocTwolfDownstreamConfigure(unsigned short clockrate, /*in kHz*/
+                                       unsigned short fsrate,    /*in Hz*/
+                                     unsigned char aecOn)/*0 for OFF, 1 for ON*/
+{
+    int status = 0;
+    uint16 temp = 0; 
+
+    /* verify */
+    if (!((fsrate ==48000) || (fsrate ==44100) || (fsrate ==16000) || (fsrate ==8000)))
+    {
+       printf("Invalid sample rate of %u HZ...\n", fsrate);
+       return VPROC_STATUS_INVALID_ARG;
+    }
+    if ((clockrate <512) || (clockrate >16384)) 
+    {
+       printf("Invalid clock rate of %u KHz...\n", clockrate);
+       return VPROC_STATUS_INVALID_ARG;
+    }
+    temp = 0x8004;
+    status = VprocTwolfHbiWrite(0x0260, 1, &temp);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }  
+         
+    temp = ((((1000*clockrate)/fsrate) - 1)<<4) | (fsrate/8000);
+    printf("pclkrate = %u KHz, fsrate = %u Hz, calculated clkrate = 0x%04x\n", 
+                              clockrate, fsrate, temp); 
+    status = VprocTwolfHbiWrite(0x0262, 1, &temp);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }
+
+    if (aecOn == 0) {
+        /*Playback in 2-channel stereo
+         * I2S-1L -> DAC1, I2S-1R -> DAC2
+         * DAC 1,2 enable, I2S-1l, 1R enable
+         */      
+        uint16 buf[] ={0x000f, 0x0010, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+                     0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+                     0x0000, 0x0000, 0x0000, 0x0000, 0x0000}; 
+
+        /*DAC1-2 enable*/
+        temp = 0xC000;
+        status = VprocTwolfHbiWrite(0x2A0, 1, &temp);
+        if (status != VPROC_STATUS_SUCCESS) {
+            VPROG_DBG_ERROR("ERROR %d: \n", status);
+            return status;
+        }
+
+        temp = 0xC000;
+        status = VprocTwolfHbiWrite(0x2A2, 1, &temp);
+        if (status != VPROC_STATUS_SUCCESS) {
+            VPROG_DBG_ERROR("ERROR %d: \n", status);
+            return status;
+        }
+              
+        /*pure stereo bit matching bypass - AEC is removed from the audio path*/      
+        status = VprocTwolfHbiWrite(0x0202, 19, buf);
+        if (status != VPROC_STATUS_SUCCESS) {
+            VPROG_DBG_ERROR("ERROR %d: \n", status);
+            return status;
+        }
+
+    } else if (aecOn == 1) {
+          /* AEC is in the audio path - audio will be decimated  
+           * to either 8 or 16KHz - because the AEC can only process
+           * one audio cahnnel of either 8 or 16 KHz sample rate
+           */ 
+        uint16 buf[] ={0x0c05, 0x0010, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
+                     0x000d, 0x0000, 0x000e, 0x0000, 0x0000, 0x0000, 0x0000,
+                     0x0000, 0x0000, 0x000d, 0x0001, 0x0005}; 
+                        
+        VPROG_DBG_INFO("AEC runs at 8 or 16KHz only");
+        status = VprocTwolfHbiWrite(0x0202, 2, buf);
+        if (status != VPROC_STATUS_SUCCESS) {
+            VPROG_DBG_ERROR("ERROR %d: \n", status);
+            return status;
+        }
+          
+    }
+
+   
+    /*soft-reset to apply the configuration*/
+    temp = 0x0002;
+    status = VprocTwolfHbiWrite(0x0006, 1, &temp);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }
+    
+    return VPROC_STATUS_SUCCESS;
+}
+
+#if 1
+/*VprocTwolfMute - use this function to mute or unmute one the following 
+ * audio ports
+ * And set the device in boot mode
+ * \param[in] on  : 0 for unmute; 1: for mute
+ *
+ * \retval ::VPROC_STATUS_SUCCESS
+ * \retval ::VPROC_STATUS_ERR_HBI
+ */
+static VprocStatusType VprocTwolfMute(VprocAudioPortsSel port, uint8 on)
+{
+   
+    int status = 0;
+    uint16 buf = 0;
+    uint16 reg = 0;
+    uint16 muteBit= 0;
+
+    if (port == VPROC_SOUT) {
+        reg =   0x0300; 
+        muteBit = 0x0080;  
+    } else if  (port == VPROC_ROUT) {
+        reg =   0x0300; 
+        muteBit = 0x0100;  
+    } else {
+        VPROG_DBG_ERROR("This port %d do not support mute!!! \n", port); 
+    }
+    
+    /* verify the status of the last mailbox command*/
+    
+	status  = VprocTwolfHbiRead(reg, 1, &buf);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("Error %d: VprocTwolfHbiRead() !!!\n", status);  
+        return VPROC_STATUS_ERR_HBI;
+    }
+    if (on) 
+        buf |= muteBit;  /*set the mute*/
+    else 
+        buf &= ~muteBit; /*clear the mute*/
+
+    status = VprocTwolfHbiWrite(reg, 1, &buf);
+    if (status != VPROC_STATUS_SUCCESS) {
+        VPROG_DBG_ERROR("ERROR %d: \n", status);
+        return status;
+    }
+
+    return VPROC_STATUS_SUCCESS;
+}
+
+#endif
diff --git a/legacy_hal/zl380tw/vprocTwolf_access.h b/legacy_hal/zl380tw/vprocTwolf_access.h
new file mode 100755
index 0000000..972e4dd
--- /dev/null
+++ b/legacy_hal/zl380tw/vprocTwolf_access.h
@@ -0,0 +1,103 @@
+/****************************************************************************
+* Microsemi Semiconductor, Kanata, ON
+****************************************************************************
+*
+* Description: Voice Processor devices high level access module function
+*                definitions
+*
+* NOTE: The registers of the device are 16-bit wide. A 32-bit access
+*       is not required. However, the 32-bit access functions are provided
+*       only if the host wants to access two consecutives 16-bit registers
+*       in one single access.
+*  Author: Jean Bony
+****************************************************************************
+* Copyright Microsemi Semiconductor Ltd., 2013. All rights reserved. This
+* copyrighted work constitutes an unpublished work created in 2013. The use
+* of the copyright notice is intended to provide notice that Microsemi
+* Semiconductor Ltd. owns a copyright in this unpublished work; the main
+* copyright notice is not an admission that publication has occurred. This
+* work contains confidential, proprietary information and trade secrets of
+* Microsemi Semiconductor Ltd.; it may not be used, reproduced or transmitted,
+* in whole or in part, in any form or by any means without the prior
+* written permission of Microsemi Semiconductor Ltd. This work is provided on
+* a right to use basis subject to additional restrictions set out in the
+* applicable license or other agreement.
+*
+***************************************************************************/
+
+
+#ifndef VPROCTWOLFACCESS_H
+#define VPROCTWOLFACCESS_H
+
+#include "vproc_common.h"
+#include "VprocTw_Hal.h"
+
+#if 1
+#include "VprocTw_Hal.c"
+#endif
+
+#define TWOLF_MAILBOX_SPINWAIT  1000  /*at least a 1000 to avoid mailbox busy */
+
+
+/*device HBI command structure*/
+typedef struct hbiCmdInfo {
+   unsigned char page;
+   unsigned char offset;
+   unsigned char numwords;
+} hbiCmdInfo;
+
+/* external function prototypes */
+
+VprocStatusType VprocTwolfHbiInit(void); /*Use this function to initialize the HBI bus*/
+
+static VprocStatusType VprocTwolfHbiRead(
+    unsigned short cmd,       /*the 16-bit register to read from*/
+    unsigned char numwords,   /* The number of 16-bit words to read*/
+    unsigned short *pData);   /* Pointer to the read data buffer*/
+
+VprocStatusType VprocTwolfHbiWrite(
+    unsigned short cmd,     /*the 16-bit register to write to*/
+    unsigned char numwords, /* The number of 16-bit words to write*/
+    unsigned short *pData); /*the words (0-255) to write*/
+
+static VprocStatusType TwolfHbiNoOp( /*send no-op command to the device*/
+    unsigned char numWords);  /* The number of no-op (0-255) to write*/
+
+/*An alternative method to loading the firmware into the device
+* USe this method if you have used the provided tool to convert the *.s3 into
+* c code that can be compiled with the application
+*/
+static VprocStatusType VprocTwolfHbiBoot_alt( /*use this function to boot load the firmware (*.c) from the host to the device RAM*/
+    twFirmware *st_firmware); /*Pointer to the firmware image in host RAM*/
+
+/*An alternative method to loading the firmware into the device
+* USe this method if you have not used the provided tool to convert the *.s3 but
+* instead prefer to load the *.s3 file directly
+*/
+static VprocStatusType VprocTwolfHbiBoot(     /*use this function to boot load the firmware (*.s3) from the host to the device RAM*/
+    FILE *BOOT_FD);     /*Pointer to the firmware image in host RAM*/
+
+static VprocStatusType VprocTwolfLoadConfig(
+    dataArr *pCr2Buf,
+    unsigned short numElements);
+    
+VprocStatusType VprocTwolfHbiCleanup(void);
+static VprocStatusType VprocTwolfHbiDeviceCheck(void);
+static VprocStatusType VprocTwolfHbiBootPrepare(void);
+VprocStatusType VprocTwolfHbiBootMoreData(char *dataBlock);
+static VprocStatusType VprocTwolfHbiBootConclude(void);
+static VprocStatusType VprocTwolfFirmwareStop(void);   /*Use this function to halt the currently running firmware*/
+static VprocStatusType VprocTwolfFirmwareStart(void);  /*Use this function to start/restart the firmware currently in RAM*/
+static VprocStatusType VprocTwolfSaveImgToFlash(void);  /*Save current loaded firmware from device RAM to FLASH*/
+static VprocStatusType VprocTwolfSaveCfgToFlash(void); /*Save current device config from device RAM to FLASH*/
+static VprocStatusType VprocTwolfReset(VprocResetMode mode);
+static VprocStatusType VprocTwolfUpstreamConfigure(uint16 clockrate,/*in kHz*/ 
+                                       uint16 fsrate,   /*in Hz*/
+                                       uint8 aecOn);     /*0 for OFF, 1 for ON*/
+static VprocStatusType VprocTwolfDownstreamConfigure(uint16 clockrate, /*in kHz*/
+                                       uint16 fsrate,    /*in Hz*/
+                                     uint8 aecOn);      /*0 for OFF, 1 for ON*/
+static VprocStatusType VprocTwolfEraseFlash(void);
+static VprocStatusType VprocTwolfLoadFwrCfgFromFlash(uint16 image_number);
+static VprocStatusType VprocTwolfMute(VprocAudioPortsSel port, uint8 on);
+#endif /* VPROCTWOLFACCESS_H */
diff --git a/legacy_hal/zl380tw/vproc_common.c b/legacy_hal/zl380tw/vproc_common.c
new file mode 100755
index 0000000..7156af0
--- /dev/null
+++ b/legacy_hal/zl380tw/vproc_common.c
@@ -0,0 +1,23 @@
+
+#include "vproc_common.h"
+
+/* Vproc_msDelay(): use this function to
+ *     force a delay of specified time in resolution of milli-second
+ *
+ * Input Argument: time in unsigned 16-bit
+ * Return: none
+ */
+
+static void Vproc_msDelay(unsigned short time) {
+     usleep(time * 1000); /*PLATFORM SPECIFIC - system wait in ms*/
+}
+
+ /* VprocWait(): use this function to
+ *     force a delay of specified time in resolution of 125 micro-Seconds
+ *
+ * Input Argument: time in unsigned 32-bit
+ * Return: none
+ */
+static void VprocWait(unsigned long int time) {
+     usleep(125 * time); /*system wait in frame*/
+}
diff --git a/legacy_hal/zl380tw/vproc_common.h b/legacy_hal/zl380tw/vproc_common.h
new file mode 100755
index 0000000..4b2d27a
--- /dev/null
+++ b/legacy_hal/zl380tw/vproc_common.h
@@ -0,0 +1,131 @@
+#ifndef VPROCCOMMON_H
+#define VPROCCOMMON_H
+
+#include <string.h>
+#include <stdint.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <getopt.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <termios.h>
+
+/*This header includes some platform dependent data types*/
+#include "vproc_data_types.h"
+
+//#define RETRY_COUNT 100
+#define VPROC_TIMEOUT 500
+
+/* external defines */
+#undef VPROC_DEBUG
+
+
+/*create a 16-bit word out of two bytes*/
+#define MAKE16(a, b)      (unsigned short)(((unsigned short)(b) << 8) | \
+					  (unsigned short)(a))
+/*create a 32-bit word out of 4 bytes*/
+
+#define MAKE32(a, b, c, d)  (unsigned long)(((unsigned long)d << 24) | ((unsigned long)c << 16) | ((unsigned long)b << 8) | ((unsigned long)a))
+/*
+ * debug - print the function name and line number for the source of the error
+ * the line number count start at 1 and not 0
+ */
+
+
+/*Define this macro to report mode debug info
+*
+*/
+//#undef VPROC_API_DBG_INFO
+//#define VPROC_API_DBG_INFO
+#ifdef VPROC_API_DBG_INFO
+#undef ANDROID_VPROC_API_DBG_INFO
+#define VPROG_DBG_INFO(s, args...) \
+    printf(""s, ##args);
+#else
+    #define VPROG_DBG_INFO(s, args...)
+#endif
+
+//#define VPROC_API_DBG_ERROR
+#ifdef VPROC_API_DBG_ERROR
+#undef ANDROID_VPROC_API_DBG_ERROR
+#define VPROG_DBG_ERROR(s, args...) \
+    printf("---%s %d: "s, __func__, __LINE__, ##args);
+#else
+    #define VPROG_DBG_ERROR(s, args...)
+#endif
+/**************************************************/
+//#undef VPROC_API_DBG_INFO
+//#define VPROC_API_DBG_INFO
+#ifdef ANDROID_VPROC_API_DBG_INFO
+#include <cutils/log.h>
+#include <cutils/config_utils.h>
+#undef VPROC_API_DBG_INFO
+#define VPROG_DBG_INFO(s, args...) \
+    ALOGD(""s, ##args);
+#else
+    #define VPROG_DBG_INFO(s, args...)
+#endif
+
+//#define VPROC_API_DBG_ERROR
+#ifdef ANDROID_VPROC_API_DBG_ERROR
+#undef VPROC_API_DBG_ERROR
+#define VPROG_DBG_ERROR(s, args...) \
+    ALOGE("---%s %d: "s, __func__, __LINE__, ##args);
+#else
+    #define VPROG_DBG_ERROR(s, args...)
+#endif
+
+/*SPI specific settings*/
+
+/*device/access Status  codes*/
+typedef enum VprocStatusType {
+    VPROC_STATUS_SUCCESS      =      0,
+    VPROC_STATUS_FAILURE,
+    VPROC_STATUS_INIT_FAILED,
+    VPROC_STATUS_WR_FAILED,
+    VPROC_STATUS_RD_FAILED,
+    VPROC_STATUS_FW_LOAD_FAILED,
+    VPROC_STATUS_CFG_LOAD_FAILED,
+    VPROC_STATUS_CLOSE_FAILED,
+    VPROC_STATUS_FW_SAVE_FAILED,
+    VPROC_STATUS_GFG_SAVE_FAILED,
+    VPROC_STATUS_MAU_NOT_READY,
+    VPROC_STATUS_CHK_FAILED,
+    VPROC_STATUS_FUNC_NOT_SUPPORTED,
+    VPROC_STATUS_INVALID_ARG,
+    VPROC_STATUS_ERR_VTD_CODE,
+    VPROC_STATUS_ERR_VERIFY,
+    VPROC_STATUS_DEVICE_BUSY,
+    VPROC_STATUS_ERR_HBI,
+    VPROC_STATUS_ERR_IMAGE,
+    VPROC_STATUS_MAILBOX_BUSY,
+    VPROC_STATUS_CMDREG_BUSY,
+    VPROC_STATUS_IN_CRTCL_SECTN,
+    VPROC_STATUS_BOOT_LOADING_MORE_DATA,
+    VPROC_STATUS_BOOT_LOADING_CMP,
+    VPROC_STATUS_DEV_NOT_INITIALIZED,
+
+}VprocStatusType;
+
+/* Device Reset modes*/
+typedef enum VprocResetMode {
+    VPROC_RST_HARDWARE_ROM  =  0, /*hardware reset -reset the device and reload the firmware from flash*/
+    VPROC_RST_HARDWARE_RAM  =  1, /*hardware reset -reset the device and reload the firmware from RAM*/
+    VPROC_RST_SOFTWARE      =  2,
+    VPROC_RST_AEC   =  3,              /*software reset -reset and runs the firmware from RAM*/
+    VPROC_RST_BOOT = 4
+}VprocResetMode;
+
+/* Device Firmware audio processing ports*/
+typedef enum VprocAudioPortsSel {
+    VPROC_SIN   =  0, /**/
+    VPROC_ROUT  =  1, /**/
+    VPROC_SOUT  =  2,
+
+}VprocAudioPortsSel;
+
+
+static void Vproc_msDelay(unsigned short time);
+static void VprocWait(unsigned long int time);
+#endif /* VPROCCOMMON_H */
diff --git a/legacy_hal/zl380tw/vproc_data_types.h b/legacy_hal/zl380tw/vproc_data_types.h
new file mode 100755
index 0000000..7ca571d
--- /dev/null
+++ b/legacy_hal/zl380tw/vproc_data_types.h
@@ -0,0 +1,105 @@
+/** \file vproc_data_types.h
+ * vproc_data_types.h
+ *
+ *  This file is the header for all standard types used in the API code.
+ *
+ * Copyright (c) 2014, Microsemi Corporation
+ */
+#ifndef VP_API_TYPES_H
+#define VP_API_TYPES_H
+/* For maximum that can be stored in an int - if file exists in library */
+#include "limits.h"
+
+#ifndef NULL
+    #define NULL (0)
+#endif
+
+#ifdef EXTERN
+  #undef EXTERN
+  #error EXTERN was redefined!
+#endif /* undef EXTERN */
+#ifdef __cplusplus
+  #define EXTERN extern "C"
+#else
+  #define EXTERN extern
+#endif /* __cplusplus */
+/********************* DECLARATIONS ***************************/
+/* Constants */
+#define FALSE   (0)     /* Boolean constant */
+#define TRUE    (1)     /* Boolean constant */
+#ifndef __cplusplus
+/* C++ language provides a boolean data type; So no need to define
+ * one more data type; Make use of it
+ * NOTE: The 'C' potions of the VP-API assume C++ "bool" to be of the
+ * same size as that of "char". Please make sure this assumption is correct.
+ */
+typedef unsigned char bool;
+#endif /* __cplusplus */
+/****************** typedefs ***********************************/
+/* These are the basic number types used */
+/* for uint8, uint16, uint32, int8, int16, int32, bool */
+//  PLATFORM SPECIFIC DEFINITIONS
+typedef unsigned char   uchar;
+typedef signed char    int8;
+typedef unsigned char 	UCharT;       // 8 bits unsigned -  PLATFORM SPECIFIC
+typedef unsigned char 	UInt8T;       // 8 bits unsigned -  PLATFORM SPECIFIC
+typedef unsigned short	UInt16T;      // 16 bits unsigned -  PLATFORM SPECIFIC
+typedef unsigned long 	UInt32T;      // 32 bits unsigned -  PLATFORM SPECIFIC
+typedef signed long 	Int32T;               // 32 bits signed -  PLATFORM SPECIFIC
+typedef unsigned char 	uint8;        // 8 bits unsigned -  PLATFORM SPECIFIC
+typedef unsigned short	uint16;       // 16 bits unsigned -  PLATFORM SPECIFIC
+typedef   uint8*  uint8p;             // pointer to 8 bits unsigned -  PLATFORM SPECIFIC
+typedef   uint16* uint16p;            // pointer to 16 bits unsigned -  PLATFORM SPECIFIC
+typedef unsigned long 	uint32;      // 32 bits unsigned -  PLATFORM SPECIFIC
+typedef signed short 	int16;      // 32 bits unsigned -  PLATFORM SPECIFIC
+typedef   uint32* uint32p;
+typedef   int8*   int8p;
+typedef   int16*  int16p;
+typedef   Int32T*  int32p;
+/* external types */
+/* Some compilers optimize the size of enumeration data types based on
+ * the maximum data value assigned to the members of that data type.
+ * 'Standard C' requires enumeration data types to be of the same size
+ * as that of native 'int' implementation.
+ * The VP-API from a portability persepective adds a 'dummy' member to
+ * all enumeration data types that force the compilers to allocate the size
+ * of enumeration data types to be equal to that of native 'int'
+ * implementation */
+#define FORCE_STANDARD_C_ENUM_SIZE  (INT_MAX)
+
+/* Eliminate error messages that occur when comparing an enumeration constant
+   < 0 */
+#define FORCE_SIGNED_ENUM  (INT_MIN)
+
+
+/* Define any API specific basic data type ranges (that are necessary) */
+#define VP_INT16_MAX    (SHRT_MAX)
+#define VP_INT16_MIN    (SHRT_MIN)
+#define VP_INT32_MAX    (LONG_MAX)
+#define VP_INT32_MIN    (LONG_MIN)
+
+/*firmware data structures*/  
+typedef struct {
+    uint16 buf[16];      /*the firmware data block to send to the device*/
+    uint16  numWords;    /*the number of words within the block of data stored in buf[]*/
+    uint32 targetAddr;   /*the target base address to write to register 0x00c of the device*/
+    uint8 useTargetAddr; /*this value is either 0 or 1. When 1 the tarGetAddr must be written to the device*/
+} twFwr;
+
+typedef struct {
+    twFwr *st_Fwr;
+    uint8 havePrgmBase;
+    uint32 prgmBase;
+    uint32 execAddr;   /*The execution start address of the firmware in RAM*/
+    uint16 twFirmwareStreamLen;  /*The number of blocks within the firmware*/      
+    uint32 byteCount;   /*The total number of bytes within the firmware - NOT USED*/
+} twFirmware;
+
+/*config record structures*/
+typedef struct {
+   uint16 reg;   /*the register */
+   uint16 value; /*the value to write into reg */
+} dataArr;
+
+#endif /* VP_API_TYPES_H */
+
diff --git a/legacy_hal/zl380tw/zl380tw.h b/legacy_hal/zl380tw/zl380tw.h
new file mode 100755
index 0000000..c29522d
--- /dev/null
+++ b/legacy_hal/zl380tw/zl380tw.h
@@ -0,0 +1,299 @@
+#ifndef __ZL380TW_H
+#define __ZL380TW_H
+
+/*-------------------------------------------------------------*
+ *    HOST MACROS - Define/undefine as desired
+ *    -----------------------------------------
+ *    Supported combinations:
+ *    ZL380XX_TW_ENABLE_CHAR_DEV_DRIVER + ZL380XX_TW_ENABLE_ALSA_CODEC_DRIVER  + MICROSEMI_HBI_I2C or MICROSEMI_HBI_SPI
+ *    ZL380XX_TW_ENABLE_CHAR_DEV_DRIVER + MICROSEMI_HBI_I2C or MICROSEMI_HBI_SPI
+ *    ZL380XX_TW_ENABLE_ALSA_CODEC_DRIVER  + MICROSEMI_HBI_I2C or MICROSEMI_HBI_SPI
+ *
+ *    all of the above can be used with the ZL380XX_TW_UPDATE_FIRMWARE
+ *-------------------------------------------------------------*/
+#define ZL380XX_TW_ENABLE_ALSA_CODEC_DRIVER /*Define this macro to create a /sound/soc ALSA codec device driver*/
+#define ZL380XX_TW_ENABLE_CHAR_DEV_DRIVER   /*Define this macro to create a character device driver*/
+
+/*Enable either one of this macro to create a SPI or an I2C device driver
+*  to be used as the low-level transport for the ALSA and/or CHAR device read/write accesses
+*/
+#define MICROSEMI_HBI_I2C          /*Enable this macro if the HBI interface between the host CPU and the Twolf is I2C*/
+#ifdef MICROSEMI_HBI_I2C          
+    #undef MICROSEMI_HBI_SPI      
+    #define MICROSEMI_I2C_ADDR 0x45  /*if DIN pin is tied to ground, else if DIN is tied to 3.3V address must be 0x52*/
+    #define CONTROLLER_I2C_BUS_NUM 0
+#else
+    #define MICROSEMI_HBI_SPI
+    /*Define the SPI master signal config*/
+    #define SPIM_CLK_SPEED  1000000
+    #define SPIM_CHIP_SELECT 1
+    #define SPIM_MODE SPI_MODE_3
+    #define SPIM_BUS_NUM 0   
+#endif
+
+#undef ZL380XX_TW_UPDATE_FIRMWARE /*define if you want to update current firmware with a new one at power up*/
+#ifdef ZL380XX_TW_UPDATE_FIRMWARE
+/*NOTE: Rename the *s3 firmware file as per below or simply change the file name below as per the firmware file name*/
+    #define  ZLS380_TWOLF "MICROSEMI_firmware.s3" /*compatible firmware image for your zl380xx device*/
+#endif
+
+/*HBI access to the T-wolf must not be interrupted by another process*/
+#define PROTECT_CRITICAL_SECTION  /*define this macro to protect HBI critical section*/
+
+/*Define the ZL380TW interrupt pin drive mode 1:TTL, 0: Open Drain(default)*/
+#define HBI_CONFIG_INT_PIN_DRIVE_MODE		0
+/*-------------------------------------------------------------*
+ *     HOST MACROS - end
+ *-------------------------------------------------------------*/
+ 
+ 
+/* local defines */
+#define MAX_TWOLF_ACCESS_SIZE_IN_BYTES 254 /*127 16-bit words*/
+#define MAX_TWOLF_FIRMWARE_SIZE_IN_BYTES 128 /*128 8-bit words*/
+
+/*The timberwolf device reset modes*/
+#define ZL38040_RST_HARDWARE_RAM 0
+#define ZL38040_RST_HARDWARE_ROM 1
+#define ZL38040_RST_SOFTWARE     2
+#define ZL38040_RST_AEC          3
+#define ZL38040_RST_TO_BOOT      4
+
+#ifdef ZL380XX_TW_ENABLE_CHAR_DEV_DRIVER
+
+#define MINOR_CNT 1
+#define FIRST_MINOR 0
+/*structure for IOCL access*/
+typedef struct {
+	__u16	addr;
+	__u16	data;
+} ioctl_zl380tw;
+
+
+/* ioctl() calls that are permitted to the /dev/microsemi_spis_tw interface. */
+#define TWOLF_MAGIC 'q'            /*Change this accordingly to your system*/
+#define TWOLF_HBI_RD16		        _IOWR(TWOLF_MAGIC, 1,  ioctl_zl380tw *)
+#define TWOLF_HBI_WR16		        _IOW(TWOLF_MAGIC, 2, ioctl_zl380tw *)
+#define TWOLF_HBI_INIT		        _IOW(TWOLF_MAGIC, 3, __u16)
+#define TWOLF_RESET        	        _IOW(TWOLF_MAGIC, 4,  __u16)
+#define TWOLF_SAVE_FWR_TO_FLASH     _IO(TWOLF_MAGIC, 5)
+#define TWOLF_LOAD_FWR_FROM_FLASH   _IOW(TWOLF_MAGIC, 6,  __u16)
+#define TWOLF_SAVE_CFG_TO_FLASH     _IO(TWOLF_MAGIC, 7)
+#define TWOLF_LOAD_CFG_FROM_FLASH   _IOW(TWOLF_MAGIC, 8,  __u16)
+#define TWOLF_ERASE_IMGCFG_FLASH    _IOW(TWOLF_MAGIC, 9,  __u16)
+#define TWOLF_ERASE_ALL_FLASH       _IO(TWOLF_MAGIC, 10)
+#define TWOLF_STOP_FWR              _IO(TWOLF_MAGIC, 11)
+#define TWOLF_START_FWR             _IO(TWOLF_MAGIC, 12)
+#define TWOLF_LOAD_FWRCFG_FROM_FLASH    _IOW(TWOLF_MAGIC, 13,  __u16)
+#define TWOLF_HBI_WR_ARB_SINGLE_WORD    _IOW(TWOLF_MAGIC, 14, __u16)
+#define TWOLF_HBI_RD_ARB_SINGLE_WORD    _IOW(TWOLF_MAGIC, 15, __u16)
+#define TWOLF_CMD_PARAM_REG_ACCESS	    _IOW(TWOLF_MAGIC, 16, __u16)
+#define TWOLF_CMD_PARAM_RESULT_CHECK    _IO(TWOLF_MAGIC, 17)
+#define TWOLF_BOOT_PREPARE              _IO(TWOLF_MAGIC, 18)
+#define TWOLF_BOOT_SEND_MORE_DATA       _IOW(TWOLF_MAGIC, 19, int)
+#define TWOLF_BOOT_CONCLUDE             _IO(TWOLF_MAGIC, 20)
+#define TWOLF_LOAD_CFG		            _IOW(TWOLF_MAGIC, 21,  int)
+#endif
+/*------------------------------------------------------*/
+/*TWOLF REGisters*/
+#define ZL38040_CMD_REG             0x0032   /*Host Command register*/
+#define ZL38040_CMD_IDLE            0x0000  /*idle/ operation complete*/
+#define ZL38040_CMD_NO_OP           0x0001  /*no-op*/
+#define ZL38040_CMD_IMG_CFG_LOAD    0x0002  /*load firmware and CR from flash*/
+#define ZL38040_CMD_IMG_LOAD        0x0003  /*load firmware only from flash*/
+#define ZL38040_CMD_IMG_CFG_SAVE    0x0004  /*save a firmware and CR to flash*/
+#define ZL38040_CMD_IMG_CFG_ERASE   0x0005  /*erase a firmware and CR in flash*/
+#define ZL38040_CMD_CFG_LOAD        0x0006  /*Load CR from flash*/
+#define ZL38040_CMD_CFG_SAVE        0x0007  /*save CR to flash*/
+#define ZL38040_CMD_FWR_GO          0x0008  /*start/restart firmware (GO)*/
+#define ZL38040_CMD_HOST_LOAD_CMP   0x000D  /*Host Application Load Complete*/
+#define ZL38040_CMD_HOST_FLASH_INIT 0x000B  /*Host Application flash discovery*/
+#define ZL38040_CMD_FWR_STOP        0x8000  /*stop firmware */
+#define ZL38040_CMD_CMD_IN_PROGRESS 0xFFFF  /*wait command is in progress */
+#define ZL38040_CMD_APP_SLEEP		 0x0005  /*codec low power mode*/
+
+#define PAGE_255_CHKSUM_LO_REG  0x000A
+#define PAGE_255_CHKSUM_HI_REG  0x0008
+#define CLK_STATUS_REG          0x0014   /*Clock status register*/
+#define PAGE_255_BASE_LO_REG  0x000E
+#define PAGE_255_BASE_HI_REG  0x000C
+#define ZL38040_SW_FLAGS_REG     0x0006
+#define ZL38040_SW_FLAGS_CMD     0x0001
+#define ZL38040_SW_FLAGS_CMD_NORST     0x0004
+
+#define ZL38040_DEVICE_ID_REG  0x0024
+
+#define TWOLF_CLK_STATUS_HBI_BOOT       0x0001
+
+#define HBI_CONFIG_REG			0xFD00
+#define HBI_CONFIG_WAKE			1<<7
+#define HBI_CONFIG_VAL (HBI_CONFIG_INT_PIN_DRIVE_MODE<<1)
+
+#define ZL38040_CMD_PARAM_RESULT_REG   0x0034 /*Host Command Param/Result register*/
+#define ZL38040_FWR_COUNT_REG   0x0026 /*Fwr on flash count register*/
+#define ZL38040_FWR_EXEC_REG   0x012C  /*Fwr EXEC register*/
+
+#define TOTAL_FWR_DATA_WORD_PER_LINE 24
+#define TOTAL_FWR_DATA_BYTE_PER_LINE 128
+#define TWOLF_STATUS_NEED_MORE_DATA 22
+#define TWOLF_STATUS_BOOT_COMPLETE 23
+
+#define TWOLF_MBCMDREG_SPINWAIT  10000
+/*--------------------------------------------------------------------
+ *    ALSA
+ *--------------------------------------------------------------------*/
+ /*Macros to enable one of the pre-defined audio cross-points*/
+#define ZL38040_SINGLE_CHANNEL_AEC 0
+#define ZL38040_STEREO_BYPASS      1
+#define ZL38040_ADDA_LOOPBACK      2
+
+/*Cached register range*/
+#define ZL38040_CACHED_ADDR_LO  0x202
+#define ZL38040_CACHED_ADDR_HI  0x23E
+#define ZL38040_HBI_OFFSET_RANGE 128
+#define ZL38040_CACHE_INDEX_TO_ADDR(index) (ZL38040_CACHED_ADDR_LO+(2*index))
+#define ZL38040_ADDR_TO_CACHE_INDEX(addr) ((addr - ZL38040_CACHED_ADDR_LO)/2)
+
+
+/*Page 1 registers*/
+#define ZL38040_OUTPUT_PATH_EN_REG 	0x202
+#define ZL38040_DAC1_EN  	(1 << 0)
+#define ZL38040_DAC2_EN  	(1 << 1)
+#define ZL38040_TDMA1_EN 	(1 << 2)
+#define ZL38040_TDMA2_EN 	(1 << 3)
+#define ZL38040_TDMA3_EN 	(1 << 4)
+#define ZL38040_TDMA4_EN 	(1 << 5)
+#define ZL38040_TDMB1_EN 	(1 << 6)
+#define ZL38040_TDMB2_EN 	(1 << 7)
+#define ZL38040_TDMB3_EN 	(1 << 8)
+#define ZL38040_TDMB4_EN 	(1 << 9)
+#define ZL38040_MIC_SIN_EN 	(1 << 10)
+#define ZL38040_TDM_SOUT_EN (1 << 11)
+/*Cross-point Audio config registers*/
+#define ZL38040_DAC1_IN_PATH_REG 	0x210
+#define ZL38040_DAC2_IN_PATH_REG 	0x212
+#define ZL38040_TDM1L_IN_PATH_REG 	0x214
+#define ZL38040_TDM1R_IN_PATH_REG 	0x216
+#define ZL38040_TDMA3_IN_PATH_REG 	0x218
+#define ZL38040_TDMA4_IN_PATH_REG 	0x21A
+#define ZL38040_TDM2L_IN_PATH_REG 	0x21C
+#define ZL38040_TDM2R_IN_PATH_REG 	0x21E
+#define ZL38040_TDMB3_IN_PATH_REG 	0x220
+#define ZL38040_TDMB4_IN_PATH_REG 	0x222
+#define ZL38040_SIN_IN_PATH_REG 	0x224
+#define ZL38040_RIN_IN_PATH_REG 	0x226
+/*Cross-point Audio config values*/
+#define ZL38040_MIC1_PATH 	0x01
+#define ZL38040_MIC2_PATH 	0x02
+#define ZL38040_MIC3_PATH 	0x03
+#define ZL38040_MIC4_PATH 	0x04
+#define ZL38040_MIC_SELECT  ZL38040_MIC1_PATH  /*Change this accordingly*/
+#define ZL38040_TDMA1L_PATH 0x05
+#define ZL38040_TDMA1R_PATH 0x06
+#define ZL38040_TDMA3_PATH 	0x07
+#define ZL38040_TDMA4_PATH 	0x08
+#define ZL38040_TDMB2L_PATH 0x09
+#define ZL38040_TDMB2R_PATH 0x0A
+#define ZL38040_TDMB3_PATH 	0x0B
+#define ZL38040_TDMB4_PATH 	0x0C
+#define ZL38040_ROUT_PATH 	0x0D
+#define ZL38040_SOUT_PATH 	0x0E
+#define ZL38040_TGEN1_PATH 	0x0F
+#define ZL38040_TGEN2_PATH 	0x10
+
+#define ZL38040_TDMA_CFG_REG 		0x260
+#define ZL38040_TDM_I2S_CFG_VAL 0x8000
+#define ZL38040_TDM_PCM_CFG_VAL 0x0000
+#define ZL38040_TDM_CLK_POL_VAL 0x0004
+#define ZL38040_TDMA_FSALIGN 0x01     /*left justified*/
+#define ZL38040_TDMA_CLK_CFG_REG    	0x262
+#define ZL38040_TDM_TDM_MASTER_VAL (1<<15)
+#define ZL38040_TDMA_CH1_CFG_REG    	0x268
+#define ZL38040_TDMA_CH2_CFG_REG    	0x26A
+/*TDM -  Channel configuration*/
+#define ZL38040_TDMA_16BIT_LIN (1<<8)
+#define ZL38040_TDMA_8BIT_ALAW (2<<8)
+#define ZL38040_TDMA_8BIT_ULAW (3<<8)
+#define ZL38040_TDMA_8BIT_G722 (4<<8)
+#define ZL38040_TDMA_16BIT_LINHFS (6<<8)
+
+#define ZL38040_TDMA_FSRATE_8KHZ (1)
+#define ZL38040_TDMA_FSRATE_16KHZ (2)
+#define ZL38040_TDMA_FSRATE_24KHZ (3)
+#define ZL38040_TDMA_FSRATE_44_1KHZ (5)
+#define ZL38040_TDMA_FSRATE_48KHZ (6)
+
+#define ZL38040_MIC_EN_REG 			0x2B0
+#define ZL38040_MIC1_EN		0x01
+#define ZL38040_MIC2_EN		0x02
+#define ZL38040_MIC3_EN		0x04
+#define ZL38040_MIC4_EN		0x08
+
+#define ZL38040_LOW_POWER_REG  0x0206
+
+#define ZL38040_DAC1_EN_REG  0x02A0
+#define ZL38040_DAC2_EN_REG  0x02A2
+#define ZL38040_DACx_P_EN  (1<<15)
+#define ZL38040_DACx_M_EN  (1<<14)
+
+
+
+
+/*Page 2 registers*/
+#define ZL38040_USRGAIN		  0x30A
+#define ZL38040_SYSGAIN		  0x30C
+
+#define ZL38040_DAC_CTRL_REG  0x030A   /*ROUT GAIN control*/
+#define ZL38040_DAC_VOL_MAX   0x78     /*Max volume control for Speaker +21dB*/
+#define ZL38040_DAC_VOL_MAX_EXT   0x82     /*Max volume control for Speaker +29dB*/
+#define ZL38040_DAC_VOL_MIN   0x00     /*Min volume control for Speaker -24dB*/
+#define ZL38040_DAC_VOL_STEP  0x01     /*volume step control for Speaker -/+0.375dB*/
+
+#define ZL38040_MIC_VOL_CTRL_REG  0x030C    /*SIN GAIN control*/
+#define ZL38040_MIC_VOL_MAX   0x1F     /*Max volume control for Speaker +22.5dB*/
+#define ZL38040_MIC_VOL_MIN   0x00     /*Min volume control for Speaker -24dB*/
+#define ZL38040_MIC_VOL_STEP  0x01     /*volume step control for Speaker -/+1.5dB*/
+#define ZL38040_SOUT_VOL_CTRL_REG  0x030C    /*SOUT DIGITAL GAIN control*/
+#define ZL38040_SOUT_VOL_MAX   0x0F     /*Max volume control for Speaker +21dB*/
+#define ZL38040_SOUT_VOL_MIN   0x00     /*Min volume control for Speaker -24dB*/
+#define ZL38040_SOUT_VOL_STEP  0x01     /*volume step control for Speaker -/+3.0dB*/
+
+#define ZL38040_DAC1_GAIN_REG  0x0238
+#define ZL38040_DAC2_GAIN_REG  0x023A
+#define ZL38040_I2S1L_GAIN_REG  0x023C
+#define ZL38040_I2S1R_GAIN_REG  0x023E
+#define ZL38040_I2S2L_GAIN_REG  0x0244
+#define ZL38040_I2S2R_GAIN_REG  0x0246
+#define ZL38040_TDMA3_GAIN_REG  0x0240
+#define ZL38040_TDMA4_GAIN_REG  0x0242
+#define ZL38040_TDMB3_GAIN_REG  0x0248
+#define ZL38040_TDMB4_GAIN_REG  0x024A
+
+
+
+#define ZL38040_AEC_CTRL_REG1  0x0302
+#define ZL38040_AEC_CTRL_REG0  0x0300
+#define ZL38040_EAC_RST_EN  (1 << 0)
+#define ZL38040_MASTER_BYPASS_EN  (1 << 1)
+#define ZL38040_EQ_RCV_DIS_EN  (1 << 2)
+#define ZL38040_AEC_BYPASS_EN  (1 << 4)
+#define ZL38040_AUD_ENH_BYPASS_EN  (1 << 5)
+#define ZL38040_SPKR_LIN_EN  (1 << 6)
+#define ZL38040_MUTE_ROUT_EN  (1 << 7)
+#define ZL38040_MUTE_SOUT_EN  (1 << 8)
+#define ZL38040_MUTE_ALL_EN   (ZL38040_MUTE_ROUT_EN | ZL38040_MUTE_SOUT_EN)
+#define ZL38040_RIN_HPF_DIS_EN  (1 << 9)
+#define ZL38040_SIN_HPF_DIS_EN  (1 << 10)
+#define ZL38040_HOWLING_DIS_EN  (1 << 11)
+#define ZL38040_AGC_DIS_EN  (1 << 12)
+#define ZL38040_NB_DIS_EN  (1 << 13)
+#define ZL38040_SATT_DIS_EN  (1 << 14)
+#define ZL38040_HOWLING_MB_DIS_EN  (1 << 15)
+#define ZL38040_HPF_DIS (ZL38040_RIN_HPF_DIS_EN | ZL38040_SIN_HPF_DIS_EN)
+
+#define ZL38040_LEC_CTRL_REG  0x037A
+
+#define ZL38040_AEC_HPF_NULL_REG  0x0310
+
+
+#endif /* __MICROSEMI_SPIS_TW_H */
+
